<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Michal Zimmermann</title><link href="https://www.zimmi.cz/posts/" rel="alternate"></link><link href="https://www.zimmi.cz/posts/atom.xml" rel="self"></link><id>https://www.zimmi.cz/posts/</id><updated>2017-11-30T17:36:00+01:00</updated><entry><title>QGIS Plugin Development: Testing Your Code</title><link href="https://www.zimmi.cz/posts/2017/qgis-plugin-development-testing-your-code/" rel="alternate"></link><published>2017-11-30T17:36:00+01:00</published><updated>2017-11-30T17:36:00+01:00</updated><author><name>Michal Zimmermann</name></author><id>tag:www.zimmi.cz,2017-11-30:/posts/2017/qgis-plugin-development-testing-your-code/</id><summary type="html">&lt;p&gt;Good news, everyone! The &lt;a href="https://plugins.qgis.org/plugins/AttributeTransfer/"&gt;AttributeTransfer&lt;/a&gt; plugin has been approved for &lt;a href="https://plugins.qgis.org/plugins/"&gt;&lt;span class="caps"&gt;QGIS&lt;/span&gt; Python Plugins Repository&lt;/a&gt;. It&amp;#8217;s available via &lt;span class="caps"&gt;QGIS&lt;/span&gt; &lt;em&gt;Manage and Install Plugins&lt;/em&gt; menu. Feel free to&amp;nbsp;download!&lt;/p&gt;
&lt;p&gt;Nevertheless, this post (the last in the series) covers &lt;span class="caps"&gt;QGIS&lt;/span&gt; plugin testing rather than my personal feelings about the aforementioned&amp;nbsp;success.&lt;/p&gt;
&lt;h2&gt;Testing …&lt;/h2&gt;</summary><content type="html">&lt;p&gt;Good news, everyone! The &lt;a href="https://plugins.qgis.org/plugins/AttributeTransfer/"&gt;AttributeTransfer&lt;/a&gt; plugin has been approved for &lt;a href="https://plugins.qgis.org/plugins/"&gt;&lt;span class="caps"&gt;QGIS&lt;/span&gt; Python Plugins Repository&lt;/a&gt;. It&amp;#8217;s available via &lt;span class="caps"&gt;QGIS&lt;/span&gt; &lt;em&gt;Manage and Install Plugins&lt;/em&gt; menu. Feel free to&amp;nbsp;download!&lt;/p&gt;
&lt;p&gt;Nevertheless, this post (the last in the series) covers &lt;span class="caps"&gt;QGIS&lt;/span&gt; plugin testing rather than my personal feelings about the aforementioned&amp;nbsp;success.&lt;/p&gt;
&lt;h2&gt;Testing means&amp;nbsp;mocking&lt;/h2&gt;
&lt;p&gt;To test a &lt;span class="caps"&gt;QGIS&lt;/span&gt; plugin you need to simulate the environment it&amp;#8217;s meant to run in. And that environment is obviously &lt;span class="caps"&gt;QGIS&lt;/span&gt; itself, yet it&amp;#8217;s not feasible to launch &lt;span class="caps"&gt;QGIS&lt;/span&gt; every time you run a test. Luckily, &lt;a href="https://github.com/zimmicz/qgis-attribute-transfer-plugin/blob/master/tests/utilities.py"&gt;there&amp;#8217;s a great &lt;code&gt;QGIS&lt;/code&gt; mock&lt;/a&gt; that gets you going in no time (it completely slipped my mind where I found that piece of code&amp;nbsp;though).&lt;/p&gt;
&lt;h2&gt;Testing means you need&amp;nbsp;data&lt;/h2&gt;
&lt;p&gt;Every test is run again and again, which means it has to reset the data being used to its default state. This might be a &lt;span class="caps"&gt;PIDA&lt;/span&gt; if the test changes the data in an unpredictable&amp;nbsp;manner.&lt;/p&gt;
&lt;p&gt;Using &lt;span class="caps"&gt;QGIS&lt;/span&gt; memory layers &lt;a href="https://github.com/zimmicz/qgis-attribute-transfer-plugin/blob/master/tests/create_dummy_data.py"&gt;you can prepare fresh data&lt;/a&gt; for each of your tests, effectively putting the whole data manipulation process&amp;nbsp;aside.&lt;/p&gt;
&lt;h2&gt;Writing&amp;nbsp;tests&lt;/h2&gt;
&lt;p&gt;Each of the AttributeTransfer plugin tests inherits from &lt;code&gt;unittest.TestCase&lt;/code&gt;, which comes with several methods you might be familiar with from other languages: &lt;code&gt;setUp()&lt;/code&gt; is run before for every test method, while &lt;code&gt;tearDown()&lt;/code&gt; is run after each of them. Tests are defined as methods whose names start with the word &lt;code&gt;test&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Each test should call some &lt;code&gt;assertWhatever&lt;/code&gt; method that checks whether the test passed or failed. Here&amp;#8217;s an example of such a test covering non-point&amp;nbsp;layers.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="c1"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;
&lt;span class="c1"&gt;# @Date    : 2017-11-18 18:40:50&lt;/span&gt;
&lt;span class="c1"&gt;# @Author  : Michal Zimmermann &amp;lt;zimmicz@gmail.com&amp;gt;&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sip&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;unittest&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;qgis.core&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;QgsMapLayerRegistry&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;QgsVectorLayer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;QgsFeature&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;QgsGeometry&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;QgsPoint&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;utilities&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;get_qgis_app&lt;/span&gt;

&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abspath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__file__&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/..&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;attribute_transfer&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;AttributeTransfer&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;create_dummy_data&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;create_dummy_data_polygon_or_line&lt;/span&gt;

&lt;span class="n"&gt;sip&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setapi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;QtCore&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;sip&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setapi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;QString&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;sip&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setapi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;QDate&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;sip&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setapi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;QDateTime&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;sip&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setapi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;QTextStream&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;sip&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setapi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;QTime&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;sip&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setapi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;QUrl&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;sip&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setapi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;QVariant&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;QGIS_APP&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_qgis_app&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;IFACE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QGIS_APP&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AttributeTransferTestPolygonOrLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;setUp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;source_layer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QgsVectorLayer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;Polygon?crs=epsg:4326&amp;amp;field=id:integer&amp;amp;field=textAttr:string&amp;amp;field=intAttr:integer&amp;amp;field=decAttr:double&amp;amp;field=dateAttr:date&amp;amp;index=yes&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;source layer&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;memory&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;target_layer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QgsVectorLayer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;Linestring?crs=epsg:4326&amp;amp;field=id:integer&amp;amp;index=yes&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;target layer&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;memory&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;widget&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;AttributeTransfer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IFACE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;registry&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QgsMapLayerRegistry&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;registry&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;removeAllMapLayers&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;registry&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addMapLayers&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;source_layer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;target_layer&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="n"&gt;create_dummy_data_polygon_or_line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;source_layer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;target_layer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;widget&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;initGui&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;widget&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vectors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;source_layer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;target_layer&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;widget&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;editable_vectors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;source_layer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;target_layer&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;widget&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dlg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sourceLayer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addItems&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;source layer&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;target layer&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_text_attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;ATTRIBUTE_NAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;textAttr&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;ATTRIBUTE_INDEX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_test_attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ATTRIBUTE_NAME&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ATTRIBUTE_INDEX&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_int_attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;ATTRIBUTE_NAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;intAttr&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;ATTRIBUTE_INDEX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_test_attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ATTRIBUTE_NAME&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ATTRIBUTE_INDEX&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_dec_attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;ATTRIBUTE_NAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;decAttr&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;ATTRIBUTE_INDEX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_test_attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ATTRIBUTE_NAME&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ATTRIBUTE_INDEX&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_date_attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;ATTRIBUTE_NAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;dateAttr&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;ATTRIBUTE_INDEX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_test_attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ATTRIBUTE_NAME&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ATTRIBUTE_INDEX&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_existing_attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;ATTRIBUTE_NAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;ATTRIBUTE_INDEX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;widget&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dlg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sourceAttribute&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setCurrentIndex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ATTRIBUTE_INDEX&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;widget&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dlg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;targetAttribute&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ATTRIBUTE_NAME&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;widget&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dlg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sourceAttribute&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;currentText&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;ATTRIBUTE_NAME&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertFalse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;widget&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;transfer&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_test_attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;attr_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;attr_index&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;widget&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dlg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sourceAttribute&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setCurrentIndex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;attr_index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;widget&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dlg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;targetAttribute&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;attr_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;widget&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dlg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sourceAttribute&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;currentText&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;attr_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;widget&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;transfer&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="n"&gt;target_fields&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                         &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;target_layer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dataProvider&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fields&lt;/span&gt;&lt;span class="p"&gt;()]&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertIn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;attr_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;target_fields&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;source_features&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;source_layer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getFeatures&lt;/span&gt;&lt;span class="p"&gt;()]&lt;/span&gt;
        &lt;span class="n"&gt;target_features&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;target_layer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getFeatures&lt;/span&gt;&lt;span class="p"&gt;()]&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;source_features&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;attr_name&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;target_features&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
                             &lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;attr_name&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="python"></category><category term="QGIS"></category></entry><entry><title>QGIS Plugin Development: AttributeTransfer Plugin</title><link href="https://www.zimmi.cz/posts/2017/qgis-plugin-development-attributetransfer-plugin/" rel="alternate"></link><published>2017-11-23T19:00:00+01:00</published><updated>2017-11-23T19:00:00+01:00</updated><author><name>Michal Zimmermann</name></author><id>tag:www.zimmi.cz,2017-11-23:/posts/2017/qgis-plugin-development-attributetransfer-plugin/</id><summary type="html">&lt;p&gt;This part finally brings &lt;a href="https://github.com/zimmicz/qgis-attribute-transfer-plugin"&gt;the whole source code of the &lt;span class="caps"&gt;QGIS&lt;/span&gt; AttributeTransfer plugin&lt;/a&gt;.&lt;/p&gt;
&lt;div class="text-center"&gt;&lt;img data-echo="/posts/assets/qgis-plugin-development-attribute-transfer-plugin/qgis.gif"/&gt;&lt;/div&gt;

&lt;p&gt;The plugin itself resides in the &lt;a href="https://github.com/zimmicz/qgis-attribute-transfer-plugin/blob/master/attribute_transfer.py"&gt;&lt;code&gt;attribute_transfer.py&lt;/code&gt;&lt;/a&gt; file. When &lt;code&gt;run()&lt;/code&gt; method is invoked, the &lt;span class="caps"&gt;QT&lt;/span&gt; form pops up with combos prefilled with available vector layers that support attribute&amp;nbsp;editing.&lt;/p&gt;
&lt;p&gt;Source and target layer combos are mutually …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This part finally brings &lt;a href="https://github.com/zimmicz/qgis-attribute-transfer-plugin"&gt;the whole source code of the &lt;span class="caps"&gt;QGIS&lt;/span&gt; AttributeTransfer plugin&lt;/a&gt;.&lt;/p&gt;
&lt;div class="text-center"&gt;&lt;img data-echo="/posts/assets/qgis-plugin-development-attribute-transfer-plugin/qgis.gif"/&gt;&lt;/div&gt;

&lt;p&gt;The plugin itself resides in the &lt;a href="https://github.com/zimmicz/qgis-attribute-transfer-plugin/blob/master/attribute_transfer.py"&gt;&lt;code&gt;attribute_transfer.py&lt;/code&gt;&lt;/a&gt; file. When &lt;code&gt;run()&lt;/code&gt; method is invoked, the &lt;span class="caps"&gt;QT&lt;/span&gt; form pops up with combos prefilled with available vector layers that support attribute&amp;nbsp;editing.&lt;/p&gt;
&lt;p&gt;Source and target layer combos are mutually exclusive, thus it&amp;#8217;s not possible to transfer the attribute within the same&amp;nbsp;layer.&lt;/p&gt;
&lt;p&gt;Coding the plugin, I came across minor issues related mainly to the &lt;code&gt;QgsSpatialIndex&lt;/code&gt; implementation. In &lt;a href="https://www.zimmi.cz/posts/2017/qgis-plugin-development-finding-nearest-neighbors/"&gt;the nearest neighbor analysis part&lt;/a&gt; of the series, the &lt;code&gt;QgsSpatialIndex.nearestNeighbor&lt;/code&gt; method was mentioned. Yet, as I found out, this method only works with &lt;code&gt;QgsPoint&lt;/code&gt; geometries. Those are impossible to get from &lt;code&gt;QgsPolygon&lt;/code&gt; or &lt;code&gt;QgsPolyline&lt;/code&gt;, though. What can one possibly do, facing such a misfortune? Well&amp;hellip; draw a solution&amp;nbsp;matrix.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;point&lt;/th&gt;
&lt;th&gt;line&lt;/th&gt;
&lt;th&gt;polygon&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;point&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;QgsSpatialIndex.nearestNeighbor&lt;/td&gt;
&lt;td&gt;QgsSpatialIndex.nearestNeighbor; layers have to be switched, e.g. source layer = line&lt;/td&gt;
&lt;td&gt;QgsSpatialIndex.nearestNeighbor; layers have to be switched, e.g. source layer = polygon&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;line&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;QgsSpatialIndex.nearestNeighbor&lt;/td&gt;
&lt;td&gt;QgsSpatialIndex.intersects with QgsGeometry.distance&lt;/td&gt;
&lt;td&gt;QgsSpatialIndex.intersects with QgsGeometry.distance&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;polygon&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;QgsSpatialIndex.nearestNeighbor&lt;/td&gt;
&lt;td&gt;QgsSpatialIndex.intersects with QgsGeometry.distance&lt;/td&gt;
&lt;td&gt;QgsSpatialIndex.intersects with QgsGeometry.distance&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Using the spatial index brings one more issue I&amp;#8217;ve come to realize just after implementing the special comparison workflows for different geometry types. There&amp;#8217;s a chance of finding the nearest feature using the bounding box that&amp;#8217;s actually &lt;em&gt;not&lt;/em&gt; the nearest feature. In that case, I chose to find the most distant vertex of such a feature and use it to construct the rectangle around the target feature. If there are any source features in such a rectangle, it&amp;#8217;s very likely one of them is the &lt;em&gt;real&lt;/em&gt; nearest&amp;nbsp;feature.&lt;/p&gt;
&lt;div class="text-center"&gt;&lt;img data-echo="/posts/assets/qgis-plugin-development-attribute-transfer-plugin/qgis.png"/&gt;&lt;/div&gt;

&lt;p&gt;Right now, I&amp;#8217;m working on &lt;a href="https://github.com/zimmicz/qgis-attribute-transfer-plugin/issues/3"&gt;finding the nearest feature even if no bounding box intersection is found&lt;/a&gt;. Meanwhile, &lt;a href="https://github.com/zimmicz/qgis-attribute-transfer-plugin/issues/2"&gt;the plugin is being reviewed&lt;/a&gt; to be featured in &lt;a href="https://plugins.qgis.org"&gt;&lt;span class="caps"&gt;QGIS&lt;/span&gt; Plugins repository&lt;/a&gt;. Fingers&amp;nbsp;crossed.&lt;/p&gt;
&lt;p&gt;I thought this was going to be the last part of the series. But how could one possibly claim the coding project done without writing &lt;em&gt;tests&lt;/em&gt;? Stay tuned for the next&amp;nbsp;episode.&lt;/p&gt;</content><category term="python"></category><category term="QGIS"></category></entry><entry><title>QGIS Plugin Development: Creating GUI with Qt Designer</title><link href="https://www.zimmi.cz/posts/2017/qgis-plugin-development-creating-gui-with-qt-designer/" rel="alternate"></link><published>2017-11-16T15:00:00+01:00</published><updated>2017-11-16T15:00:00+01:00</updated><author><name>Michal Zimmermann</name></author><id>tag:www.zimmi.cz,2017-11-16:/posts/2017/qgis-plugin-development-creating-gui-with-qt-designer/</id><summary type="html">&lt;p&gt;After fiddling with &lt;a href="https://www.zimmi.cz/posts/2017/qgis-plugin-development-using-python-console/"&gt;&lt;span class="caps"&gt;QGIS&lt;/span&gt; Python console&lt;/a&gt; and implementing &lt;a href="https://www.zimmi.cz/posts/2017/qgis-plugin-development-finding-nearest-neighbors/"&gt;nearest neighbor analysis&lt;/a&gt;, I&amp;#8217;m going to create a very simple &lt;span class="caps"&gt;GUI&lt;/span&gt; for the plugin at&amp;nbsp;last.&lt;/p&gt;
&lt;p&gt;While &lt;span class="caps"&gt;QGIS&lt;/span&gt; &lt;span class="caps"&gt;API&lt;/span&gt; docs took me few hours to grasp, the PyQGIS ecosystem knocked my socks off. Here comes the list of tools you should …&lt;/p&gt;</summary><content type="html">&lt;p&gt;After fiddling with &lt;a href="https://www.zimmi.cz/posts/2017/qgis-plugin-development-using-python-console/"&gt;&lt;span class="caps"&gt;QGIS&lt;/span&gt; Python console&lt;/a&gt; and implementing &lt;a href="https://www.zimmi.cz/posts/2017/qgis-plugin-development-finding-nearest-neighbors/"&gt;nearest neighbor analysis&lt;/a&gt;, I&amp;#8217;m going to create a very simple &lt;span class="caps"&gt;GUI&lt;/span&gt; for the plugin at&amp;nbsp;last.&lt;/p&gt;
&lt;p&gt;While &lt;span class="caps"&gt;QGIS&lt;/span&gt; &lt;span class="caps"&gt;API&lt;/span&gt; docs took me few hours to grasp, the PyQGIS ecosystem knocked my socks off. Here comes the list of tools you should incorporate into your development process as soon as&amp;nbsp;possible.&lt;/p&gt;
&lt;h2&gt;Plugin&amp;nbsp;Builder&lt;/h2&gt;
&lt;p&gt;The &lt;a href="https://plugins.qgis.org/plugins/pluginbuilder/"&gt;&lt;span class="caps"&gt;QGIS&lt;/span&gt; Plugin Builder&lt;/a&gt; is a plugin created to create&amp;hellip; well, other plugins. It gets you going in minutes and lets you code instead of setting up things you don&amp;#8217;t want to be setting up. A definite must-have. Note you should put the plugin inside the &lt;span class="caps"&gt;QGIS&lt;/span&gt; plugins folder (defaults to ~/.qgis2/python/plugins) in&amp;nbsp;Linux.&lt;/p&gt;
&lt;div class="text-center"&gt;&lt;img data-echo="/posts/assets/qgis-plugin-development-creating-gui-with-qt-designer/qgis.gif"/&gt;&lt;/div&gt;

&lt;p&gt;Remember to run &lt;code&gt;pyrcc4 -o resources.py resources.qrc&lt;/code&gt; inside your plugin folder before you add it to &lt;span class="caps"&gt;QGIS&lt;/span&gt;.&lt;/p&gt;
&lt;h2&gt;Plugin&amp;nbsp;Reloader&lt;/h2&gt;
&lt;p&gt;The &lt;a href="https://plugins.qgis.org/plugins/plugin_reloader/"&gt;&lt;span class="caps"&gt;QGIS&lt;/span&gt; Plugin Reloader&lt;/a&gt; is a plugin (possibly created with &lt;span class="caps"&gt;QGIS&lt;/span&gt; Plugin Builder) that lets you live reload your plugin while you code. No &lt;span class="caps"&gt;QGIS&lt;/span&gt; restarts needed. A definite&amp;nbsp;must-have.&lt;/p&gt;
&lt;h2&gt;Qt&amp;nbsp;Designer&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.qt.io/qt-features-libraries-apis-tools-and-ide/"&gt;Qt Designer&lt;/a&gt; comes with &lt;code&gt;qt4-designer&lt;/code&gt; package in Ubuntu. It is tailored to design and build GUIs from Qt components that can be used within &lt;span class="caps"&gt;QGIS&lt;/span&gt;. Its drag&amp;amp;drop interface lets you prototype&amp;nbsp;quickly.&lt;/p&gt;
&lt;p&gt;Thanks to the Plugin Builder you can load the &lt;code&gt;attribute_transfer_dialog_base.ui&lt;/code&gt; file straight into the Qt Designer and adjust it to your&amp;nbsp;needs.&lt;/p&gt;
&lt;div class="text-center"&gt;&lt;img data-echo="/posts/assets/qgis-plugin-development-creating-gui-with-qt-designer/qt.gif"/&gt;&lt;/div&gt;

&lt;p&gt;It doesn&amp;#8217;t take much, just one &lt;code&gt;QLineEdit&lt;/code&gt; and a few &lt;code&gt;QComboBox&lt;/code&gt; widgets. Those will be available in the &lt;code&gt;attribute_transfer.py&lt;/code&gt; file as properties of the &lt;code&gt;AttributeTransferDialog&lt;/code&gt; class.&lt;/p&gt;
&lt;p&gt;The widget name can be customized in the right sidebar and I advise you to do so. I chose the&amp;nbsp;following:&lt;/p&gt;
&lt;div class="text-center"&gt;&lt;img data-echo="/posts/assets/qgis-plugin-development-creating-gui-with-qt-designer/qt.png"/&gt;&lt;/div&gt;

&lt;p&gt;Once loaded with Plugins -&amp;gt; Manage and Install Plugins -&amp;gt; AttributeTransfer, the plugin is available right from the toolbar or Vector menu. It is missing the business logic completely, but I have this covered in &lt;a href="https://www.zimmi.cz/posts/2017/qgis-plugin-development-finding-nearest-neighbors/"&gt;the previous part&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;All that is to be done is to bind those two parts&amp;nbsp;together.&lt;/p&gt;</content><category term="python"></category><category term="QGIS"></category></entry><entry><title>QGIS Plugin Development: Finding Nearest Neighbors</title><link href="https://www.zimmi.cz/posts/2017/qgis-plugin-development-finding-nearest-neighbors/" rel="alternate"></link><published>2017-11-09T15:00:00+01:00</published><updated>2017-11-09T15:00:00+01:00</updated><author><name>Michal Zimmermann</name></author><id>tag:www.zimmi.cz,2017-11-09:/posts/2017/qgis-plugin-development-finding-nearest-neighbors/</id><summary type="html">&lt;p&gt;I described basics of vector layers manipulation in &lt;a href="https://www.zimmi.cz/posts/2017/qgis-plugin-development-using-python-console/"&gt;the previous part&lt;/a&gt; of the series. With my goal in mind (fully functional custom plugin capable of writing an attribute value from a source layer to a target layer based on a feature distance), I&amp;#8217;d like to discuss &lt;strong&gt;spatial indexing&lt;/strong&gt; and …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I described basics of vector layers manipulation in &lt;a href="https://www.zimmi.cz/posts/2017/qgis-plugin-development-using-python-console/"&gt;the previous part&lt;/a&gt; of the series. With my goal in mind (fully functional custom plugin capable of writing an attribute value from a source layer to a target layer based on a feature distance), I&amp;#8217;d like to discuss &lt;strong&gt;spatial indexing&lt;/strong&gt; and &lt;strong&gt;nearest neighbor analysis&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="text-center"&gt;&lt;img data-echo="/posts/assets/qgis-plugin-development-finding-nearest-neighbors/qgis.png"/&gt;&lt;/div&gt;

&lt;p&gt;The picture above illustrates the task that can be solved solely by using &lt;span class="caps"&gt;QGIS&lt;/span&gt; &lt;span class="caps"&gt;API&lt;/span&gt;. Imagine you&amp;#8217;re given a source layer with an attribute filled with values. You&amp;#8217;re given a target layer as well, sadly though, the values in this layer are missing (&lt;em&gt;not so rare in the &lt;span class="caps"&gt;GIS&lt;/span&gt; world, right?&lt;/em&gt;). Yet you know that the missing attribute value of each feature in the target layer can be filled by the value of its nearest neighbor from the source layer. How do you do&amp;nbsp;that?&lt;/p&gt;
&lt;h2&gt;Generating dummy&amp;nbsp;data&lt;/h2&gt;
&lt;p&gt;Let&amp;#8217;s create two memory data sets with id and value attributes. Both of them will have ten&amp;nbsp;features.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;qgis.core&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;QgsMapLayerRegistry&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;QgsVectorLayer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;QgsFeature&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;QgsGeometry&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;QgsPoint&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;QgsSpatialIndex&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;qgis.utils&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;iface&lt;/span&gt;

&lt;span class="n"&gt;source_layer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QgsVectorLayer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;point?crs=epsg:4326&amp;amp;field=id:integer&amp;amp;field=value:integer&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Source layer&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;memory&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;target_layer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QgsVectorLayer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;point?crs=epsg:4326&amp;amp;field=id:integer&amp;amp;field=value:integer&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Target layer&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;memory&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create_dummy_data&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;

    &lt;span class="n"&gt;source_layer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startEditing&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;target_layer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startEditing&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;feature&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QgsFeature&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;source_layer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pendingFields&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;feature&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setGeometry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;QgsGeometry&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fromPoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;QgsPoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
        &lt;span class="n"&gt;feature&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;feature&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;value&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;source_layer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addFeature&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;feature&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;feature&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QgsFeature&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;source_layer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pendingFields&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;feature&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setGeometry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;QgsGeometry&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fromPoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;QgsPoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
        &lt;span class="n"&gt;feature&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;target_layer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addFeature&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;feature&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;source_layer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;commitChanges&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;target_layer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;commitChanges&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;QgsMapLayerRegistry&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addMapLayer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;source_layer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;QgsMapLayerRegistry&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addMapLayer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target_layer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;create_dummy_data&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Writing values from the nearest&amp;nbsp;neighbor&lt;/h2&gt;
&lt;p&gt;The actual nearest neighbor analysis can be done in ten lines of code! First, the &lt;code&gt;qgis.core.QgsSpatialIndex&lt;/code&gt; is built from all the &lt;code&gt;source_layer&lt;/code&gt; features. Then, you iterate over the &lt;code&gt;target_layer&lt;/code&gt; features and for each of them, gets only one (&lt;code&gt;nearestNeighbor(f.geometry().asPoint(), 1)[0]&lt;/code&gt;) nearest neighbor. At last, you just write the nearest neighbor&amp;#8217;s attribute value to the target layer and commit changes. Just use the following code with the code&amp;nbsp;above.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;write_values_from_nn&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;source_layer_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QgsSpatialIndex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;source_layer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getFeatures&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="n"&gt;source_layer_features&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;feature&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="n"&gt;feature&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;feature&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;source_layer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getFeatures&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;
    &lt;span class="n"&gt;target_layer_features&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;target_layer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getFeatures&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;target_layer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startEditing&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;target_layer_features&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;nearest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;source_layer_index&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nearestNeighbor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;geometry&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;asPoint&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;source_layer_features&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;nearest&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;value&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;target_layer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;changeAttributeValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;target_layer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;commitChanges&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;write_values_from_nn&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Missing pieces or what&amp;#8217;s&amp;nbsp;next&lt;/h2&gt;
&lt;p&gt;I&amp;#8217;m one step closer to my goal. What&amp;#8217;s&amp;nbsp;missing?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;capabilities checks: does the target layer support edits? Check the layer data provider capabilities to find&amp;nbsp;out.&lt;/li&gt;
&lt;li&gt;user logging: notices, warnings or errors are completely missing. It will be great to have them shown inside &lt;code&gt;qgis.gui.QgsMessageBar&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;custom attributes: this version expects both layers to have the same attribute with the same data&amp;nbsp;type.&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;GUI&lt;/span&gt;: a very simple PyQt widget will turn this console-based script into a custom plugin. That&amp;#8217;s what&amp;#8217;s going to be&amp;nbsp;next.&lt;/li&gt;
&lt;/ul&gt;</content><category term="python"></category><category term="QGIS"></category></entry><entry><title>QGIS Plugin Development: Using Python Console</title><link href="https://www.zimmi.cz/posts/2017/qgis-plugin-development-using-python-console/" rel="alternate"></link><published>2017-11-02T15:00:00+01:00</published><updated>2017-11-02T15:00:00+01:00</updated><author><name>Michal Zimmermann</name></author><id>tag:www.zimmi.cz,2017-11-02:/posts/2017/qgis-plugin-development-using-python-console/</id><summary type="html">&lt;p&gt;As mentioned in &lt;a href="https://www.zimmi.cz/posts/2017/qgis-plugin-development-getting-started/"&gt;previous part&lt;/a&gt; of the series, the &lt;span class="caps"&gt;QGIS&lt;/span&gt; Python console is an entry point to &lt;span class="caps"&gt;GIS&lt;/span&gt; workflow automation within &lt;span class="caps"&gt;QGIS&lt;/span&gt;. Remember there&amp;#8217;s an &lt;code&gt;iface&lt;/code&gt; object representing &lt;code&gt;qgis.gui.QgisInterface&lt;/code&gt; instance within the console that gives you access to the whole &lt;span class="caps"&gt;QGIS&lt;/span&gt; &lt;span class="caps"&gt;GUI&lt;/span&gt;. Let&amp;#8217;s see what we …&lt;/p&gt;</summary><content type="html">&lt;p&gt;As mentioned in &lt;a href="https://www.zimmi.cz/posts/2017/qgis-plugin-development-getting-started/"&gt;previous part&lt;/a&gt; of the series, the &lt;span class="caps"&gt;QGIS&lt;/span&gt; Python console is an entry point to &lt;span class="caps"&gt;GIS&lt;/span&gt; workflow automation within &lt;span class="caps"&gt;QGIS&lt;/span&gt;. Remember there&amp;#8217;s an &lt;code&gt;iface&lt;/code&gt; object representing &lt;code&gt;qgis.gui.QgisInterface&lt;/code&gt; instance within the console that gives you access to the whole &lt;span class="caps"&gt;QGIS&lt;/span&gt; &lt;span class="caps"&gt;GUI&lt;/span&gt;. Let&amp;#8217;s see what we can do inside the&amp;nbsp;console.&lt;/p&gt;
&lt;h2&gt;Loading vector layers&amp;nbsp;folder&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;glob&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;qgis.core&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;QgsMapLayerRegistry&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;QgsVectorLayer&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;load_folder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;folder&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;VALID_EXTENSIONS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.geojson&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;.gpkg&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;.shp&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;files&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;glob&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;glob&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;{}/*&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;folder&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;endswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;VALID_EXTENSIONS&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;layer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QgsVectorLayer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ogr&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;layer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isValid&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="n"&gt;iface&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;messageBar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pushCritical&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Failed to load:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;continue&lt;/span&gt;

        &lt;span class="n"&gt;QgsMapLayerRegistry&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addMapLayer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;layer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;load_folder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;path/to/your/vector/files/folder&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;code&gt;QgsMapLayerRegistry&lt;/code&gt; represents &lt;em&gt;Layers Panel&lt;/em&gt; as present in the &lt;span class="caps"&gt;QGIS&lt;/span&gt; &lt;span class="caps"&gt;GUI&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;iface.messageBar()&lt;/code&gt; returns the message bar of the main app and lets you notify the user of what&amp;#8217;s going on under the&amp;nbsp;hood&lt;/li&gt;
&lt;li&gt;&lt;code&gt;QgsVectorLayer&lt;/code&gt; represents a vector layer with its underlying vector data&amp;nbsp;sets&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Editing active layer attribute&amp;nbsp;table&lt;/h2&gt;
&lt;p&gt;The following code demonstrates the possibility to edit vector layer attribute table via&amp;nbsp;console.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Any attribute to be written has to come in form of a &lt;code&gt;qgis.core.QgsField&lt;/code&gt; - this is more or less an encapsulation of an attribute name and its type (&lt;code&gt;PyQt4.QtCore.QVariant&lt;/code&gt; to be&amp;nbsp;precise)&lt;/li&gt;
&lt;li&gt;The underlying data provider has to be capable of attribute addition (&lt;code&gt;caps &amp;amp; QgsVectorDataProvider.AddAttributes&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;QgsVectorLayer.addAttribute&lt;/code&gt; method returns boolean rather than throwing an&amp;nbsp;exception&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- --&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;qgis.core&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;QgsField&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;qgis.gui&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;QgsMessageBar&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;PyQt4.QtCore&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;QVariant&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;edit_active_layer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;attr_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;attr_type&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;layer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;iface&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;activeLayer&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;caps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;layer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dataProvider&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;capabilities&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;caps&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;QgsVectorDataProvider&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AddAttributes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;layer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startEditing&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;layer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;QgsField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;attr_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;attr_type&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
            &lt;span class="n"&gt;iface&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;messageBar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pushMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Attribute {0} was successfully added to the active layer.&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;attr_name&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;QgsMessageBar&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SUCCESS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;layer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;commitChanges&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;iface&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;messageBar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pushMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Attribute {0} was not added. Does it already exist?&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;attr_name&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;QgsMessageBar&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CRITICAL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;layer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rollBack&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;edit_active_layer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;new_string_attribute&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;QVariant&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The whole series aims to present a plugin capable of writing a new attribute and its value to an existing layer. Thus, this code might come handy in the&amp;nbsp;future.&lt;/p&gt;
&lt;h2&gt;Creating a new vector&amp;nbsp;layer&lt;/h2&gt;
&lt;p&gt;It&amp;#8217;s possible to create a whole new vector layer with &lt;span class="caps"&gt;QGIS&lt;/span&gt; Python console. I present a very simple &lt;code&gt;create_new_layer&lt;/code&gt; function, yet I hope you can imagine the ways it can be&amp;nbsp;tweaked.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;qgis.core&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;QgsField&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;QgsFields&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;QgsVectorLayer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;QgsFeature&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;QgsGeometry&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;QgsPoint&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;PyQt4.QtCore&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;QVariant&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create_new_layer&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/path/to/your/vector/file.gpkg&amp;quot;&lt;/span&gt;

    &lt;span class="n"&gt;fields&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QgsFields&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;fields&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;QgsField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;attr1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;QVariant&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;fields&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;QgsField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;attr2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;QVariant&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="nb"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QgsVectorFileWriter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;UTF8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;fields&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;QGis&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WKBPoint&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;QgsCoordinateReferenceSystem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4326&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;GPKG&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;layer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QgsVectorLayer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ogr&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;QgsMapLayerRegistry&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addMapLayer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;layer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;layer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dataProvider&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;capabilities&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;QgsVectorDataProvider&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AddAttributes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;

    &lt;span class="n"&gt;feature&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QgsFeature&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;layer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pendingFields&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="n"&gt;feature&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setGeometry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;QgsGeometry&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fromPoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;QgsPoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
    &lt;span class="n"&gt;feature&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;attr1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;attr1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;feature&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;attr2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;layer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startEditing&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;layer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addFeature&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;feature&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;layer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;commitChanges&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;layer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rollBack&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;iface&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;messageBar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pushMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Feature addition failed.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;QgsMessageBar&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CRITICAL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;create_new_layer&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Those were just few examples of what can be done with &lt;span class="caps"&gt;QGIS&lt;/span&gt; &lt;span class="caps"&gt;API&lt;/span&gt; and Python console. Next time, I&amp;#8217;d like to focus on spatial joins inside &lt;span class="caps"&gt;QGIS&lt;/span&gt; - another step to the final&amp;nbsp;plugin.&lt;/p&gt;</content><category term="python"></category><category term="QGIS"></category></entry><entry><title>QGIS Plugin Development: Getting Started</title><link href="https://www.zimmi.cz/posts/2017/qgis-plugin-development-getting-started/" rel="alternate"></link><published>2017-10-26T15:00:00+02:00</published><updated>2017-10-26T15:00:00+02:00</updated><author><name>Michal Zimmermann</name></author><id>tag:www.zimmi.cz,2017-10-26:/posts/2017/qgis-plugin-development-getting-started/</id><summary type="html">&lt;p&gt;&lt;span class="caps"&gt;QGIS&lt;/span&gt; 2.1x is a brilliant tool for Python-based automation in form of custom scripts or even plugins. The first steps towards writing the custom code might be a bit difficult, as you need to grasp quite complex Python &lt;span class="caps"&gt;API&lt;/span&gt;. The &lt;em&gt;&lt;span class="caps"&gt;QGIS&lt;/span&gt; Plugin Development&lt;/em&gt; series (see the list of other …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;span class="caps"&gt;QGIS&lt;/span&gt; 2.1x is a brilliant tool for Python-based automation in form of custom scripts or even plugins. The first steps towards writing the custom code might be a bit difficult, as you need to grasp quite complex Python &lt;span class="caps"&gt;API&lt;/span&gt;. The &lt;em&gt;&lt;span class="caps"&gt;QGIS&lt;/span&gt; Plugin Development&lt;/em&gt; series (see the list of other parts at the end of this article) targets pitfalls and traps I&amp;#8217;ve met while learning to use it&amp;nbsp;myself.&lt;/p&gt;
&lt;p&gt;The outcome of the series is going to be &lt;strong&gt;a fully functional custom plugin&lt;/strong&gt; capable of writing attribute values from a source layer nearest neighbour to a target layer based on their spatial&amp;nbsp;proximity.&lt;/p&gt;
&lt;p&gt;In this part, I&amp;#8217;ll mention the basics a.k.a. what is good to know before you&amp;nbsp;start.&lt;/p&gt;
&lt;h2&gt;Documentation&lt;/h2&gt;
&lt;p&gt;Different &lt;span class="caps"&gt;QGIS&lt;/span&gt; versions come with different Python &lt;span class="caps"&gt;API&lt;/span&gt;. The documentation is to be found at &lt;a href="http://qgis.org"&gt;https://qgis.org&lt;/a&gt;, the latest being &lt;a href="http://qgis.org/api/2.18/"&gt;version 2.18&lt;/a&gt;. Note that if you come directly to &lt;a href="http://qgis.org/api/"&gt;http://qgis.org/api/&lt;/a&gt;, you&amp;#8217;ll see the current master&amp;nbsp;docs.&lt;/p&gt;
&lt;p&gt;Alternatively, you can &lt;code&gt;apt install qgis-api-doc&lt;/code&gt; on your Ubuntu-based system and run &lt;code&gt;python -m SimpleHTTPServer [port]&lt;/code&gt; inside &lt;code&gt;/usr/share/qgis/doc/api&lt;/code&gt;. You&amp;#8217;ll find the documentation at &lt;a href="http://localhost:8000"&gt;http://localhost:8000&lt;/a&gt; (if you don&amp;#8217;t provide port number) and it will be available even when you&amp;#8217;re&amp;nbsp;offline.&lt;/p&gt;
&lt;h2&gt;Basic &lt;span class="caps"&gt;API&lt;/span&gt; objects&amp;nbsp;structure&lt;/h2&gt;
&lt;p&gt;Before launching &lt;span class="caps"&gt;QGIS&lt;/span&gt;, take a look at what&amp;#8217;s available inside &lt;span class="caps"&gt;API&lt;/span&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;qgis.core&lt;/strong&gt; package brings all the basic objects like QgsMapLayer, QgsDataSourceURI, QgsFeature&amp;nbsp;etc&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;qgis.gui&lt;/strong&gt; package brings &lt;span class="caps"&gt;GUI&lt;/span&gt; elements that can be used within &lt;span class="caps"&gt;QGIS&lt;/span&gt; like QgsMessageBar or QgsInterface (very important &lt;span class="caps"&gt;API&lt;/span&gt; element, exposed to all custom&amp;nbsp;plugins)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;qgis.analysis&lt;/strong&gt;, &lt;strong&gt;qgis.networkanalysis&lt;/strong&gt;, &lt;strong&gt;qgis.server&lt;/strong&gt;, and &lt;strong&gt;qgis.testing&lt;/strong&gt; packages that won&amp;#8217;t be covered in the&amp;nbsp;series&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;qgis.utils&lt;/strong&gt; module that comes with &lt;code&gt;iface&lt;/code&gt; exposed (very handy within &lt;span class="caps"&gt;QGIS&lt;/span&gt; Python&amp;nbsp;console)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;span class="caps"&gt;QGIS&lt;/span&gt; Python&amp;nbsp;Console&lt;/h2&gt;
&lt;p&gt;Using Python console is the easiest way to automate your &lt;span class="caps"&gt;QGIS&lt;/span&gt; workflow. It can be accessed via pressing &lt;code&gt;Ctrl + Alt + P&lt;/code&gt; or navigating to &lt;code&gt;Plugins -&amp;gt; Python Console&lt;/code&gt;. Note the above mentioned &lt;code&gt;iface&lt;/code&gt; from &lt;strong&gt;qgis.utils&lt;/strong&gt; module is exposed by default within the console, letting you interact with &lt;span class="caps"&gt;QGIS&lt;/span&gt; &lt;span class="caps"&gt;GUI&lt;/span&gt;. Try out the following&amp;nbsp;examples.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;iface&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mapCanvas&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# returns the current map scale&lt;/span&gt;
&lt;span class="n"&gt;iface&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mapCanvas&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zoomScale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# zoom to scale of 1:100&lt;/span&gt;
&lt;span class="n"&gt;iface&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;activeLayer&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# get the active layer name&lt;/span&gt;
&lt;span class="n"&gt;iface&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;activeLayer&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startEditing&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# toggle editting&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That was a very brief introduction to &lt;span class="caps"&gt;QGIS&lt;/span&gt; &lt;span class="caps"&gt;API&lt;/span&gt;, the next part will walk you through the console more&amp;nbsp;thoroughly.&lt;/p&gt;</content><category term="python"></category><category term="QGIS"></category></entry><entry><title>Serving Mapbox Vector Tiles with PostGIS, Nginx and Python Backend</title><link href="https://www.zimmi.cz/posts/2017/serving-mapbox-vector-tiles-with-postgis-nginx-and-python-backend/" rel="alternate"></link><published>2017-10-23T16:00:00+02:00</published><updated>2017-10-23T16:00:00+02:00</updated><author><name>Michal Zimmermann</name></author><id>tag:www.zimmi.cz,2017-10-23:/posts/2017/serving-mapbox-vector-tiles-with-postgis-nginx-and-python-backend/</id><summary type="html">&lt;p&gt;&lt;a href="({filename}../2017/postgis-as-a-mapbox-vector-tiles-generator.md)"&gt;Since version 2.4.0, PostGIS can serve &lt;span class="caps"&gt;MVT&lt;/span&gt;&lt;/a&gt; data directly. &lt;span class="caps"&gt;MVT&lt;/span&gt; returning queries put heavy workload on the database though. On top of that, each of the query has to be run again every time a client demands the data. This leaves us with plenty of room to optimize …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="({filename}../2017/postgis-as-a-mapbox-vector-tiles-generator.md)"&gt;Since version 2.4.0, PostGIS can serve &lt;span class="caps"&gt;MVT&lt;/span&gt;&lt;/a&gt; data directly. &lt;span class="caps"&gt;MVT&lt;/span&gt; returning queries put heavy workload on the database though. On top of that, each of the query has to be run again every time a client demands the data. This leaves us with plenty of room to optimize the&amp;nbsp;process.&lt;/p&gt;
&lt;div class="text-center"&gt;&lt;img data-echo="/posts/assets/serving-mapbox-vector-tiles-with-postgis-nginx-and-python-backend/election.gif"/&gt;&lt;/div&gt;

&lt;p&gt;During the last week, while working on the Czech legislative election data visualization, I&amp;#8217;ve struggled with the server becoming unresponsive far too often due to the issues mentioned&amp;nbsp;above.&lt;/p&gt;
&lt;div class="text-center"&gt;&lt;img data-echo="/posts/assets/serving-mapbox-vector-tiles-with-postgis-nginx-and-python-backend/schema.png"/&gt;&lt;/div&gt;

&lt;p&gt;According to the schema, the first client to come to the&amp;nbsp;server:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;goes through filesystem unstopped, because there are no cached files&amp;nbsp;yet,&lt;/li&gt;
&lt;li&gt;continues to the Flask backend and asks for a file at &lt;code&gt;{z}/{x}/{y}&lt;/code&gt;,&lt;/li&gt;
&lt;li&gt;Flask backend asks the database to return the &lt;span class="caps"&gt;MVT&lt;/span&gt; for the given&amp;nbsp;tile,&lt;/li&gt;
&lt;li&gt;Flask backend writes the response to the filesystem and sends it to the&amp;nbsp;client.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Other clients get tiles directly from the filesystem, leaving the database at&amp;nbsp;ease.&lt;/p&gt;
&lt;h2&gt;Nginx&lt;/h2&gt;
&lt;p&gt;Nginx is fairly simple to set up, once you know what you&amp;#8217;re doing. The &lt;code&gt;/volby-2017/municipality/&lt;/code&gt; location serves static &lt;span class="caps"&gt;MVT&lt;/span&gt; from the given alias directory. If not found, the request is passed to &lt;code&gt;@postgis&lt;/code&gt; location, that asks the Flask backend for the&amp;nbsp;response.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;server election &lt;span class="o"&gt;{&lt;/span&gt;
    location /volby-2017/municipality &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="nb"&gt;alias&lt;/span&gt; /opt/volby-cz-2017/server/cache/&lt;span class="p"&gt;;&lt;/span&gt;
            try_files &lt;span class="nv"&gt;$uri&lt;/span&gt; @postgis&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    location @postgis &lt;span class="o"&gt;{&lt;/span&gt;
            include uwsgi_params&lt;span class="p"&gt;;&lt;/span&gt;
            uwsgi_pass &lt;span class="m"&gt;127&lt;/span&gt;.0.0.1:5000&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Flask&amp;nbsp;backend&lt;/h2&gt;
&lt;script src="https://gist.github.com/zimmicz/46485676e1cf3d6566f0aaa7f93f055b.js"&gt;&lt;/script&gt;

&lt;h2&gt;Generating static &lt;span class="caps"&gt;MVT&lt;/span&gt; in&amp;nbsp;advance&lt;/h2&gt;
&lt;p&gt;If you&amp;#8217;re going to serve static tiles that don&amp;#8217;t change often, it might be a good idea to use PostGIS to create files in advance and serve them with&amp;nbsp;Nginx.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;tiles&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="nb"&gt;integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="nb"&gt;integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="nb"&gt;integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;west&lt;/span&gt; &lt;span class="nb"&gt;numeric&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;south&lt;/span&gt; &lt;span class="nb"&gt;numeric&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;east&lt;/span&gt; &lt;span class="nb"&gt;numeric&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;north&lt;/span&gt; &lt;span class="nb"&gt;numeric&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;geom&lt;/span&gt; &lt;span class="n"&gt;geometry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;POLYGON&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3857&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Using &lt;a href="https://github.com/mapbox/mercantile"&gt;mercantile&lt;/a&gt;, you can create the &lt;code&gt;tiles&lt;/code&gt; table holding the bounding boxes of the tiles you need. PostGIS them inserts the actual &lt;span class="caps"&gt;MVT&lt;/span&gt; into the &lt;code&gt;mvt&lt;/code&gt; table.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;TEMPORARY&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;tmp_tiles&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt;
    &lt;span class="k"&gt;SELECT&lt;/span&gt;
        &lt;span class="n"&gt;muni&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;muni_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;prc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;ST_AsMVTGeom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;muni&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;geom&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;TileBBox&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3857&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="mi"&gt;4096&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="k"&gt;false&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;geom&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;z&lt;/span&gt;
    &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;muni&lt;/span&gt;
    &lt;span class="k"&gt;JOIN&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="k"&gt;SELECT&lt;/span&gt;
            &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;geom&lt;/span&gt;
        &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;tiles&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;bbox&lt;/span&gt; &lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ST_Intersects&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;muni&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;geom&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bbox&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;geom&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;JOIN&lt;/span&gt; &lt;span class="n"&gt;party_results_cur&lt;/span&gt; &lt;span class="n"&gt;prc&lt;/span&gt; &lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;muni&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;muni_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;prc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;muni_id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;mvt&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mvt&lt;/span&gt; &lt;span class="n"&gt;bytea&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="nb"&gt;integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="nb"&gt;integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="nb"&gt;integer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;DO&lt;/span&gt;
&lt;span class="err"&gt;$$&lt;/span&gt;
&lt;span class="k"&gt;DECLARE&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="n"&gt;record&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;BEGIN&lt;/span&gt;
&lt;span class="k"&gt;FOR&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="k"&gt;DISTINCT&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;tmp_tiles&lt;/span&gt; &lt;span class="n"&gt;LOOP&lt;/span&gt;
    &lt;span class="k"&gt;INSERT&lt;/span&gt; &lt;span class="k"&gt;INTO&lt;/span&gt; &lt;span class="n"&gt;mvt&lt;/span&gt;
    &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;ST_AsMVT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;municipality&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4096&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;geom&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;
    &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="k"&gt;SELECT&lt;/span&gt;
            &lt;span class="n"&gt;muni_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="k"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;geom&lt;/span&gt;
        &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;tmp_tiles&lt;/span&gt;
        &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;RAISE&lt;/span&gt; &lt;span class="n"&gt;INFO&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;%&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;END&lt;/span&gt; &lt;span class="n"&gt;LOOP&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;END&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;$$&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Once filled, the table rows can be written to the filesystem with the simple piece of Python&amp;nbsp;code.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;logging&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sqlalchemy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;create_engine&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;

&lt;span class="n"&gt;CACHE_PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;cache/&amp;quot;&lt;/span&gt;

&lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;create_engine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;postgresql:///&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;conn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;sql&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;SELECT mvt, x, y, z FROM mvt&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sql&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fetchall&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;cachefile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;{}/{}/{}/{}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CACHE_PATH&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cachefile&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;{}/{}/{}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CACHE_PATH&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])):&lt;/span&gt;
        &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;makedirs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;{}/{}/{}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CACHE_PATH&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;

    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cachefile&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;wb&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;PostGIS is a brilliant tool for generating Mapbox vector tiles. Combined with Python powered static file generator and Nginx, it seems to become the only tool needed to get you&amp;nbsp;going.&lt;/p&gt;</content><category term="postgis"></category><category term="python"></category></entry><entry><title>PostgreSQL Dollar Quoting inside Bash Heredoc</title><link href="https://www.zimmi.cz/posts/2017/postgresql-dollar-quoting-inside-bash-heredoc/" rel="alternate"></link><published>2017-09-22T20:30:00+02:00</published><updated>2017-09-22T20:30:00+02:00</updated><author><name>Michal Zimmermann</name></author><id>tag:www.zimmi.cz,2017-09-22:/posts/2017/postgresql-dollar-quoting-inside-bash-heredoc/</id><summary type="html">&lt;p&gt;Yesterday I spent two very unpleasant hours debugging the weirdest &lt;span class="caps"&gt;SQL&lt;/span&gt; error I&amp;#8217;ve seen in my life, running the below query (simplified for this&amp;nbsp;post).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;psql&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;qAt&lt;/span&gt; &lt;span class="c1"&gt;--no-psqlrc &amp;lt;&amp;lt;BACKUP&lt;/span&gt;
&lt;span class="k"&gt;DO&lt;/span&gt;
&lt;span class="err"&gt;$$&lt;/span&gt;
&lt;span class="k"&gt;DECLARE&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="n"&gt;record&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;BEGIN&lt;/span&gt;
  &lt;span class="n"&gt;RAISE&lt;/span&gt; &lt;span class="n"&gt;INFO&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;%&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;info&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;END&lt;/span&gt;
&lt;span class="err"&gt;$$&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;BACKUP&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Running this in your terminal will result in a nasty …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Yesterday I spent two very unpleasant hours debugging the weirdest &lt;span class="caps"&gt;SQL&lt;/span&gt; error I&amp;#8217;ve seen in my life, running the below query (simplified for this&amp;nbsp;post).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;psql&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;qAt&lt;/span&gt; &lt;span class="c1"&gt;--no-psqlrc &amp;lt;&amp;lt;BACKUP&lt;/span&gt;
&lt;span class="k"&gt;DO&lt;/span&gt;
&lt;span class="err"&gt;$$&lt;/span&gt;
&lt;span class="k"&gt;DECLARE&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="n"&gt;record&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;BEGIN&lt;/span&gt;
  &lt;span class="n"&gt;RAISE&lt;/span&gt; &lt;span class="n"&gt;INFO&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;%&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;info&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;END&lt;/span&gt;
&lt;span class="err"&gt;$$&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;BACKUP&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Running this in your terminal will result in a nasty syntax&amp;nbsp;error.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ERROR:  syntax error at or near &lt;span class="s2"&gt;&amp;quot;1111&amp;quot;&lt;/span&gt;
LINE &lt;span class="m"&gt;2&lt;/span&gt;: &lt;span class="m"&gt;1111&lt;/span&gt;
        ^
ERROR:  syntax error at or near &lt;span class="s2"&gt;&amp;quot;RAISE&amp;quot;&lt;/span&gt;
LINE &lt;span class="m"&gt;2&lt;/span&gt;:   RAISE INFO &lt;span class="s1"&gt;&amp;#39;%&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;info&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          ^
ERROR:  syntax error at or near &lt;span class="s2"&gt;&amp;quot;1111&amp;quot;&lt;/span&gt;
LINE &lt;span class="m"&gt;2&lt;/span&gt;: &lt;span class="m"&gt;1111&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You stare on the screen for a while, absolutely sure that number &lt;code&gt;1111&lt;/code&gt; is nowhere close to the data you work with. You try again. Another error. You save the code into a file and try again. It works. What the &lt;em&gt;heck&lt;/em&gt;? You try again using the bash heredoc. Another&amp;nbsp;failure.&lt;/p&gt;
&lt;p&gt;The minute you realize &lt;code&gt;$$&lt;/code&gt; is being substituted with the &lt;span class="caps"&gt;ID&lt;/span&gt; of the current process, you feel like the dumbest person on Earth. Yet the happiest one at the same&amp;nbsp;time.&lt;/p&gt;
&lt;p&gt;The solution is&amp;nbsp;trivial.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;psql&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;qAt&lt;/span&gt; &lt;span class="c1"&gt;--no-psqlrc &amp;lt;&amp;lt;BACKUP&lt;/span&gt;
&lt;span class="k"&gt;DO&lt;/span&gt;
&lt;span class="err"&gt;\$\$&lt;/span&gt;
&lt;span class="k"&gt;DECLARE&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="n"&gt;record&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;BEGIN&lt;/span&gt;
  &lt;span class="n"&gt;RAISE&lt;/span&gt; &lt;span class="n"&gt;INFO&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;%&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;info&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;END&lt;/span&gt;
&lt;span class="err"&gt;\$\$&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;BACKUP&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="sql"></category><category term="postgresql"></category><category term="bash"></category></entry><entry><title>PostgreSQL Development History Revealed with PostgreSQL</title><link href="https://www.zimmi.cz/posts/2017/postgresql-development-history-revealed-with-postgresql/" rel="alternate"></link><published>2017-08-09T19:00:00+02:00</published><updated>2017-08-09T19:00:00+02:00</updated><author><name>Michal Zimmermann</name></author><id>tag:www.zimmi.cz,2017-08-09:/posts/2017/postgresql-development-history-revealed-with-postgresql/</id><summary type="html">&lt;p&gt;I spend a lot of time reading &lt;a href="https://www.postgresql.org/docs/manuals/"&gt;PostgreSQL docs&lt;/a&gt;. It occurred to me just a few weeks ago that those versioned manuals are great opportunity to get an insight into PostgreSQL development history. Using PostgreSQL, of&amp;nbsp;course.&lt;/p&gt;
&lt;h2&gt;&lt;span class="caps"&gt;TOP&lt;/span&gt; 5 functions with the most verbose docs in each&amp;nbsp;version&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;
    &lt;span class="k"&gt;version …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;I spend a lot of time reading &lt;a href="https://www.postgresql.org/docs/manuals/"&gt;PostgreSQL docs&lt;/a&gt;. It occurred to me just a few weeks ago that those versioned manuals are great opportunity to get an insight into PostgreSQL development history. Using PostgreSQL, of&amp;nbsp;course.&lt;/p&gt;
&lt;h2&gt;&lt;span class="caps"&gt;TOP&lt;/span&gt; 5 functions with the most verbose docs in each&amp;nbsp;version&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;
    &lt;span class="k"&gt;version&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;string_agg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39; | &amp;#39;&lt;/span&gt; &lt;span class="k"&gt;ORDER&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="n"&gt;letter_count&lt;/span&gt; &lt;span class="k"&gt;DESC&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="k"&gt;SELECT&lt;/span&gt;
        &lt;span class="k"&gt;version&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;letter_count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;row_number&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="n"&gt;OVER&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PARTITION&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="k"&gt;version&lt;/span&gt; &lt;span class="k"&gt;ORDER&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="n"&gt;letter_count&lt;/span&gt; &lt;span class="k"&gt;DESC&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;postgresql_development&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;data&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;row_number&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="k"&gt;GROUP&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="k"&gt;version&lt;/span&gt;
&lt;span class="k"&gt;ORDER&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="k"&gt;version&lt;/span&gt; &lt;span class="k"&gt;DESC&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Seems like a huge comeback for &lt;code&gt;CREATE TABLE&lt;/code&gt;.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;span class="caps"&gt;VERSION&lt;/span&gt;&lt;/th&gt;
&lt;th&gt;1st&lt;/th&gt;
&lt;th&gt;2nd&lt;/th&gt;
&lt;th&gt;3rd&lt;/th&gt;
&lt;th&gt;4th&lt;/th&gt;
&lt;th&gt;5th&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;10.0&lt;/td&gt;
&lt;td&gt;&lt;span class="caps"&gt;CREATE&lt;/span&gt; &lt;span class="caps"&gt;TABLE&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="caps"&gt;ALTER&lt;/span&gt; &lt;span class="caps"&gt;TABLE&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="caps"&gt;REVOKE&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="caps"&gt;GRANT&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="caps"&gt;SELECT&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;9.6&lt;/td&gt;
&lt;td&gt;&lt;span class="caps"&gt;REVOKE&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="caps"&gt;ALTER&lt;/span&gt; &lt;span class="caps"&gt;TABLE&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="caps"&gt;GRANT&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="caps"&gt;CREATE&lt;/span&gt; &lt;span class="caps"&gt;TABLE&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="caps"&gt;SELECT&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;9.5&lt;/td&gt;
&lt;td&gt;&lt;span class="caps"&gt;REVOKE&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="caps"&gt;ALTER&lt;/span&gt; &lt;span class="caps"&gt;TABLE&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="caps"&gt;GRANT&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="caps"&gt;CREATE&lt;/span&gt; &lt;span class="caps"&gt;TABLE&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="caps"&gt;SELECT&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;9.4&lt;/td&gt;
&lt;td&gt;&lt;span class="caps"&gt;REVOKE&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="caps"&gt;GRANT&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="caps"&gt;ALTER&lt;/span&gt; &lt;span class="caps"&gt;TABLE&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="caps"&gt;CREATE&lt;/span&gt; &lt;span class="caps"&gt;TABLE&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="caps"&gt;SELECT&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;9.3&lt;/td&gt;
&lt;td&gt;&lt;span class="caps"&gt;REVOKE&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="caps"&gt;GRANT&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="caps"&gt;CREATE&lt;/span&gt; &lt;span class="caps"&gt;TABLE&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="caps"&gt;ALTER&lt;/span&gt; &lt;span class="caps"&gt;TABLE&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="caps"&gt;ALTER&lt;/span&gt; &lt;span class="caps"&gt;DEFAULT&lt;/span&gt; &lt;span class="caps"&gt;PRIVILEGES&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;9.2&lt;/td&gt;
&lt;td&gt;&lt;span class="caps"&gt;REVOKE&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="caps"&gt;GRANT&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="caps"&gt;CREATE&lt;/span&gt; &lt;span class="caps"&gt;TABLE&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="caps"&gt;ALTER&lt;/span&gt; &lt;span class="caps"&gt;TABLE&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="caps"&gt;ALTER&lt;/span&gt; &lt;span class="caps"&gt;DEFAULT&lt;/span&gt; &lt;span class="caps"&gt;PRIVILEGES&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;9.1&lt;/td&gt;
&lt;td&gt;&lt;span class="caps"&gt;REVOKE&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="caps"&gt;GRANT&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="caps"&gt;CREATE&lt;/span&gt; &lt;span class="caps"&gt;TABLE&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="caps"&gt;ALTER&lt;/span&gt; &lt;span class="caps"&gt;TABLE&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="caps"&gt;ALTER&lt;/span&gt; &lt;span class="caps"&gt;DEFAULT&lt;/span&gt; &lt;span class="caps"&gt;PRIVILEGES&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;9.0&lt;/td&gt;
&lt;td&gt;&lt;span class="caps"&gt;REVOKE&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="caps"&gt;GRANT&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="caps"&gt;CREATE&lt;/span&gt; &lt;span class="caps"&gt;TABLE&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="caps"&gt;ALTER&lt;/span&gt; &lt;span class="caps"&gt;TABLE&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="caps"&gt;ALTER&lt;/span&gt; &lt;span class="caps"&gt;DEFAULT&lt;/span&gt; &lt;span class="caps"&gt;PRIVILEGES&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;8.4&lt;/td&gt;
&lt;td&gt;&lt;span class="caps"&gt;REVOKE&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="caps"&gt;GRANT&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="caps"&gt;CREATE&lt;/span&gt; &lt;span class="caps"&gt;TABLE&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="caps"&gt;ALTER&lt;/span&gt; &lt;span class="caps"&gt;TABLE&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="caps"&gt;SELECT&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;8.3&lt;/td&gt;
&lt;td&gt;&lt;span class="caps"&gt;REVOKE&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="caps"&gt;CREATE&lt;/span&gt; &lt;span class="caps"&gt;TABLE&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="caps"&gt;GRANT&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="caps"&gt;ALTER&lt;/span&gt; &lt;span class="caps"&gt;TABLE&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="caps"&gt;COMMENT&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;8.2&lt;/td&gt;
&lt;td&gt;&lt;span class="caps"&gt;REVOKE&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="caps"&gt;CREATE&lt;/span&gt; &lt;span class="caps"&gt;TABLE&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="caps"&gt;GRANT&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="caps"&gt;ALTER&lt;/span&gt; &lt;span class="caps"&gt;TABLE&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="caps"&gt;SELECT&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;8.1&lt;/td&gt;
&lt;td&gt;&lt;span class="caps"&gt;REVOKE&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="caps"&gt;CREATE&lt;/span&gt; &lt;span class="caps"&gt;TABLE&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="caps"&gt;GRANT&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="caps"&gt;ALTER&lt;/span&gt; &lt;span class="caps"&gt;TABLE&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="caps"&gt;SELECT&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;&lt;span class="caps"&gt;CREATE&lt;/span&gt; &lt;span class="caps"&gt;TABLE&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="caps"&gt;REVOKE&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="caps"&gt;GRANT&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="caps"&gt;SELECT&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="caps"&gt;ALTER&lt;/span&gt; &lt;span class="caps"&gt;TABLE&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7.4&lt;/td&gt;
&lt;td&gt;&lt;span class="caps"&gt;CREATE&lt;/span&gt; &lt;span class="caps"&gt;TABLE&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="caps"&gt;REVOKE&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="caps"&gt;ALTER&lt;/span&gt; &lt;span class="caps"&gt;TABLE&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="caps"&gt;GRANT&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="caps"&gt;SELECT&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7.3&lt;/td&gt;
&lt;td&gt;&lt;span class="caps"&gt;CREATE&lt;/span&gt; &lt;span class="caps"&gt;TABLE&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="caps"&gt;SELECT&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="caps"&gt;ALTER&lt;/span&gt; &lt;span class="caps"&gt;TABLE&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="caps"&gt;REVOKE&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="caps"&gt;GRANT&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7.2&lt;/td&gt;
&lt;td&gt;&lt;span class="caps"&gt;CREATE&lt;/span&gt; &lt;span class="caps"&gt;TABLE&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="caps"&gt;SELECT&lt;/span&gt; &lt;span class="caps"&gt;INTO&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="caps"&gt;SELECT&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="caps"&gt;ALTER&lt;/span&gt; &lt;span class="caps"&gt;TABLE&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="caps"&gt;CREATE&lt;/span&gt; &lt;span class="caps"&gt;TYPE&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7.1&lt;/td&gt;
&lt;td&gt;&lt;span class="caps"&gt;CREATE&lt;/span&gt; &lt;span class="caps"&gt;TABLE&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="caps"&gt;SELECT&lt;/span&gt; &lt;span class="caps"&gt;INTO&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="caps"&gt;SELECT&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="caps"&gt;CREATE&lt;/span&gt; &lt;span class="caps"&gt;TYPE&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="caps"&gt;ALTER&lt;/span&gt; &lt;span class="caps"&gt;TABLE&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7.0&lt;/td&gt;
&lt;td&gt;&lt;span class="caps"&gt;SELECT&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="caps"&gt;SELECT&lt;/span&gt; &lt;span class="caps"&gt;INTO&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="caps"&gt;CREATE&lt;/span&gt; &lt;span class="caps"&gt;TYPE&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="caps"&gt;CREATE&lt;/span&gt; &lt;span class="caps"&gt;TABLE&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="caps"&gt;COMMENT&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;Number of functions available in each&amp;nbsp;version&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;
    &lt;span class="k"&gt;version&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="k"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;letter_count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;postgresql_development&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;data&lt;/span&gt;
&lt;span class="k"&gt;GROUP&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="k"&gt;version&lt;/span&gt; &lt;span class="k"&gt;ORDER&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="k"&gt;version&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="text-center"&gt;&lt;img data-echo="/posts/assets/postgresql-development-history-revealed-with-postgresql/plot1.png"/&gt;&lt;/div&gt;

&lt;h2&gt;The most verbose docs in each&amp;nbsp;version&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="k"&gt;DISTINCT&lt;/span&gt; &lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;version&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;version&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;letter_count&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;postgresql_development&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;data&lt;/span&gt;
&lt;span class="k"&gt;ORDER&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="k"&gt;version&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;letter_count&lt;/span&gt; &lt;span class="k"&gt;DESC&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Poor &lt;code&gt;REVOKE&lt;/code&gt;, the defeated&amp;nbsp;champion.&lt;/p&gt;
&lt;div class="text-center"&gt;
    &lt;table style="margin-left:auto; margin-right: auto"&gt;
    &lt;thead&gt;
    &lt;tr&gt;
    &lt;th&gt;&lt;span class="caps"&gt;&lt;span class="caps"&gt;VERSION&lt;/span&gt;&lt;/span&gt;&lt;/th&gt;
    &lt;th&gt;&lt;span class="caps"&gt;&lt;span class="caps"&gt;FUNCTION&lt;/span&gt;&lt;/span&gt;&lt;/th&gt;
    &lt;th&gt;&lt;span class="caps"&gt;&lt;span class="caps"&gt;LETTER&lt;/span&gt;&lt;/span&gt; &lt;span class="caps"&gt;&lt;span class="caps"&gt;COUNT&lt;/span&gt;&lt;/span&gt;&lt;/th&gt;
    &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
    &lt;tr&gt;
    &lt;td&gt;10&lt;/td&gt;
    &lt;td&gt;&lt;span class="caps"&gt;&lt;span class="caps"&gt;CREATE&lt;/span&gt;&lt;/span&gt; &lt;span class="caps"&gt;&lt;span class="caps"&gt;TABLE&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
    &lt;td&gt;3142&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
    &lt;td&gt;9.6&lt;/td&gt;
    &lt;td&gt;&lt;span class="caps"&gt;&lt;span class="caps"&gt;REVOKE&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
    &lt;td&gt;2856&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
    &lt;td&gt;9.5&lt;/td&gt;
    &lt;td&gt;&lt;span class="caps"&gt;&lt;span class="caps"&gt;REVOKE&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
    &lt;td&gt;2856&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
    &lt;td&gt;9.4&lt;/td&gt;
    &lt;td&gt;&lt;span class="caps"&gt;&lt;span class="caps"&gt;REVOKE&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
    &lt;td&gt;2856&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
    &lt;td&gt;9.3&lt;/td&gt;
    &lt;td&gt;&lt;span class="caps"&gt;&lt;span class="caps"&gt;REVOKE&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
    &lt;td&gt;2856&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
    &lt;td&gt;9.2&lt;/td&gt;
    &lt;td&gt;&lt;span class="caps"&gt;&lt;span class="caps"&gt;REVOKE&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
    &lt;td&gt;2856&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
    &lt;td&gt;9.1&lt;/td&gt;
    &lt;td&gt;&lt;span class="caps"&gt;&lt;span class="caps"&gt;REVOKE&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
    &lt;td&gt;2508&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
    &lt;td&gt;9&lt;/td&gt;
    &lt;td&gt;&lt;span class="caps"&gt;&lt;span class="caps"&gt;REVOKE&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
    &lt;td&gt;2502&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
    &lt;td&gt;8.4&lt;/td&gt;
    &lt;td&gt;&lt;span class="caps"&gt;&lt;span class="caps"&gt;REVOKE&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
    &lt;td&gt;2105&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
    &lt;td&gt;8.3&lt;/td&gt;
    &lt;td&gt;&lt;span class="caps"&gt;&lt;span class="caps"&gt;REVOKE&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
    &lt;td&gt;1485&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
    &lt;td&gt;8.2&lt;/td&gt;
    &lt;td&gt;&lt;span class="caps"&gt;&lt;span class="caps"&gt;REVOKE&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
    &lt;td&gt;1527&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
    &lt;td&gt;8.1&lt;/td&gt;
    &lt;td&gt;&lt;span class="caps"&gt;&lt;span class="caps"&gt;REVOKE&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
    &lt;td&gt;1312&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
    &lt;td&gt;8&lt;/td&gt;
    &lt;td&gt;&lt;span class="caps"&gt;&lt;span class="caps"&gt;CREATE&lt;/span&gt;&lt;/span&gt; &lt;span class="caps"&gt;&lt;span class="caps"&gt;TABLE&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
    &lt;td&gt;1251&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
    &lt;td&gt;7.4&lt;/td&gt;
    &lt;td&gt;&lt;span class="caps"&gt;&lt;span class="caps"&gt;CREATE&lt;/span&gt;&lt;/span&gt; &lt;span class="caps"&gt;&lt;span class="caps"&gt;TABLE&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
    &lt;td&gt;1075&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
    &lt;td&gt;7.3&lt;/td&gt;
    &lt;td&gt;&lt;span class="caps"&gt;&lt;span class="caps"&gt;CREATE&lt;/span&gt;&lt;/span&gt; &lt;span class="caps"&gt;&lt;span class="caps"&gt;TABLE&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
    &lt;td&gt;929&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
    &lt;td&gt;7.2&lt;/td&gt;
    &lt;td&gt;&lt;span class="caps"&gt;&lt;span class="caps"&gt;CREATE&lt;/span&gt;&lt;/span&gt; &lt;span class="caps"&gt;&lt;span class="caps"&gt;TABLE&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
    &lt;td&gt;929&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
    &lt;td&gt;7.1&lt;/td&gt;
    &lt;td&gt;&lt;span class="caps"&gt;&lt;span class="caps"&gt;CREATE&lt;/span&gt;&lt;/span&gt; &lt;span class="caps"&gt;&lt;span class="caps"&gt;TABLE&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
    &lt;td&gt;871&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
    &lt;td&gt;7&lt;/td&gt;
    &lt;td&gt;&lt;span class="caps"&gt;&lt;span class="caps"&gt;SELECT&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
    &lt;td&gt;450&lt;/td&gt;
    &lt;/tr&gt;
    &lt;/tbody&gt;
    &lt;/table&gt;
&lt;/div&gt;

&lt;h2&gt;&lt;span class="caps"&gt;CREATE&lt;/span&gt; &lt;span class="caps"&gt;TABLE&lt;/span&gt; docs&amp;nbsp;evolution&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;
    &lt;span class="k"&gt;version&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;letter_count&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;postgresql_development&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;data&lt;/span&gt;
&lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;CREATE TABLE&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;ORDER&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;version&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Something&amp;#8217;s going on in an upcoming 10.0&amp;nbsp;version.&lt;/p&gt;
&lt;div class="text-center"&gt;&lt;img data-echo="/posts/assets/postgresql-development-history-revealed-with-postgresql/plot2.png"/&gt;&lt;/div&gt;

&lt;p&gt;All the data was obtained with the following Python script and processed inside the PostgreSQL database. Plots done with &lt;a href="http://bokeh.pydata.org/en/latest/"&gt;Bokeh&lt;/a&gt;, though I probably wouldn&amp;#8217;t use it again, the docs site is absurdly sluggish and the info is just all over the&amp;nbsp;place.&lt;/p&gt;
&lt;script src="https://gist.github.com/zimmicz/f69a5ce5d3cf3a220e171553c35e0391.js"&gt;&lt;/script&gt;</content><category term="postgresql"></category><category term="python"></category></entry><entry><title>PostGIS as a Mapbox Vector Tiles generator</title><link href="https://www.zimmi.cz/posts/2017/postgis-as-a-mapbox-vector-tiles-generator/" rel="alternate"></link><published>2017-08-06T18:00:00+02:00</published><updated>2017-08-06T18:00:00+02:00</updated><author><name>Michal Zimmermann</name></author><id>tag:www.zimmi.cz,2017-08-06:/posts/2017/postgis-as-a-mapbox-vector-tiles-generator/</id><summary type="html">&lt;p&gt;&lt;a href="http://postgis.net/2017/08/05/postgis-2.4.0alpha/"&gt;PostGIS 2.4.0&lt;/a&gt; was released recently bringing the possibilities to generate &lt;strong&gt;Mapbox Vector Tiles&lt;/strong&gt; without any third party tools. I got a shot at it with Node.js and docker. Even if it&amp;#8217;s not as straightforward as solely using &lt;a href="https://postgis.net/docs/manual-dev/ST_AsMVT.html"&gt;ST_AsMVT&lt;/a&gt;, it still looks pretty&amp;nbsp;great.&lt;/p&gt;
&lt;h2&gt;Docker&amp;nbsp;container&lt;/h2&gt;
&lt;p&gt;There …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="http://postgis.net/2017/08/05/postgis-2.4.0alpha/"&gt;PostGIS 2.4.0&lt;/a&gt; was released recently bringing the possibilities to generate &lt;strong&gt;Mapbox Vector Tiles&lt;/strong&gt; without any third party tools. I got a shot at it with Node.js and docker. Even if it&amp;#8217;s not as straightforward as solely using &lt;a href="https://postgis.net/docs/manual-dev/ST_AsMVT.html"&gt;ST_AsMVT&lt;/a&gt;, it still looks pretty&amp;nbsp;great.&lt;/p&gt;
&lt;h2&gt;Docker&amp;nbsp;container&lt;/h2&gt;
&lt;p&gt;There are no Ubuntu or Debian based PostGIS 2.4.0 packages as far as I know. As installation from source (especially considering &lt;span class="caps"&gt;GIS&lt;/span&gt; software) is always a bit risky, I prefer using Docker to stay away from trouble. The image is based on Ubuntu 17.04, has PostgreSQL 9.6 and PostGIS 2.4.0 installed. It exposes port 5432 to the host, so you can access the database from the outside the&amp;nbsp;container.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;FROM ubuntu:17.04
RUN apt update
RUN apt install -y wget less systemd
RUN touch /etc/apt/sources.list.d/pgdg.list
RUN &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;deb http://apt.postgresql.org/pub/repos/apt/ zesty-pgdg main&amp;quot;&lt;/span&gt; &amp;gt; /etc/apt/sources.list.d/pgdg.list
RUN wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc &lt;span class="p"&gt;|&lt;/span&gt; apt-key add -
RUN apt update
RUN apt -y install postgresql-9.6 postgresql-server-dev-9.6

USER postgres
RUN /usr/lib/postgresql/9.6/bin/pg_ctl -D /var/lib/postgresql/9.6/main -l /tmp/logfile start

USER root
RUN &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;host all  all    0.0.0.0/0  trust&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; /etc/postgresql/9.6/main/pg_hba.conf &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;listen_addresses=&amp;#39;*&amp;#39;&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; /etc/postgresql/9.6/main/postgresql.conf


EXPOSE &lt;span class="m"&gt;5432&lt;/span&gt;
RUN apt install -y netcat build-essential libxml2 libxml2-dev libgeos-3.5.1 libgdal-dev gdal-bin libgdal20 libgeos-dev libprotobuf-c1 libprotobuf-c-dev libprotobuf-dev protobuf-compiler protobuf-c-compiler
RUN wget http://download.osgeo.org/postgis/source/postgis-2.4.0alpha.tar.gz
RUN tar -xvzf postgis-2.4.0alpha.tar.gz
RUN &lt;span class="nb"&gt;cd&lt;/span&gt; postgis-2.4.0alpha &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; ./configure &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; make &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; make install

USER postgres
RUN service postgresql start &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; psql -c &lt;span class="s2"&gt;&amp;quot;CREATE EXTENSION postgis&amp;quot;&lt;/span&gt;

USER root
COPY start.postgis.sh /start.postgis.sh
RUN chmod &lt;span class="m"&gt;0755&lt;/span&gt; /start.postgis.sh

CMD &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/start.postgis.sh&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;start.postgis.sh&lt;/code&gt; file starts the database server and keeps it running&amp;nbsp;forever.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="nv"&gt;DATADIR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/var/lib/postgresql/9.6/main&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;CONF&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/etc/postgresql/9.6/main/postgresql.conf&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;POSTGRES&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/usr/lib/postgresql/9.6/bin/postgres&amp;quot;&lt;/span&gt;

su postgres sh -c &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$POSTGRES&lt;/span&gt;&lt;span class="s2"&gt; -D &lt;/span&gt;&lt;span class="nv"&gt;$DATADIR&lt;/span&gt;&lt;span class="s2"&gt; -c config_file=&lt;/span&gt;&lt;span class="nv"&gt;$CONF&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;&amp;amp;&lt;/span&gt;
&lt;span class="k"&gt;until&lt;/span&gt; nc -z localhost &lt;span class="m"&gt;5432&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; ...
    sleep &lt;span class="m"&gt;5&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;
sleep &lt;span class="m"&gt;5&lt;/span&gt; &lt;span class="c1"&gt;# just for sure&lt;/span&gt;
su - postgres -c &lt;span class="s2"&gt;&amp;quot;psql -c \&amp;quot;CREATE EXTENSION IF NOT EXISTS postgis\&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; database up and running

&lt;span class="nb"&gt;wait&lt;/span&gt; &lt;span class="nv"&gt;$!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Data&lt;/h2&gt;
&lt;p&gt;I got a cadastre area dataset of the Czech Republic for testing, which contains ~ 13,000 polygons. The geometries should come in Web Mercator a.k.a. &lt;span class="caps"&gt;EPSG&lt;/span&gt;:3857 to work with &lt;a href="https://www.mapbox.com/vector-tiles/specification/"&gt;&lt;span class="caps"&gt;MVT&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Vector&amp;nbsp;tiles&lt;/h2&gt;
&lt;p&gt;I got a bit confused by the docs of &lt;a href="https://postgis.net/docs/manual-dev/ST_AsMVT.html"&gt;ST_AsMVT&lt;/a&gt; and &lt;a href="https://postgis.net/docs/manual-dev/ST_AsMVTGeom.html"&gt;ST_AsMVTGeom&lt;/a&gt;. Especially the latter one took me a few hours to get it right. What is essential (I guess) about Mapbox Vector Tiles is that you have to abstract from the real world coordinates and start thinking inside the tile coordinates. What PostGIS does with &lt;code&gt;ST_AsMVTGeom&lt;/code&gt; (and what any other &lt;span class="caps"&gt;MVT&lt;/span&gt; implemenation should do for you) is that it takes real world coordinates and put them inside a&amp;nbsp;tile.&lt;/p&gt;
&lt;div class="text-center"&gt;&lt;img data-echo="/posts/assets/postgis-as-a-mapbox-vector-tiles-generator/mvt.gif"/&gt;&lt;/div&gt;

&lt;p&gt;To make this work, you need to know every bounding box of every tile on every zoom level in a Web Mercator projection. Or you can use &lt;a href="https://github.com/mapbox/postgis-vt-util/blob/master/src/TileBBox.sql"&gt;TileBBox procedure by Mapbox&lt;/a&gt;, if you&amp;nbsp;wish.&lt;/p&gt;
&lt;p&gt;The &lt;span class="caps"&gt;SQL&lt;/span&gt; query itself is pretty simple (this comes from an express route I&amp;#8217;ll be discussing&amp;nbsp;shortly).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;ST_AsMVT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;cadastre&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4096&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;geom&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="k"&gt;SELECT&lt;/span&gt;
        &lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;ST_AsMVTGeom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;geom&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;TileBBox&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;${&lt;/span&gt;&lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;${&lt;/span&gt;&lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;${&lt;/span&gt;&lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3857&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="mi"&gt;4096&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="k"&gt;false&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;geom&lt;/span&gt;
    &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;cadastre_area&lt;/span&gt;
    &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;ST_Intersects&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;geom&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;ST_Transform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ST_MakeEnvelope&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;3857&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;When filled with proper arguments instead of placeholders, it returns a&amp;nbsp;bytea.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="se"&gt;\x&lt;/span&gt;1aa5dbd0070a047465737412e216120400000101180322d7160987913f8db38e01aa59160e2a010412012a0624060e001410420a1a00203b0a3914190e15085912010a0f0c0f06370804080a0e0e0234090e0
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This can be consumed by a Leaflet map using &lt;a href="https://github.com/Leaflet/Leaflet.VectorGrid"&gt;Leaflet.VectorGrid plugin&lt;/a&gt;. To keep it short, the frontend code actually boils down to three lines of&amp;nbsp;code.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://localhost:3000/mvt/{x}/{y}/{z}&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;cadastre&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;L&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;vectorGrid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;protobuf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addLayer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cadastre&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;a href="https://gist.github.com/zimmicz/9e78d9888ab73abc7e87553b77999bc8"&gt;server &lt;span class="caps"&gt;MVP&lt;/span&gt; is available&lt;/a&gt; as a GitHub&amp;nbsp;gist.&lt;/p&gt;</content><category term="docker"></category><category term="postgis"></category><category term="javascript"></category></entry><entry><title>Fighting Raster GeoPackage with GDAL</title><link href="https://www.zimmi.cz/posts/2017/fighting-raster-geopackage-with-gdal/" rel="alternate"></link><published>2017-07-19T13:30:00+02:00</published><updated>2017-07-19T13:30:00+02:00</updated><author><name>Michal Zimmermann</name></author><id>tag:www.zimmi.cz,2017-07-19:/posts/2017/fighting-raster-geopackage-with-gdal/</id><summary type="html">&lt;p&gt;As I&amp;#8217;m still running Ubuntu 16.04 based Linux Mint, I have no access to &lt;span class="caps"&gt;GDAL&lt;/span&gt; 2.x repositories (except for ubuntugis, that I really don&amp;#8217;t like to use). Provided with a GeoPackage raster file recently, I had to find a way to load it into &lt;span class="caps"&gt;QGIS&lt;/span&gt;, somehow …&lt;/p&gt;</summary><content type="html">&lt;p&gt;As I&amp;#8217;m still running Ubuntu 16.04 based Linux Mint, I have no access to &lt;span class="caps"&gt;GDAL&lt;/span&gt; 2.x repositories (except for ubuntugis, that I really don&amp;#8217;t like to use). Provided with a GeoPackage raster file recently, I had to find a way to load it into &lt;span class="caps"&gt;QGIS&lt;/span&gt;, somehow. The solution is simple: Docker with&amp;nbsp;gdal_translate.&lt;/p&gt;
&lt;h2&gt;Preparing the Docker&amp;nbsp;container&lt;/h2&gt;
&lt;p&gt;I like using Docker for experiments that might leave the &lt;span class="caps"&gt;OS&lt;/span&gt; in an &lt;em&gt;unexpected&lt;/em&gt; state (which is exactly what happens to me with ubuntugis repository whenever I use it. That&amp;#8217;s why I don&amp;#8217;t anymore.). A very simple Dockerfile keeps the troubles away from&amp;nbsp;you.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;FROM ubuntu:17.04
RUN apt update
RUN apt install -y gdal-bin
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;cd&lt;/code&gt; into the folder and build the image with &lt;code&gt;docker build -t gdal .&lt;/code&gt;. Once ready, summon the daemon, run the container, mount the GeoPackage file to the container directory and you&amp;#8217;re ready to&amp;nbsp;rock.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docker run -v /path/to/geopackage:/home/ -it gdal
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Raster GeoPackage to GeoTiff&amp;nbsp;translation&lt;/h2&gt;
&lt;p&gt;With the container running, the raster GeoPackage to GeoTiff translation can be done easily with &lt;code&gt;gdal_translate&lt;/code&gt;. Note I chose to cut the source file into tiles, because the gdal_translate was choking about the resulting&amp;nbsp;size.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="nv"&gt;SIZE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;10000&lt;/span&gt;
&lt;span class="nv"&gt;ULX&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;-630000
&lt;span class="nv"&gt;ULY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;-1135450
&lt;span class="nv"&gt;LRX&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;-560000
&lt;span class="nv"&gt;LRY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;-1172479
&lt;span class="nv"&gt;COUNTER_X&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="nv"&gt;COUNTER_Y&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="nv"&gt;$ULX&lt;/span&gt; -lt &lt;span class="nv"&gt;$LRX&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;
&lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="nv"&gt;$ULY&lt;/span&gt; -gt &lt;span class="nv"&gt;$LRY&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;
    &lt;span class="k"&gt;do&lt;/span&gt;
        &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$ULX&lt;/span&gt;, &lt;span class="k"&gt;$((&lt;/span&gt;&lt;span class="nv"&gt;$ULX&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nv"&gt;$SIZE&lt;/span&gt;&lt;span class="k"&gt;))&lt;/span&gt;, &lt;span class="nv"&gt;$ULY&lt;/span&gt;, &lt;span class="k"&gt;$((&lt;/span&gt;&lt;span class="nv"&gt;$ULY&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;$SIZE&lt;/span&gt;&lt;span class="k"&gt;))&lt;/span&gt;

        gdal_translate &lt;span class="se"&gt;\&lt;/span&gt;
            -co &lt;span class="nv"&gt;TILED&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;YES &lt;span class="se"&gt;\&lt;/span&gt;
            -co &lt;span class="nv"&gt;COMPRESS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;DEFLATE &lt;span class="se"&gt;\&lt;/span&gt;
            -co &lt;span class="nv"&gt;TFW&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;YES &lt;span class="se"&gt;\&lt;/span&gt;
            -co &lt;span class="nv"&gt;NUM_THREADS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;ALL_CPUS &lt;span class="se"&gt;\&lt;/span&gt;
            -a_nodata &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
            -of GTiff &lt;span class="se"&gt;\&lt;/span&gt;
            -projwin &lt;span class="nv"&gt;$ULX&lt;/span&gt;, &lt;span class="nv"&gt;$ULY&lt;/span&gt;, &lt;span class="k"&gt;$((&lt;/span&gt;&lt;span class="nv"&gt;$ULX&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nv"&gt;$SIZE&lt;/span&gt;&lt;span class="k"&gt;))&lt;/span&gt;, &lt;span class="k"&gt;$((&lt;/span&gt;&lt;span class="nv"&gt;$ULY&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;$SIZE&lt;/span&gt;&lt;span class="k"&gt;))&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
            -projwin_srs EPSG:5514 &lt;span class="se"&gt;\&lt;/span&gt;
            data/detected.gpkg data/detected_&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;COUNTER_X&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;_&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;COUNTER_Y&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;.tiff

        &lt;span class="nv"&gt;ULY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$((&lt;/span&gt;&lt;span class="nv"&gt;$ULY&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;$SIZE&lt;/span&gt;&lt;span class="k"&gt;))&lt;/span&gt;
        &lt;span class="nv"&gt;COUNTER_Y&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$((&lt;/span&gt;COUNTER_Y+1&lt;span class="k"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;done&lt;/span&gt;
    &lt;span class="nv"&gt;ULX&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$((&lt;/span&gt;&lt;span class="nv"&gt;$ULX&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nv"&gt;$SIZE&lt;/span&gt;&lt;span class="k"&gt;))&lt;/span&gt;
    &lt;span class="nv"&gt;ULY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;-1135450
    &lt;span class="nv"&gt;COUNTER_X&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$((&lt;/span&gt;COUNTER_X+1&lt;span class="k"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Final Touch: Raster to&amp;nbsp;Vector&lt;/h2&gt;
&lt;p&gt;After the GeoTiff is written to hard drive, &lt;a href="https://www.zimmi.cz/posts/2015/how-to-use-queue-with-rsync/"&gt;inotifywait&lt;/a&gt; can be used to generate overviews. And with ease of calling &lt;code&gt;gdal_polygonize.py&lt;/code&gt; on each of GeoTiffs&amp;hellip;vector layer, at you&amp;nbsp;service.&lt;/p&gt;</content><category term="bash"></category><category term="gdal"></category></entry><entry><title>Mapping North America with QGIS: Tips and Tricks</title><link href="https://www.zimmi.cz/posts/2017/mapping-north-america-with-qgis-tips-and-tricks" rel="alternate"></link><published>2017-05-21T15:30:00+02:00</published><updated>2017-05-21T15:30:00+02:00</updated><author><name>Michal Zimmermann</name></author><id>tag:www.zimmi.cz,2017-05-21:/posts/2017/mapping-north-america-with-qgis-tips-and-tricks</id><summary type="html">&lt;p&gt;Recently I&amp;#8217;ve bought a book called &lt;em&gt;Maps&lt;/em&gt; by Aleksandra Mizielinska and Daniel Mizielinski to my nephew. The book&amp;#8217;s absolutely wonderful and made me want to try crafting a map with similar looks. I don&amp;#8217;t do maps much at &lt;a href="https://clevermaps.cz"&gt;CleverMaps&lt;/a&gt;, so this was a great opportunity to find …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Recently I&amp;#8217;ve bought a book called &lt;em&gt;Maps&lt;/em&gt; by Aleksandra Mizielinska and Daniel Mizielinski to my nephew. The book&amp;#8217;s absolutely wonderful and made me want to try crafting a map with similar looks. I don&amp;#8217;t do maps much at &lt;a href="https://clevermaps.cz"&gt;CleverMaps&lt;/a&gt;, so this was a great opportunity to find out what new features became available during the last months of &lt;span class="caps"&gt;QGIS&lt;/span&gt;&amp;nbsp;development.&lt;/p&gt;
&lt;h2&gt;Result&lt;/h2&gt;
&lt;p&gt;A map of North America in scale of 1:22,000,000 featuring the biggest lakes, rivers, mountain ranges and basic administrative units for the North American countries. I aimed for visually appealing overview map rather than perfectly correct topographic&amp;nbsp;one.&lt;/p&gt;
&lt;div class="text-center"&gt;&lt;a href="/posts/assets/mapping-north-america-with-qgis-tips-and-tricks/map.png" title="Click for the full size (3 MB)"&gt;&lt;img data-echo="/posts/assets/mapping-north-america-with-qgis-tips-and-tricks/map.min.png"/&gt;&lt;/a&gt;&lt;/div&gt;

&lt;h2&gt;Data&lt;/h2&gt;
&lt;p&gt;I used my beloved &lt;a href="http://www.naturalearthdata.com"&gt;Natural Earth dataset&lt;/a&gt; for both cultural (boundaries, cities) and physical (rivers, lakes) map features. Different scales came to play for different map layers as they seemed a bit too/few simplified for the given&amp;nbsp;scale.&lt;/p&gt;
&lt;h2&gt;Fonts&lt;/h2&gt;
&lt;p&gt;I usually use built-in system fonts (Ubuntu Condensed or such), but this kind of map needed a more handwritten looking, sort of childish font. After searching &lt;a href="dafont.com"&gt;dafont.com&lt;/a&gt; I chose &lt;a href="http://www.dafont.com/es/precursive.font"&gt;PreCursive by RaseOne Full Time Artists&lt;/a&gt; and &lt;a href="http://www.dafont.com/es/kg-primary-penmanship.font"&gt;&lt;span class="caps"&gt;KG&lt;/span&gt; Primary Penmanship by Kimberly Geswein&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Symbols&lt;/h2&gt;
&lt;p&gt;The mountain point symbol was one of the two custom symbols used on the map. It comes from &lt;a href="http://all-free-download.com/free-vector/download/mountains_311829.html"&gt;BSGStudio&lt;/a&gt;. The ocean wave symbol was made by&amp;nbsp;myself.&lt;/p&gt;
&lt;h2&gt;&lt;span class="caps"&gt;QGIS&lt;/span&gt;&amp;nbsp;effects&lt;/h2&gt;
&lt;p&gt;I&amp;#8217;ve used several techniques I find interesting enough to be listed&amp;nbsp;here.&lt;/p&gt;
&lt;h3&gt;Coastlines&lt;/h3&gt;
&lt;p&gt;For a long time I&amp;#8217;ve considered coastlines a field for cartographic invention. They can be emphasized by shading or 3D effects. I chose the set of four parallel coastlines subtly disappearing into the sea, hopefully invoking the feeling of waves coming to the&amp;nbsp;shore.&lt;/p&gt;
&lt;div class="text-center"&gt;&lt;img data-echo="/posts/assets/mapping-north-america-with-qgis-tips-and-tricks/coastlines.png"/&gt;&lt;/div&gt;

&lt;p&gt;It&amp;#8217;s done by dissolving all the features and buffering them again and&amp;nbsp;again.&lt;/p&gt;
&lt;h3&gt;Buffered&amp;nbsp;labels&lt;/h3&gt;
&lt;p&gt;Buffered labels are usually hard to get right, because they fill so much space if the buffer color&amp;#8217;s not corresponding to its surroundings. But choosing the proper color can be a real struggle at&amp;nbsp;times.&lt;/p&gt;
&lt;div class="text-center"&gt;&lt;img data-echo="/posts/assets/mapping-north-america-with-qgis-tips-and-tricks/qgis_expressions.png"/&gt;&lt;/div&gt;

&lt;p&gt;On this map, almost all the labels are buffered with the color of its surroundings, which makes them more legible, yet not too expressive. This is possible thanks to &lt;span class="caps"&gt;QGIS&lt;/span&gt; expression based properties that let you define unique styling to different map&amp;nbsp;features.&lt;/p&gt;
&lt;div class="text-center"&gt;&lt;img data-echo="/posts/assets/mapping-north-america-with-qgis-tips-and-tricks/buffered_labels.png"/&gt;&lt;/div&gt;

&lt;p&gt;Where it isn&amp;#8217;t possible (e.g. Bahamas or Honduras) to choose just one buffer color, the label is not buffered at all (or the semi-transparent white buffer is&amp;nbsp;used).&lt;/p&gt;
&lt;p&gt;Note the &lt;em&gt;Rocky Mountains&lt;/em&gt; label is split on the borders of the &lt;span class="caps"&gt;U.S.A.&lt;/span&gt; and Canada and its both parts match the background&amp;nbsp;color.&lt;/p&gt;
&lt;h3&gt;Tapered&amp;nbsp;rivers&lt;/h3&gt;
&lt;p&gt;Rivers are tapered based on the Natural Earth&amp;#8217;s width attribute value for each river&amp;nbsp;segment.&lt;/p&gt;
&lt;h3&gt;Labels in separate&amp;nbsp;layers&lt;/h3&gt;
&lt;p&gt;I&amp;#8217;m used to put labels into separate layers in more complicated map compositions, especially when you need to draw label along path for areal features (such as countries or&amp;nbsp;states).&lt;/p&gt;
&lt;div class="text-center"&gt;&lt;img data-echo="/posts/assets/mapping-north-america-with-qgis-tips-and-tricks/labels.png"/&gt;&lt;/div&gt;

&lt;p&gt;It becomes a bit harder to keep the features in sync with the labels though. I&amp;#8217;d like to use only one layer for all the map layers in the future, as I feel that&amp;#8217;s the way to go for the best&amp;nbsp;labeling.&lt;/p&gt;
&lt;h3&gt;Labels wrapped on&amp;nbsp;character&lt;/h3&gt;
&lt;p&gt;Some labels just can&amp;#8217;t fit the feature they belong to and &lt;span class="caps"&gt;QGIS&lt;/span&gt; lets you deal with this by wrapping labels on a special character, &lt;code&gt;\&lt;/code&gt; in my&amp;nbsp;case.&lt;/p&gt;
&lt;div class="text-center"&gt;&lt;img data-echo="/posts/assets/mapping-north-america-with-qgis-tips-and-tricks/wrapped_labels.png"/&gt;&lt;/div&gt;

&lt;h3&gt;Layer blending&amp;nbsp;mode&lt;/h3&gt;
&lt;p&gt;The mechanics behind layer blending modes are still a mystery to me, but they can add that little extra to a map very easily. Thanks to the Overlay blending mode, &lt;em&gt;the Rocky Mountains&lt;/em&gt; may remain very subtle on different kinds of&amp;nbsp;background.&lt;/p&gt;
&lt;div class="text-center"&gt;&lt;img data-echo="/posts/assets/mapping-north-america-with-qgis-tips-and-tricks/blending_mode.png"/&gt;&lt;/div&gt;</content><category term="qgis"></category><category term="visualization"></category></entry><entry><title>Wifileaks Wi-Fi Networks Dataviz</title><link href="https://www.zimmi.cz/posts/2017/wifileaks-wi-fi-networks-dataviz/" rel="alternate"></link><published>2017-05-02T18:30:00+02:00</published><updated>2017-05-02T18:30:00+02:00</updated><author><name>Michal Zimmermann</name></author><id>tag:www.zimmi.cz,2017-05-02:/posts/2017/wifileaks-wi-fi-networks-dataviz/</id><summary type="html">&lt;p&gt;&lt;a href="http://www.wifileaks.cz"&gt;Wifileaks&lt;/a&gt; is a project by Jakub Čížek aimed to map the Czech wi-fi networks with Android/iOS app. The data gathered by people using the app &lt;a href="http://download.wifileaks.cz/data/wifileaks_raw_170416.tar.gz"&gt;is available to download&lt;/a&gt; and features ~&amp;nbsp;90,000,000 records, each representing the position of the cellphone when connecting to the network. Just about …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="http://www.wifileaks.cz"&gt;Wifileaks&lt;/a&gt; is a project by Jakub Čížek aimed to map the Czech wi-fi networks with Android/iOS app. The data gathered by people using the app &lt;a href="http://download.wifileaks.cz/data/wifileaks_raw_170416.tar.gz"&gt;is available to download&lt;/a&gt; and features ~&amp;nbsp;90,000,000 records, each representing the position of the cellphone when connecting to the network. Just about perfect to craft some&amp;nbsp;maps!&lt;/p&gt;
&lt;div class="text-center"&gt;&lt;img data-echo="/posts/assets/wifileaks-wifi-networks-dataviz/cr.png"/&gt;&lt;/div&gt;

&lt;h2&gt;Using PostgreSQL&amp;nbsp;cstore_fdw&lt;/h2&gt;
&lt;p&gt;I ran out of disk space immediately after loading the dataset into the PostgreSQL database. After fiddling around I remembered that columnar store should be a bit space-friendlier than the old fashioned relational database. Thus, I installed the &lt;a href="https://github.com/citusdata/cstore_fdw"&gt;cstore_fdw&lt;/a&gt; by Citus Data in just few&amp;nbsp;steps.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt install libprotobuf-c-dev libprotobuf-c1 protobuf-c-compiler postgresql-server-dev-9.6
git clone git@github.com:citusdata/cstore_fdw.git
&lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/usr/bin/:&lt;span class="nv"&gt;$PATH&lt;/span&gt; make
&lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/usr/bin/:&lt;span class="nv"&gt;$PATH&lt;/span&gt; make install

&lt;span class="c1"&gt;# when the cstore_fdw installation finishes, add the following line to your postgresql.conf and restart the database cluster&lt;/span&gt;
&lt;span class="nv"&gt;shared_preload_libraries&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;cstore_fdw&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This makes &lt;a href="https://www.zimmi.cz/posts/2016/testing-postgresql-ogr-fdw/"&gt;another &lt;span class="caps"&gt;FDW&lt;/span&gt; available&lt;/a&gt; to you inside the PostgreSQL. The actual foreign server has to be created before loading the data into a foreign&amp;nbsp;table.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cat &lt;span class="s"&gt;&amp;lt;&amp;lt;END | psql -qAt --no-psqlrc&lt;/span&gt;
&lt;span class="s"&gt;    CREATE SERVER cstore_server FOREIGN DATA WRAPPER cstore_fdw;&lt;/span&gt;
&lt;span class="s"&gt;    CREATE SCHEMA data_cstore;&lt;/span&gt;
&lt;span class="s"&gt;    CREATE FOREIGN TABLE data_cstore.wifi (&lt;/span&gt;
&lt;span class="s"&gt;        id integer,&lt;/span&gt;
&lt;span class="s"&gt;        mac text,&lt;/span&gt;
&lt;span class="s"&gt;        ssid text,&lt;/span&gt;
&lt;span class="s"&gt;        signal_strength numeric,&lt;/span&gt;
&lt;span class="s"&gt;        security integer,&lt;/span&gt;
&lt;span class="s"&gt;        lat numeric,&lt;/span&gt;
&lt;span class="s"&gt;        lon numeric,&lt;/span&gt;
&lt;span class="s"&gt;        alt numeric,&lt;/span&gt;
&lt;span class="s"&gt;        unixtime bigint,&lt;/span&gt;
&lt;span class="s"&gt;        filename text&lt;/span&gt;
&lt;span class="s"&gt;    )&lt;/span&gt;
&lt;span class="s"&gt;    SERVER cstore_server&lt;/span&gt;
&lt;span class="s"&gt;    OPTIONS (compression &amp;#39;pglz&amp;#39;);&lt;/span&gt;
&lt;span class="s"&gt;END&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The foreign table &lt;strong&gt;is 3&amp;times; smaller&lt;/strong&gt; than it&amp;#8217;s standard counterpart. However, this comes with some&amp;nbsp;costs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;neither &lt;code&gt;UPDATE&lt;/code&gt; nor &lt;code&gt;DELETE&lt;/code&gt; can be&amp;nbsp;used&lt;/li&gt;
&lt;li&gt;no &lt;code&gt;CREATE INDEX&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;no &lt;code&gt;SERIAL&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To overcome these shortcomings I used &lt;code&gt;COPY&lt;/code&gt; statement to spit out the slightly modified table and immediately loaded it back&amp;nbsp;in.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cat &lt;span class="s"&gt;&amp;lt;&amp;lt;END | psql -qAt --no-psqlrc&lt;/span&gt;
&lt;span class="s"&gt;COPY (&lt;/span&gt;
&lt;span class="s"&gt;    SELECT&lt;/span&gt;
&lt;span class="s"&gt;        row_number() OVER (),&lt;/span&gt;
&lt;span class="s"&gt;        mac,&lt;/span&gt;
&lt;span class="s"&gt;        ssid,&lt;/span&gt;
&lt;span class="s"&gt;        signal_strength,&lt;/span&gt;
&lt;span class="s"&gt;        security,&lt;/span&gt;
&lt;span class="s"&gt;        split_part(filename, &amp;#39;_&amp;#39;, 2)::integer,&lt;/span&gt;
&lt;span class="s"&gt;        to_timestamp(unixtime),&lt;/span&gt;
&lt;span class="s"&gt;        ST_Transform(ST_SetSRID(ST_MakePoint(lon, lat, alt), 4326), 32633)&lt;/span&gt;
&lt;span class="s"&gt;    FROM data_cstore.wifi&lt;/span&gt;
&lt;span class="s"&gt;    WHERE lon BETWEEN 0 AND 20&lt;/span&gt;
&lt;span class="s"&gt;        AND lat BETWEEN 18 AND 84&lt;/span&gt;
&lt;span class="s"&gt;) TO &amp;#39;/tmp/wifileaks.db&amp;#39; WITH CSV DELIMITER &amp;#39;;&amp;#39;&lt;/span&gt;
&lt;span class="s"&gt;    DROP SCHEMA IF EXISTS data_cstore CASCADE;&lt;/span&gt;

&lt;span class="s"&gt;DROP SCHEMA data_cstore;&lt;/span&gt;
&lt;span class="s"&gt;CREATE SCHEMA data_cstore;&lt;/span&gt;
&lt;span class="s"&gt;CREATE FOREIGN TABLE data_cstore.wifi (&lt;/span&gt;
&lt;span class="s"&gt;    id integer,&lt;/span&gt;
&lt;span class="s"&gt;    mac text,&lt;/span&gt;
&lt;span class="s"&gt;    ssid text,&lt;/span&gt;
&lt;span class="s"&gt;    signal_strength numeric,&lt;/span&gt;
&lt;span class="s"&gt;    security integer,&lt;/span&gt;
&lt;span class="s"&gt;    userid integer,&lt;/span&gt;
&lt;span class="s"&gt;    unixtime timestamp without time zone,&lt;/span&gt;
&lt;span class="s"&gt;    geom geometry(POINTZ, 32633)&lt;/span&gt;
&lt;span class="s"&gt;)&lt;/span&gt;
&lt;span class="s"&gt;SERVER cstore_server&lt;/span&gt;
&lt;span class="s"&gt;OPTIONS (compression &amp;#39;pglz&amp;#39;);&lt;/span&gt;
&lt;span class="s"&gt;END&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Putting the networks on the&amp;nbsp;map&lt;/h2&gt;
&lt;table&gt;
    &lt;tr&gt;
        &lt;td&gt;&lt;a href="/posts/assets/wifileaks-wifi-networks-dataviz/brno.png"&gt;&lt;img data-echo="/posts/assets/wifileaks-wifi-networks-dataviz/brno.png"&gt;&lt;/a&gt;&lt;/td&gt;
        &lt;td&gt;&lt;a href="/posts/assets/wifileaks-wifi-networks-dataviz/praha.png"&gt;&lt;img data-echo="/posts/assets/wifileaks-wifi-networks-dataviz/praha.png"&gt;&lt;/a&gt;&lt;/td&gt;
        &lt;td&gt;&lt;a href="/posts/assets/wifileaks-wifi-networks-dataviz/olomouc.png"&gt;&lt;img data-echo="/posts/assets/wifileaks-wifi-networks-dataviz/olomouc.png"&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;&lt;a href="/posts/assets/wifileaks-wifi-networks-dataviz/plzen.png"&gt;&lt;img data-echo="/posts/assets/wifileaks-wifi-networks-dataviz/plzen.png"&gt;&lt;/a&gt;&lt;/td&gt;
        &lt;td&gt;&lt;a href="/posts/assets/wifileaks-wifi-networks-dataviz/ostrava.png"&gt;&lt;img data-echo="/posts/assets/wifileaks-wifi-networks-dataviz/ostrava.png"&gt;&lt;/a&gt;&lt;/td&gt;
        &lt;td&gt;&lt;a href="/posts/assets/wifileaks-wifi-networks-dataviz/hradec_kralove.png"&gt;&lt;img data-echo="/posts/assets/wifileaks-wifi-networks-dataviz/hradec_kralove.png"&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;As mentioned, each row of data represents the cellphone&amp;#8217;s location when connecting to a wi-fi network. To get real wi-fi transmitter position, I calculated the average of location of each cellphone ever connected (although the signal strength should be taken into account here as&amp;nbsp;well).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="n"&gt;UNLOGGED&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;data_cstore&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wifi_avg_loc&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt;
&lt;span class="k"&gt;SELECT&lt;/span&gt;
    &lt;span class="n"&gt;row_number&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="n"&gt;OVER&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;mac&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;ST_SetSRID&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ST_MakePoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;32633&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;geom&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="k"&gt;SELECT&lt;/span&gt;
        &lt;span class="n"&gt;mac&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="k"&gt;AVG&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ST_X&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;geom&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="k"&gt;AVG&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ST_Y&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;geom&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;
    &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;data_cstore&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wifi_loc&lt;/span&gt;
    &lt;span class="k"&gt;GROUP&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="qgis"></category><category term="visualization"></category></entry><entry><title>Routing with GRASS GIS: Catchment Area Calculation</title><link href="https://www.zimmi.cz/posts/2017/routing-with-grass-gis-catchment-area-calculation/" rel="alternate"></link><published>2017-04-20T17:30:00+02:00</published><updated>2017-04-20T17:30:00+02:00</updated><author><name>Michal Zimmermann</name></author><id>tag:www.zimmi.cz,2017-04-20:/posts/2017/routing-with-grass-gis-catchment-area-calculation/</id><summary type="html">&lt;p&gt;I got my hands on &lt;a href="https://www.zimmi.cz/posts/2017/routing-with-pgrouting-catchment-area-calculation/"&gt;pgRouting&lt;/a&gt; in the last post and I&amp;#8217;m about to do the same with &lt;span class="caps"&gt;GRASS&lt;/span&gt; &lt;span class="caps"&gt;GIS&lt;/span&gt; in this&amp;nbsp;one.&lt;/p&gt;
&lt;p&gt;&lt;span class="caps"&gt;GRASS&lt;/span&gt; &lt;span class="caps"&gt;GIS&lt;/span&gt; stores the topology for the native vector format by default, which makes it easy to use for the network analysis. All the commands associated …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I got my hands on &lt;a href="https://www.zimmi.cz/posts/2017/routing-with-pgrouting-catchment-area-calculation/"&gt;pgRouting&lt;/a&gt; in the last post and I&amp;#8217;m about to do the same with &lt;span class="caps"&gt;GRASS&lt;/span&gt; &lt;span class="caps"&gt;GIS&lt;/span&gt; in this&amp;nbsp;one.&lt;/p&gt;
&lt;p&gt;&lt;span class="caps"&gt;GRASS&lt;/span&gt; &lt;span class="caps"&gt;GIS&lt;/span&gt; stores the topology for the native vector format by default, which makes it easy to use for the network analysis. All the commands associated with the network analysis can be found in the &lt;code&gt;v.net&lt;/code&gt; family. The ones I&amp;#8217;m going to discuss in this post are &lt;code&gt;v.net&lt;/code&gt; itself, &lt;code&gt;v.net.path&lt;/code&gt;, &lt;code&gt;.v.net.alloc&lt;/code&gt; and &lt;code&gt;v.net.iso&lt;/code&gt;,&amp;nbsp;respectively.&lt;/p&gt;
&lt;h2&gt;Data&lt;/h2&gt;
&lt;p&gt;I&amp;#8217;m going to use the roads data &lt;a href="https://www.zimmi.cz/posts/2017/routing-with-pgrouting-catchment-area-calculation/"&gt;from the previous post&lt;/a&gt; together with some random points used as catchment areas&amp;nbsp;centers.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# create the new GRASS GIS location&lt;/span&gt;
grass -text -c ./osm/czech

&lt;span class="c1"&gt;# import the roads&lt;/span&gt;
v.in.ogr &lt;span class="nv"&gt;input&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;PG:host=localhost dbname=pgrouting&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;layer&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;cze.roads &lt;span class="nv"&gt;output&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;roads -eo  --overwrite

&lt;span class="c1"&gt;# import the random points&lt;/span&gt;
v.in.ogr &lt;span class="nv"&gt;input&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;PG:host=localhost dbname=pgrouting&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;layer&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;temp.points &lt;span class="nv"&gt;output&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;points -eo --overwrite
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I got six different points and the pretty dense road network. Note none of the points is connected to the existing&amp;nbsp;network.&lt;/p&gt;
&lt;div class="text-center"&gt;&lt;img data-echo="/posts/assets/routing-with-grass-gis-catchment-area-calculation/roads_points.png"/&gt;&lt;/div&gt;

&lt;p&gt;You have to have routable network to do the actual routing (the worst sentence ever written). To do so,&amp;nbsp;let&amp;#8217;s:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;connect the random points to the&amp;nbsp;network&lt;/li&gt;
&lt;li&gt;add nodes to ends and intersections of the&amp;nbsp;roads&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note I&amp;#8217;m using the 500m as the max distance in which to connect the points to the&amp;nbsp;network.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;v.net &lt;span class="nv"&gt;input&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;roads &lt;span class="nv"&gt;points&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;points &lt;span class="nv"&gt;operation&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;connect &lt;span class="nv"&gt;threshold&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;500&lt;/span&gt; &lt;span class="nv"&gt;output&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;network
v.net &lt;span class="nv"&gt;input&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;network &lt;span class="nv"&gt;output&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;network_noded &lt;span class="nv"&gt;operation&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;nodes
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Finding the shortest path between two&amp;nbsp;points&lt;/h2&gt;
&lt;p&gt;Once the network is routable, it is easy to find the shortest path between points number 1 and 4 and store it in the new&amp;nbsp;map.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;1 1 4&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; v.net.path &lt;span class="nv"&gt;input&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;network_noded &lt;span class="nv"&gt;output&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;path_1_4
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The algorithm doesn&amp;#8217;t take bridges, tunnels and oneways into account, it&amp;#8217;s capable of doing so&amp;nbsp;though.&lt;/p&gt;
&lt;div class="text-center"&gt;&lt;img data-echo="/posts/assets/routing-with-grass-gis-catchment-area-calculation/shortest_path.png" width="70%"/&gt;&lt;/div&gt;

&lt;h2&gt;Distributing the subnets for nearest&amp;nbsp;centers&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;v.net.alloc &lt;span class="nv"&gt;input&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;network_noded &lt;span class="nv"&gt;output&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;network_alloc &lt;span class="nv"&gt;center_cats&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;-6 &lt;span class="nv"&gt;node_layer&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;v.net.alloc&lt;/code&gt; module takes the given centers and distributes the network so each of its parts belongs to exactly one center - the nearest one (speaking the distance, time units,&amp;nbsp;&amp;hellip;).&lt;/p&gt;
&lt;div class="text-center"&gt;&lt;img data-echo="/posts/assets/routing-with-grass-gis-catchment-area-calculation/subnets.png" width="70%"/&gt;&lt;/div&gt;

&lt;h2&gt;Creating catchment&amp;nbsp;areas&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;v.net.iso &lt;span class="nv"&gt;input&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;network_noded &lt;span class="nv"&gt;output&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;network_iso &lt;span class="nv"&gt;center_cats&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;-6 &lt;span class="nv"&gt;costs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1000&lt;/span&gt;,3000,5000
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;v.net.iso&lt;/code&gt; splits net by cost isolines. Again, the costs might be specified as lengths, time units,&amp;nbsp;&amp;hellip;.&lt;/p&gt;
&lt;div class="text-center"&gt;&lt;img data-echo="/posts/assets/routing-with-grass-gis-catchment-area-calculation/isolines.png" width="70%"/&gt;&lt;/div&gt;

&lt;p&gt;Two different ways lead to the actual catchment area creation. First, you extract nodes from the roads with their values, turn them into the raster grid and either extract contours or polygonize the raster. I find the last step suboptimal and would love to find another way of polygonizing the&amp;nbsp;results.&lt;/p&gt;
&lt;div class="text-center"&gt;&lt;img data-echo="/posts/assets/routing-with-grass-gis-catchment-area-calculation/catchment_area.gif" width="70%"/&gt;&lt;/div&gt;

&lt;p&gt;Note when extracting contours the interval has to be set to the reasonable number depending on the nodes&amp;nbsp;values.&lt;/p&gt;
&lt;h2&gt;Remarks&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Once you grasp the basics, &lt;span class="caps"&gt;GRASS&lt;/span&gt; &lt;span class="caps"&gt;GIS&lt;/span&gt; is real fun. Grasping the basics is pretty tough&amp;nbsp;though.&lt;/li&gt;
&lt;li&gt;Pedestrians usually don&amp;#8217;t follow the road&amp;nbsp;network.&lt;/li&gt;
&lt;li&gt;Bridges and tunnels might be an&amp;nbsp;issue.&lt;/li&gt;
&lt;li&gt;Personally, I find &lt;span class="caps"&gt;GRASS&lt;/span&gt; &lt;span class="caps"&gt;GIS&lt;/span&gt; easier to use for the network analysis compared to&amp;nbsp;pgRouting.&lt;/li&gt;
&lt;/ul&gt;</content><category term="grass"></category></entry><entry><title>Routing with pgRouting: Catchment Area Calculation</title><link href="https://www.zimmi.cz/posts/2017/routing-with-pgrouting-catchment-area-calculation/" rel="alternate"></link><published>2017-04-14T17:30:00+02:00</published><updated>2017-04-14T17:30:00+02:00</updated><author><name>Michal Zimmermann</name></author><id>tag:www.zimmi.cz,2017-04-14:/posts/2017/routing-with-pgrouting-catchment-area-calculation/</id><summary type="html">&lt;p&gt;For a long time I&amp;#8217;ve wanted to play with &lt;a href="http://pgrouting.org/"&gt;pgRouting&lt;/a&gt; and that time has finally come. Among many other routing functions there is one that caught my eye, called &lt;code&gt;pgr_drivingdistance&lt;/code&gt;. As the documentation says, it &lt;em&gt;returns the driving distance from a start node&lt;/em&gt; using Dijkstra algorithm. The aforementioned distance …&lt;/p&gt;</summary><content type="html">&lt;p&gt;For a long time I&amp;#8217;ve wanted to play with &lt;a href="http://pgrouting.org/"&gt;pgRouting&lt;/a&gt; and that time has finally come. Among many other routing functions there is one that caught my eye, called &lt;code&gt;pgr_drivingdistance&lt;/code&gt;. As the documentation says, it &lt;em&gt;returns the driving distance from a start node&lt;/em&gt; using Dijkstra algorithm. The aforementioned distance doesn&amp;#8217;t need to be defined in Euclidean space (the real distance between two points), it might be calculated in units of time, slopeness etc. How to get it&amp;nbsp;going?&lt;/p&gt;
&lt;h2&gt;Data&lt;/h2&gt;
&lt;p&gt;&lt;span class="caps"&gt;OSM&lt;/span&gt; will do as it always does. There is a tool called &lt;code&gt;osm2pgrouting&lt;/code&gt; to help you load the data, the pure &lt;span class="caps"&gt;GDAL&lt;/span&gt; seems to be a better way to me though. Importing the downloaded data is&amp;nbsp;trivial.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ogr2ogr -f &lt;span class="s2"&gt;&amp;quot;PostgreSQL&amp;quot;&lt;/span&gt; PG:&lt;span class="s2"&gt;&amp;quot;dbname=pgrouting active_schema=cze&amp;quot;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    -s_srs EPSG:4326 &lt;span class="se"&gt;\&lt;/span&gt;
    -t_srs EPSG:5514 &lt;span class="se"&gt;\&lt;/span&gt;
    roads.shp &lt;span class="se"&gt;\&lt;/span&gt;
    -nln roads &lt;span class="se"&gt;\&lt;/span&gt;
    -lco &lt;span class="nv"&gt;GEOMETRY_NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;the_geom &lt;span class="se"&gt;\&lt;/span&gt;
    -lco &lt;span class="nv"&gt;FID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;id &lt;span class="se"&gt;\&lt;/span&gt;
    -gt &lt;span class="m"&gt;65000&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    -nlt PROMOTE_TO_MULTI &lt;span class="se"&gt;\&lt;/span&gt;
    -clipsrc &lt;span class="m"&gt;16&lt;/span&gt;.538 &lt;span class="m"&gt;49&lt;/span&gt;.147 &lt;span class="m"&gt;16&lt;/span&gt;.699 &lt;span class="m"&gt;49&lt;/span&gt;.240
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To route the network, it has to be properly noded. Although pgRouting comes with built-in &lt;code&gt;pgr_nodenetwork&lt;/code&gt;, it didn&amp;#8217;t seem to work very well. To node the network, use PostGIS &lt;code&gt;ST_Node&lt;/code&gt;. &lt;strong&gt;Note this doesn&amp;#8217;t consider bridges and&amp;nbsp;tunnels.&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;cze&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;roads_noded&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt;
&lt;span class="k"&gt;SELECT&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ST_Dump&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;geom&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="n"&gt;geom&lt;/span&gt; &lt;span class="n"&gt;the_geom&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="k"&gt;SELECT&lt;/span&gt;
        &lt;span class="n"&gt;ST_Node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;geom&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;geom&lt;/span&gt;
    &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;ST_Union&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;the_geom&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;geom&lt;/span&gt;
        &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;cze&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;roads&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;After noding the network, all the information about speed limits and oneways is lost. If needed, it can be brought back with&amp;nbsp;following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;INDEX&lt;/span&gt; &lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="n"&gt;cze&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;roads_noded&lt;/span&gt; &lt;span class="k"&gt;USING&lt;/span&gt; &lt;span class="n"&gt;gist&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;the_geom&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;ALTER&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;cze&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;roads_noded&lt;/span&gt; &lt;span class="k"&gt;ADD&lt;/span&gt; &lt;span class="k"&gt;COLUMN&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="nb"&gt;SERIAL&lt;/span&gt; &lt;span class="k"&gt;PRIMARY&lt;/span&gt; &lt;span class="k"&gt;KEY&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;ALTER&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;cze&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;roads_noded&lt;/span&gt; &lt;span class="k"&gt;ADD&lt;/span&gt; &lt;span class="k"&gt;COLUMN&lt;/span&gt; &lt;span class="n"&gt;maxspeed&lt;/span&gt; &lt;span class="nb"&gt;integer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;UPDATE&lt;/span&gt; &lt;span class="n"&gt;cze&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;roads_noded&lt;/span&gt;
&lt;span class="k"&gt;SET&lt;/span&gt; &lt;span class="n"&gt;maxspeed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;maxspeed&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="k"&gt;DISTINCT&lt;/span&gt; &lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;rn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;maxspeed&lt;/span&gt;
    &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;cze&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;roads_noded&lt;/span&gt; &lt;span class="n"&gt;rn&lt;/span&gt;
    &lt;span class="k"&gt;JOIN&lt;/span&gt; &lt;span class="n"&gt;cze&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;roads&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ST_Intersects&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;the_geom&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;the_geom&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;ORDER&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="n"&gt;rn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ST_Length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ST_Intersection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;the_geom&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;the_geom&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;DESC&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;cze&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;roads_noded&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;With everything set, the topology can be&amp;nbsp;built.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;ALTER&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;cze&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;roads_noded&lt;/span&gt; &lt;span class="k"&gt;ADD&lt;/span&gt; &lt;span class="k"&gt;COLUMN&lt;/span&gt; &lt;span class="k"&gt;source&lt;/span&gt; &lt;span class="nb"&gt;integer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;ALTER&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;cze&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;roads_noded&lt;/span&gt; &lt;span class="k"&gt;ADD&lt;/span&gt; &lt;span class="k"&gt;COLUMN&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt; &lt;span class="nb"&gt;integer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;pgr_createTopology&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;cze.roads_noded&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This function creates the &lt;code&gt;cze.roads_noded_vertices_pgr&lt;/code&gt; that contains all the extracted nodes from the&amp;nbsp;network.&lt;/p&gt;
&lt;div class="text-center"&gt;&lt;img data-echo="/posts/assets/routing-with-pgrouting-catchment-area-calculation/nodes.png" width="70%" /&gt;&lt;/div&gt;

&lt;p&gt;As already mentioned, measures other than length can be used as a distance, I chose the time to get to a given node on&amp;nbsp;foot.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;ALTER&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;cze&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;roads_noded&lt;/span&gt; &lt;span class="k"&gt;ADD&lt;/span&gt; &lt;span class="k"&gt;COLUMN&lt;/span&gt; &lt;span class="n"&gt;cost_minutes&lt;/span&gt; &lt;span class="nb"&gt;integer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;UPDATE&lt;/span&gt; &lt;span class="n"&gt;cze&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;roads_noded&lt;/span&gt;
&lt;span class="k"&gt;SET&lt;/span&gt; &lt;span class="n"&gt;cost_minutes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ST_Length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;the_geom&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;83&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)::&lt;/span&gt;&lt;span class="nb"&gt;integer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;-- it takes average person one minute to walk 83 meters&lt;/span&gt;

&lt;span class="k"&gt;UPDATE&lt;/span&gt; &lt;span class="n"&gt;cze&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;roads_noded&lt;/span&gt;
&lt;span class="k"&gt;SET&lt;/span&gt; &lt;span class="n"&gt;cost_minutes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;cost_minutes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Routing&lt;/h2&gt;
&lt;p&gt;Now the interesting part. All the routing functions are built on what&amp;#8217;s called &lt;a href="http://docs.pgrouting.org/2.4/en/pgRouting-concepts.html#inner-queries"&gt;&lt;em&gt;inner queries&lt;/em&gt;&lt;/a&gt; that are expected to return a certain data structure with no geometry included. As I want to see the results in &lt;span class="caps"&gt;QGIS&lt;/span&gt; immediately, I had to use a simple anonymous &lt;span class="caps"&gt;PL&lt;/span&gt;/pgSQL block that writes polygonal catchment areas to a table (consider it a proof of concept, not the final&amp;nbsp;solution).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;DROP&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="k"&gt;IF&lt;/span&gt; &lt;span class="k"&gt;EXISTS&lt;/span&gt; &lt;span class="n"&gt;cze&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;cze&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;temp&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt;
&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;cze&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;roads_noded_vertices_pgr&lt;/span&gt; &lt;span class="n"&gt;ver&lt;/span&gt;
&lt;span class="k"&gt;JOIN&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
    &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;pgr_drivingDistance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;SELECT id, source, target, cost_minutes as cost, cost_minutes as reverse_cost FROM cze.roads_noded&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="mi"&gt;6686&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="k"&gt;true&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;dist&lt;/span&gt; &lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="n"&gt;ver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dist&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;DO&lt;/span&gt; &lt;span class="err"&gt;$$&lt;/span&gt;
&lt;span class="k"&gt;DECLARE&lt;/span&gt;
    &lt;span class="k"&gt;c&lt;/span&gt; &lt;span class="nb"&gt;integer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;BEGIN&lt;/span&gt;
    &lt;span class="k"&gt;DROP&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="k"&gt;IF&lt;/span&gt; &lt;span class="k"&gt;EXISTS&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;agg_cost&lt;/span&gt; &lt;span class="nb"&gt;integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;geom&lt;/span&gt; &lt;span class="n"&gt;geometry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MULTIPOLYGON&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5514&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;-- order by the biggest area so the polygons are not hidden beneath the bigger ones&lt;/span&gt;
    &lt;span class="k"&gt;FOR&lt;/span&gt; &lt;span class="k"&gt;c&lt;/span&gt; &lt;span class="k"&gt;IN&lt;/span&gt; &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;agg_cost&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;cze&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;temp&lt;/span&gt; &lt;span class="k"&gt;GROUP&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="n"&gt;agg_cost&lt;/span&gt; &lt;span class="k"&gt;HAVING&lt;/span&gt; &lt;span class="k"&gt;COUNT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="k"&gt;ORDER&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;DESC&lt;/span&gt; &lt;span class="n"&gt;LOOP&lt;/span&gt;
        &lt;span class="n"&gt;RAISE&lt;/span&gt; &lt;span class="n"&gt;INFO&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;%&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;INSERT&lt;/span&gt; &lt;span class="k"&gt;INTO&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;agg_cost&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;geom&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;SELECT&lt;/span&gt;
            &lt;span class="k"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;ST_Multi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ST_SetSRID&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pgr_pointsAsPolygon&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="s1"&gt;&amp;#39;SELECT&lt;/span&gt;
&lt;span class="s1"&gt;                        temp.id::integer,&lt;/span&gt;
&lt;span class="s1"&gt;                        ST_X(temp.the_geom)::float AS x,&lt;/span&gt;
&lt;span class="s1"&gt;                        ST_Y(temp.the_geom)::float AS y&lt;/span&gt;
&lt;span class="s1"&gt;                FROM cze.temp&lt;/span&gt;
&lt;span class="s1"&gt;                WHERE agg_cost = &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="k"&gt;c&lt;/span&gt;
            &lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;5514&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="k"&gt;END&lt;/span&gt; &lt;span class="n"&gt;LOOP&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;END&lt;/span&gt;&lt;span class="err"&gt;$$&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Using &lt;code&gt;pgr_pointsAsPolygon&lt;/code&gt; renders resulting nodes accessible in 10-minute walk in polygons, but weird looking ones. Not bad, could be better&amp;nbsp;though.&lt;/p&gt;
&lt;div class="text-center"&gt;&lt;img data-echo="/assets/routing-with-pgrouting-catchment-area-calculation/area1.png" width="70%" /&gt;&lt;/div&gt;

&lt;p&gt;How about seeing only nodes instead of&amp;nbsp;polygons?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;
    &lt;span class="n"&gt;agg_cost&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;ST_PointN&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;geom&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="k"&gt;SELECT&lt;/span&gt;
        &lt;span class="n"&gt;agg_cost&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;ST_ExteriorRing&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;ST_Dump&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;geom&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="n"&gt;geom&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;geom&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;generate_series&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;ST_NumPoints&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ST_ExteriorRing&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;ST_Dump&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;geom&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="n"&gt;geom&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;
    &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Looks good, could be better&amp;nbsp;though.&lt;/p&gt;
&lt;div class="text-center"&gt;&lt;img data-echo="/assets/routing-with-pgrouting-catchment-area-calculation/nodes1.png" width="70%" /&gt;&lt;/div&gt;

&lt;p&gt;How about creating concave hulls from the extracted&amp;nbsp;nodes?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;
    &lt;span class="n"&gt;agg_cost&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;ST_ConcaveHull&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ST_Union&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;geom&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="n"&gt;geom&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="k"&gt;SELECT&lt;/span&gt;
        &lt;span class="n"&gt;agg_cost&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;ST_PointN&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;geom&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;geom&lt;/span&gt;
    &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="k"&gt;SELECT&lt;/span&gt;
            &lt;span class="n"&gt;agg_cost&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;ST_ExteriorRing&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;ST_Dump&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;geom&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="n"&gt;geom&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;geom&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;generate_series&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;ST_NumPoints&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ST_ExteriorRing&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;ST_Dump&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;geom&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="n"&gt;geom&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;
        &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;span class="k"&gt;GROUP&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="n"&gt;agg_cost&lt;/span&gt;
&lt;span class="k"&gt;ORDER&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="n"&gt;agg_cost&lt;/span&gt; &lt;span class="k"&gt;DESC&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This one looks the best I&amp;nbsp;guess.&lt;/p&gt;
&lt;div class="text-center"&gt;&lt;img data-echo="/assets/routing-with-pgrouting-catchment-area-calculation/area2.png" width="70%" /&gt;&lt;/div&gt;

&lt;h2&gt;Remarks&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The documentation doesn&amp;#8217;t help&amp;nbsp;much.&lt;/li&gt;
&lt;li&gt;I&amp;#8217;d expect existing functions to return different data structures to be easy-to-use,&amp;nbsp;actually.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LATERAL&lt;/code&gt; might be really handy with those inner queries, have to give it a shot in the&amp;nbsp;future.&lt;/li&gt;
&lt;li&gt;Pedestrians usually don&amp;#8217;t follow the road&amp;nbsp;network.&lt;/li&gt;
&lt;li&gt;Bridges and tunnels might be an&amp;nbsp;issue.&lt;/li&gt;
&lt;/ul&gt;</content><category term="postgis"></category><category term="pgrouting"></category></entry><entry><title>Exploiting Prague Open Data without API</title><link href="https://www.zimmi.cz/posts/2017/exploiting-prague-open-data-without-api/" rel="alternate"></link><published>2017-04-03T19:30:00+02:00</published><updated>2017-04-03T19:30:00+02:00</updated><author><name>Michal Zimmermann</name></author><id>tag:www.zimmi.cz,2017-04-03:/posts/2017/exploiting-prague-open-data-without-api/</id><summary type="html">&lt;p&gt;Speaking the Czech Republic, &lt;a href="http://www.geoportalpraha.cz"&gt;Prague is an undoubted leader in open data publishing&lt;/a&gt;. However, there is no public &lt;span class="caps"&gt;API&lt;/span&gt; to explore/search existing&amp;nbsp;datasets.&lt;/p&gt;
&lt;p&gt;I wanted to download the &lt;span class="caps"&gt;ESRI&lt;/span&gt; Shapefile of the city urban plan that &lt;a href="http://www.geoportalpraha.cz/cs/opendata/21733E1F-21B7-4ABC-B1C2-DC19C0237380#.WOKHMbmFvVM"&gt;is divided into more than a hundred files&lt;/a&gt; (a file representing a cadastral …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Speaking the Czech Republic, &lt;a href="http://www.geoportalpraha.cz"&gt;Prague is an undoubted leader in open data publishing&lt;/a&gt;. However, there is no public &lt;span class="caps"&gt;API&lt;/span&gt; to explore/search existing&amp;nbsp;datasets.&lt;/p&gt;
&lt;p&gt;I wanted to download the &lt;span class="caps"&gt;ESRI&lt;/span&gt; Shapefile of the city urban plan that &lt;a href="http://www.geoportalpraha.cz/cs/opendata/21733E1F-21B7-4ABC-B1C2-DC19C0237380#.WOKHMbmFvVM"&gt;is divided into more than a hundred files&lt;/a&gt; (a file representing a cadastral&amp;nbsp;area).&lt;/p&gt;
&lt;p&gt;This becomes a piece of cake with Opera Developer tools and a bit of JavaScript&amp;nbsp;code&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;links&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementsByClassName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;open-data-icon-rastr open-data-link tooltipstered&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;link&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;links&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;link&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;SHP&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;continue&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;link&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;With the list saved to a file called &lt;code&gt;list.txt&lt;/code&gt;, &lt;code&gt;wget --input-file=list.txt&lt;/code&gt; will download the data. Followed by &lt;code&gt;for f in *.zip; do unzip $f -d ${f%%.zip}; done&lt;/code&gt;, each archive will be extracted in the directory called by its&amp;nbsp;name.&lt;/p&gt;
&lt;p&gt;Once done and assuming that the files are named consistently across the folders, &lt;code&gt;ogr2ogr&lt;/code&gt; will merge all of them into a single GeoPackage file, resulting in just four files. Not bad considered I began with more than a hundred &amp;times;&amp;nbsp;4.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ogr2ogr -f &lt;span class="s2"&gt;&amp;quot;GPKG&amp;quot;&lt;/span&gt; pvp_fvu_p.gpkg ./PVP_fvu_p_Bechovice_SHP/PVP_fvu_p.shp
find -type f -not -path &lt;span class="s1"&gt;&amp;#39;./PVP_fvu_p_Bechovice_SHP*&amp;#39;&lt;/span&gt; -iname &lt;span class="s1"&gt;&amp;#39;*fvu_p.shp&amp;#39;&lt;/span&gt; -exec ogr2ogr -update -append -f &lt;span class="s2"&gt;&amp;quot;GPKG&amp;quot;&lt;/span&gt; pvp_fvu_p.gpkg &lt;span class="s1"&gt;&amp;#39;{}&amp;#39;&lt;/span&gt; &lt;span class="se"&gt;\;&lt;/span&gt;

ogr2ogr -f &lt;span class="s2"&gt;&amp;quot;GPKG&amp;quot;&lt;/span&gt; pvp_fvu_popis_z_a.gpkg ./PVP_fvu_p_Bechovice_SHP/PVP_fvu_popis_z_a.shp
find -type f -not -path &lt;span class="s1"&gt;&amp;#39;./PVP_fvu_p_Bechovice_SHP*&amp;#39;&lt;/span&gt; -iname &lt;span class="s1"&gt;&amp;#39;*fvu_popis_z_a.shp&amp;#39;&lt;/span&gt; -exec ogr2ogr -update -append -f &lt;span class="s2"&gt;&amp;quot;GPKG&amp;quot;&lt;/span&gt; pvp_fvu_popis_z_a.gpkg &lt;span class="s1"&gt;&amp;#39;{}&amp;#39;&lt;/span&gt; &lt;span class="se"&gt;\;&lt;/span&gt;

ogr2ogr -f &lt;span class="s2"&gt;&amp;quot;GPKG&amp;quot;&lt;/span&gt; pvp_pp_pl_a.gpkg ./PVP_fvu_p_Bechovice_SHP/PVP_pp_pl_a.shp
find -type f -not -path &lt;span class="s1"&gt;&amp;#39;./PVP_fvu_p_Bechovice_SHP*&amp;#39;&lt;/span&gt; -iname &lt;span class="s1"&gt;&amp;#39;*pp_pl_a.shp&amp;#39;&lt;/span&gt; -exec ogr2ogr -update -append -f &lt;span class="s2"&gt;&amp;quot;GPKG&amp;quot;&lt;/span&gt; pvp_pp_pl_a.gpkg &lt;span class="s1"&gt;&amp;#39;{}&amp;#39;&lt;/span&gt; &lt;span class="se"&gt;\;&lt;/span&gt;

ogr2ogr -f &lt;span class="s2"&gt;&amp;quot;GPKG&amp;quot;&lt;/span&gt; pvp_pp_s_a.gpkg ./PVP_fvu_p_Bechovice_SHP/PVP_pp_s_a.shp
find -type f -not -path &lt;span class="s1"&gt;&amp;#39;./PVP_fvu_p_Bechovice_SHP*&amp;#39;&lt;/span&gt; -iname &lt;span class="s1"&gt;&amp;#39;*pp_s_a.shp&amp;#39;&lt;/span&gt; -exec ogr2ogr -update -append -f &lt;span class="s2"&gt;&amp;quot;GPKG&amp;quot;&lt;/span&gt; pvp_pp_s_a.gpkg &lt;span class="s1"&gt;&amp;#39;{}&amp;#39;&lt;/span&gt; &lt;span class="se"&gt;\;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A boring task that would take me hours five years ago transformed into simple, yet fun, piece of work done in no more than half an&amp;nbsp;hour.&lt;/p&gt;</content><category term="bash"></category></entry><entry><title>Upgrading PostgreSQL 9.5 to PostgreSQL 9.6 with PostGIS</title><link href="https://www.zimmi.cz/posts/2017/upgrading-postgresql-95-to-postgresql-96-with-postgis/" rel="alternate"></link><published>2017-03-01T09:30:00+01:00</published><updated>2017-03-01T09:30:00+01:00</updated><author><name>Michal Zimmermann</name></author><id>tag:www.zimmi.cz,2017-03-01:/posts/2017/upgrading-postgresql-95-to-postgresql-96-with-postgis/</id><summary type="html">&lt;p&gt;Thanks to &lt;code&gt;pg_upgrade&lt;/code&gt; tool the PostgreSQL upgrade on Ubuntu is pretty straightforward. Different PostGIS versions might cause troubles though. This post covers PostgreSQL 9.5, PostGIS 2.2 to PostgreSQL 9.6, PostGIS 2.3&amp;nbsp;migration.&lt;/p&gt;
&lt;p&gt;First of all, install the PostgreSQL 9.6 with PostGIS&amp;nbsp;2.3.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;apt install …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Thanks to &lt;code&gt;pg_upgrade&lt;/code&gt; tool the PostgreSQL upgrade on Ubuntu is pretty straightforward. Different PostGIS versions might cause troubles though. This post covers PostgreSQL 9.5, PostGIS 2.2 to PostgreSQL 9.6, PostGIS 2.3&amp;nbsp;migration.&lt;/p&gt;
&lt;p&gt;First of all, install the PostgreSQL 9.6 with PostGIS&amp;nbsp;2.3.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;apt install postgresql-9.6 postgresql-9.6-postgis-2.3
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Mind that newly installed database cluster runs on port &lt;code&gt;5433&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you run &lt;code&gt;pg_upgrade&lt;/code&gt; at this stage, it will fail with the following&amp;nbsp;error.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;could not load library &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$libdir&lt;/span&gt;&lt;span class="s2"&gt;/postgis_topology-2.2&amp;quot;&lt;/span&gt;:
ERROR:  could not access file &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$libdir&lt;/span&gt;&lt;span class="s2"&gt;/postgis_topology-2.2&amp;quot;&lt;/span&gt;: No such file or directory
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;pg_upgrade&lt;/code&gt; can&amp;#8217;t run the upgrade because PostGIS versions don&amp;#8217;t match. Install the PostGIS 2.3 for PostgreSQL 9.5 and update extensions in all your&amp;nbsp;databases.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;apt install postgresql-9.5-postgis-2.3

:::sql
ALTER EXTENSION postgis UPDATE&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;With both clusters using the same PostGIS version, the upgrade can begin. First, stop them&amp;nbsp;with&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;service postgresql stop
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then, run the actual &lt;code&gt;pg_upgrade&lt;/code&gt; command as &lt;code&gt;postgres&lt;/code&gt; user. Make sure the &lt;code&gt;pg_hba.conf&lt;/code&gt; file is set to allow local&amp;nbsp;connections.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/usr/lib/postgresql/9.6/bin/pg_upgrade &lt;span class="se"&gt;\&lt;/span&gt;
-b /usr/lib/postgresql/9.5/bin/ &lt;span class="se"&gt;\&lt;/span&gt;
-B /usr/lib/postgresql/9.6/bin/ &lt;span class="se"&gt;\&lt;/span&gt;
-d /var/lib/postgresql/9.5/main &lt;span class="se"&gt;\&lt;/span&gt;
-D /var/lib/postgresql/9.6/main &lt;span class="se"&gt;\&lt;/span&gt;
-o &lt;span class="s1"&gt;&amp;#39; -c config_file=/etc/postgresql/9.5/main/postgresql.conf&amp;#39;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
-O &lt;span class="s1"&gt;&amp;#39; -c config_file=/etc/postgresql/9.6/main/postgresql.conf&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The following result means the upgrade was&amp;nbsp;smooth.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Performing Consistency Checks
-----------------------------
Checking cluster versions                                   ok
Checking database user is the install user                  ok
Checking database connection settings                       ok
Checking &lt;span class="k"&gt;for&lt;/span&gt; prepared transactions                          ok
Checking &lt;span class="k"&gt;for&lt;/span&gt; reg* system OID user data types                ok
Checking &lt;span class="k"&gt;for&lt;/span&gt; contrib/isn with bigint-passing mismatch       ok
Checking &lt;span class="k"&gt;for&lt;/span&gt; roles starting with &lt;span class="s1"&gt;&amp;#39;pg_&amp;#39;&lt;/span&gt;                      ok
Creating dump of global objects                             ok
Creating dump of database schemas
                                                            ok
Checking &lt;span class="k"&gt;for&lt;/span&gt; presence of required libraries                 ok
Checking database user is the install user                  ok
Checking &lt;span class="k"&gt;for&lt;/span&gt; prepared transactions                          ok

If pg_upgrade fails after this point, you must re-initdb the
new cluster before continuing.

Performing Upgrade
------------------
Analyzing all rows in the new cluster                       ok
Freezing all rows on the new cluster                        ok
Deleting files from new pg_clog                             ok
Copying old pg_clog to new server                           ok
Setting next transaction ID and epoch &lt;span class="k"&gt;for&lt;/span&gt; new cluster       ok
Deleting files from new pg_multixact/offsets                ok
Copying old pg_multixact/offsets to new server              ok
Deleting files from new pg_multixact/members                ok
Copying old pg_multixact/members to new server              ok
Setting next multixact ID and offset &lt;span class="k"&gt;for&lt;/span&gt; new cluster        ok
Resetting WAL archives                                      ok
Setting frozenxid and minmxid counters in new cluster       ok
Restoring global objects in the new cluster                 ok
Restoring database schemas in the new cluster
                                                            ok
Copying user relation files
                                                            ok
Setting next OID &lt;span class="k"&gt;for&lt;/span&gt; new cluster                            ok
Sync data directory to disk                                 ok
Creating script to analyze new cluster                      ok
Creating script to delete old cluster                       ok

Upgrade Complete
----------------
Optimizer statistics are not transferred by pg_upgrade so,
once you start the new server, consider running:
    ./analyze_new_cluster.sh

Running this script will delete the old cluster&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;s data files:
    ./delete_old_cluster.sh
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The old cluster can be removed and the new one switched back to port &lt;code&gt;5432&lt;/code&gt;. Run &lt;code&gt;/usr/lib/postgresql/9.6/bin/vacuumdb -p 5433 --all --analyze-in-stages&lt;/code&gt; to collect&amp;nbsp;statistics.&lt;/p&gt;</content><category term="sql"></category><category term="postgresql"></category></entry><entry><title>Executing dynamic SQL query right away</title><link href="https://www.zimmi.cz/posts/2017/executing-dynamic-sql-query-right-away/" rel="alternate"></link><published>2017-02-28T20:30:00+01:00</published><updated>2017-02-28T20:30:00+01:00</updated><author><name>Michal Zimmermann</name></author><id>tag:www.zimmi.cz,2017-02-28:/posts/2017/executing-dynamic-sql-query-right-away/</id><summary type="html">&lt;p&gt;PostgreSQL 9.6 comes with a handy &lt;code&gt;psql&lt;/code&gt; command called &lt;code&gt;\gexec&lt;/code&gt; that &lt;em&gt;sends the current query input buffer to the server and treats the result as a &lt;span class="caps"&gt;SQL&lt;/span&gt; statement to be executed&lt;/em&gt; (right, whatever). What that means is that instead of doing&amp;nbsp;this&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;psql -c &lt;span class="s2"&gt;&amp;quot;SELECT &amp;#39;DROP TABLE &amp;#39; || tablename FROM …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;PostgreSQL 9.6 comes with a handy &lt;code&gt;psql&lt;/code&gt; command called &lt;code&gt;\gexec&lt;/code&gt; that &lt;em&gt;sends the current query input buffer to the server and treats the result as a &lt;span class="caps"&gt;SQL&lt;/span&gt; statement to be executed&lt;/em&gt; (right, whatever). What that means is that instead of doing&amp;nbsp;this&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;psql -c &lt;span class="s2"&gt;&amp;quot;SELECT &amp;#39;DROP TABLE &amp;#39; || tablename FROM information_schema.tables WHERE table_name LIKE &amp;#39;%to_be_dropped%&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; psql
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;you&amp;#8217;ll do&amp;nbsp;that&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;DROP TABLE &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;tablename&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;information_schema&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tables&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="k"&gt;table_name&lt;/span&gt; &lt;span class="k"&gt;LIKE&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;%to_be_dropped%&amp;#39;&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;gexec&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Brilliant.&lt;/p&gt;</content><category term="sql"></category><category term="postgresql"></category></entry><entry><title>Subdivide and Conquer: Effective Spatial Indexes in PostGIS</title><link href="https://www.zimmi.cz/posts/2017/subdivide-and-conquer-effective-spatial-indexes-in-postgis/" rel="alternate"></link><published>2017-01-10T21:45:00+01:00</published><updated>2017-01-10T21:45:00+01:00</updated><author><name>Michal Zimmermann</name></author><id>tag:www.zimmi.cz,2017-01-10:/posts/2017/subdivide-and-conquer-effective-spatial-indexes-in-postgis/</id><summary type="html">&lt;p&gt;Spatial indexes are absolutely crucial part of any spatial database and - as I tend to say quite often - only a fool would try to query spatial data without building spatial indexes&amp;nbsp;beforehand.&lt;/p&gt;
&lt;p&gt;Spatial indexes are based on bounding box comparisons, which are generally very fast. Yet, there are situations when …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Spatial indexes are absolutely crucial part of any spatial database and - as I tend to say quite often - only a fool would try to query spatial data without building spatial indexes&amp;nbsp;beforehand.&lt;/p&gt;
&lt;p&gt;Spatial indexes are based on bounding box comparisons, which are generally very fast. Yet, there are situations when spatial indexes don&amp;#8217;t help much (or they don&amp;#8217;t help as much as they could, if you&amp;nbsp;wish).&lt;/p&gt;
&lt;div class="text-center"&gt;&lt;img data-echo="/posts/assets/subdivide-and-conquer-effective-spatial-indexes-in-postgis/index.svg" /&gt;&lt;/div&gt;

&lt;p&gt;Bounding box comparisons are effective with lots of small bounding boxes rather then few large ones. Why? See the picture above. The curved line (imagine it&amp;#8217;s a pipeline for example) clearly demonstrates when the spatial index/bounding box comparison might fall short of what you&amp;#8217;d&amp;nbsp;expect.&lt;/p&gt;
&lt;p&gt;Once the bounding box gets really big, it intersects so many other geometries&amp;#8217; bounding boxes that the whole comparison starts to slow&amp;nbsp;down.&lt;/p&gt;
&lt;p&gt;Luckily, PostGIS 2.2 introduced a &lt;a href="http://postgis.net/docs/ST_Subdivide.html"&gt;ST_Subdivide&lt;/a&gt; function that can lend a helping hand in&amp;nbsp;here.&lt;/p&gt;
&lt;p&gt;Until today, we delivered the parcel geometries into our &lt;a href="https://www.symap.cz"&gt;real estate acquisition process system&lt;/a&gt; with the following query, that takes all the geometries from the &lt;code&gt;req_geom&lt;/code&gt; table (pipelines, remember?) and intersects them with cadastral parcels. The second part of the query adds those parcels that haven&amp;#8217;t been digitalized and were created manually by one of my&amp;nbsp;workmates.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;INSERT&lt;/span&gt; &lt;span class="k"&gt;INTO&lt;/span&gt; &lt;span class="n"&gt;requested_parcels&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;par_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;SELECT&lt;/span&gt;
    &lt;span class="n"&gt;reqs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;uid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="n"&gt;par_id&lt;/span&gt;
 &lt;span class="k"&gt;FROM&lt;/span&gt;
    &lt;span class="n"&gt;running_requests&lt;/span&gt; &lt;span class="n"&gt;reqs&lt;/span&gt;
 &lt;span class="k"&gt;JOIN&lt;/span&gt;
    &lt;span class="n"&gt;req_geom&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reqs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;uid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;uid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="k"&gt;JOIN&lt;/span&gt;
    &lt;span class="n"&gt;pargeo&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ST_Intersects&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;geom&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;geom&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
 &lt;span class="k"&gt;UNION&lt;/span&gt;
 &lt;span class="k"&gt;SELECT&lt;/span&gt;
    &lt;span class="n"&gt;reqs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;uid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;idpar&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nb"&gt;numeric&lt;/span&gt;
 &lt;span class="k"&gt;FROM&lt;/span&gt;
    &lt;span class="n"&gt;running_requests&lt;/span&gt; &lt;span class="n"&gt;reqs&lt;/span&gt;
 &lt;span class="k"&gt;JOIN&lt;/span&gt;
     &lt;span class="n"&gt;req_man&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reqs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;uid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;uid&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It&amp;#8217;s a perfectly standard query that intersects several request geometries with ~20M parcels, nothing really fancy. Except that it takes 25 minutes to finish. Why? Pipelines,&amp;nbsp;remember?&lt;/p&gt;
&lt;p&gt;Yet, the query below takes only 30 seconds to finish (that&amp;#8217;s a huge time saver considering that the whole process used to take ~40 minutes)! Why? Because the &lt;code&gt;ST_Subdivide&lt;/code&gt; effectively shrinks the &lt;code&gt;req_geom&lt;/code&gt; geometries until they have 50 vertices each at most. Such small geometries are perfect input for the bounding box comparison. Remember to call &lt;code&gt;DISTINCT&lt;/code&gt; when using &lt;code&gt;ST_Subdivide&lt;/code&gt;, you&amp;#8217;d probably get duplicate parcel ids&amp;nbsp;otherwise.&lt;/p&gt;
&lt;p&gt;I also replaced the &lt;code&gt;UNION&lt;/code&gt; with the &lt;a href="https://www.zimmi.cz/posts/2015/postgresql-in-vs-exists/"&gt;&lt;code&gt;WHERE NOT EXISTS&lt;/code&gt;&lt;/a&gt; expression, as it&amp;#8217;s reasonable to assume that numeric ids comparison will be&amp;nbsp;faster.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;INSERT&lt;/span&gt; &lt;span class="k"&gt;INTO&lt;/span&gt; &lt;span class="n"&gt;requested_parcels&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;par_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="k"&gt;DISTINCT&lt;/span&gt;
    &lt;span class="n"&gt;reqs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;uid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="n"&gt;par_id&lt;/span&gt;
 &lt;span class="k"&gt;FROM&lt;/span&gt;
    &lt;span class="n"&gt;running_requests&lt;/span&gt; &lt;span class="n"&gt;reqs&lt;/span&gt;
 &lt;span class="k"&gt;JOIN&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="k"&gt;SELECT&lt;/span&gt;
            &lt;span class="n"&gt;uid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;ST_Subdivide&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;geom&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;geom&lt;/span&gt;
        &lt;span class="k"&gt;FROM&lt;/span&gt;
            &lt;span class="n"&gt;req_geom&lt;/span&gt;
     &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reqs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;uid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;uid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="k"&gt;JOIN&lt;/span&gt;
     &lt;span class="n"&gt;pargeo&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ST_Intersects&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;geom&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;geom&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

 &lt;span class="k"&gt;INSERT&lt;/span&gt; &lt;span class="k"&gt;INTO&lt;/span&gt; &lt;span class="n"&gt;requested_parcels&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;par_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="k"&gt;SELECT&lt;/span&gt;
     &lt;span class="n"&gt;reqs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;uid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;idpar&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nb"&gt;numeric&lt;/span&gt;
 &lt;span class="k"&gt;FROM&lt;/span&gt;
     &lt;span class="n"&gt;running_requests&lt;/span&gt; &lt;span class="n"&gt;reqs&lt;/span&gt;
 &lt;span class="k"&gt;JOIN&lt;/span&gt;
     &lt;span class="n"&gt;req_man&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reqs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;uid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;uid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;EXISTS&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
     &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
     &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;pozadovane_parcely&lt;/span&gt; &lt;span class="n"&gt;pp&lt;/span&gt;
     &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;pp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;par_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;idpar&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="sql"></category><category term="postgresql"></category><category term="postgis"></category></entry><entry><title>Counting substring occurrences in PostgreSQL</title><link href="https://www.zimmi.cz/posts/2016/counting-substring-occurrences-in-postgresql/" rel="alternate"></link><published>2016-12-19T17:50:00+01:00</published><updated>2016-12-19T17:50:00+01:00</updated><author><name>Michal Zimmermann</name></author><id>tag:www.zimmi.cz,2016-12-19:/posts/2016/counting-substring-occurrences-in-postgresql/</id><summary type="html">&lt;p&gt;I got to count occurrences of &lt;em&gt;/&lt;/em&gt; character today and found out no built-in function exists in PostgreSQL, so here&amp;#8217;s my shot at it. Pretty simple, yet&amp;nbsp;useful.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;OR&lt;/span&gt; &lt;span class="k"&gt;REPLACE&lt;/span&gt; &lt;span class="k"&gt;FUNCTION&lt;/span&gt; &lt;span class="n"&gt;how_many&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;IN&lt;/span&gt; &lt;span class="nb"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;IN&lt;/span&gt; &lt;span class="nb"&gt;varchar&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;OUT&lt;/span&gt; &lt;span class="nb"&gt;integer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;RETURNS&lt;/span&gt; &lt;span class="nb"&gt;integer&lt;/span&gt;
&lt;span class="k"&gt;AS&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;how_many$&lt;/span&gt;
    &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="k"&gt;length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="k"&gt;length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="mi"&gt;2 …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;I got to count occurrences of &lt;em&gt;/&lt;/em&gt; character today and found out no built-in function exists in PostgreSQL, so here&amp;#8217;s my shot at it. Pretty simple, yet&amp;nbsp;useful.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;OR&lt;/span&gt; &lt;span class="k"&gt;REPLACE&lt;/span&gt; &lt;span class="k"&gt;FUNCTION&lt;/span&gt; &lt;span class="n"&gt;how_many&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;IN&lt;/span&gt; &lt;span class="nb"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;IN&lt;/span&gt; &lt;span class="nb"&gt;varchar&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;OUT&lt;/span&gt; &lt;span class="nb"&gt;integer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;RETURNS&lt;/span&gt; &lt;span class="nb"&gt;integer&lt;/span&gt;
&lt;span class="k"&gt;AS&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;how_many$&lt;/span&gt;
    &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="k"&gt;length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="k"&gt;length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;how_many$&lt;/span&gt;
&lt;span class="k"&gt;LANGUAGE&lt;/span&gt; &lt;span class="k"&gt;SQL&lt;/span&gt;
&lt;span class="k"&gt;SECURITY&lt;/span&gt; &lt;span class="k"&gt;DEFINER&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;-- SELECT how_many(&amp;#39;test&amp;#39;, &amp;#39;t&amp;#39;); -- returns number 2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="sql"></category><category term="postgresql"></category></entry><entry><title>Plotting the Czech Cadastre Land Use with d3: Data Viz (part IV)</title><link href="https://www.zimmi.cz/posts/2016/plotting-the-czech-cadastre-land-use-with-d3-data-viz-part-iv/" rel="alternate"></link><published>2016-11-20T14:45:00+01:00</published><updated>2016-11-20T14:45:00+01:00</updated><author><name>Michal Zimmermann</name></author><id>tag:www.zimmi.cz,2016-11-20:/posts/2016/plotting-the-czech-cadastre-land-use-with-d3-data-viz-part-iv/</id><summary type="html">&lt;p&gt;This post is the fourth part of the series summarizing the process of visualizing land use data with bash, PostgreSQL and d3.js. Read other&amp;nbsp;parts:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://www.zimmi.cz/posts/2016/plotting-czech-cadastre-land-use-with-d3-data-extraction-part-i"&gt;Plotting the Czech Cadastre Land Use with d3: Data Extraction (part&amp;nbsp;I)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.zimmi.cz/posts/2016/plotting-czech-cadastre-land-use-with-d3-data-transformation-part-ii"&gt;Plotting the Czech Cadastre Land Use with d3: Data Transformation (part &lt;span class="caps"&gt;II …&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;This post is the fourth part of the series summarizing the process of visualizing land use data with bash, PostgreSQL and d3.js. Read other&amp;nbsp;parts:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://www.zimmi.cz/posts/2016/plotting-czech-cadastre-land-use-with-d3-data-extraction-part-i"&gt;Plotting the Czech Cadastre Land Use with d3: Data Extraction (part&amp;nbsp;I)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.zimmi.cz/posts/2016/plotting-czech-cadastre-land-use-with-d3-data-transformation-part-ii"&gt;Plotting the Czech Cadastre Land Use with d3: Data Transformation (part &lt;span class="caps"&gt;II&lt;/span&gt;)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.zimmi.cz/posts/2016/plotting-czech-cadastre-land-use-with-d3-data-load-part-iii/"&gt;Plotting the Czech Cadastre Land Use with d3: Data Load (part &lt;span class="caps"&gt;III&lt;/span&gt;)&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Data&amp;nbsp;vizualization&lt;/h2&gt;
&lt;p&gt;Those of you who&amp;#8217;ve been following this series know all the data are set and ready to be used. The rest of you, &lt;em&gt;shame on you by the way&lt;/em&gt;, can go through the above posts to catch&amp;nbsp;up.&lt;/p&gt;
&lt;p&gt;The result is available at &lt;a href="https://www.zimmi.cz/kn-landuse-monitor"&gt;https://www.zimmi.cz/kn-landuse-monitor&lt;/a&gt; and works like the gif&amp;nbsp;below.&lt;/p&gt;
&lt;div class="text-center"&gt;&lt;img data-echo="/posts/assets/plotting-the-czech-cadastre-land-use-with-d3-part-iv/screen.gif" /&gt;&lt;/div&gt;

&lt;h3&gt;Features&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;land use data for 13,093 cadastral areas between 2015/01/01 and&amp;nbsp;2016/10/01&lt;/li&gt;
&lt;li&gt;relative area and parcel count per land use&amp;nbsp;type&lt;/li&gt;
&lt;li&gt;similar cadastres based on land use relative area&amp;nbsp;values&lt;/li&gt;
&lt;li&gt;time series plots for various charachteristics (including agricultural land area and parcel&amp;nbsp;count)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Todos&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;time series chart titles&amp;nbsp;onmouseover&lt;/li&gt;
&lt;li&gt;barchart titles&amp;nbsp;onmouseover&lt;/li&gt;
&lt;li&gt;absolute values chart&amp;nbsp;(?)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fetch API&lt;/code&gt; polyfill&lt;/li&gt;
&lt;li&gt;Firefox seems to be&amp;nbsp;broken&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Technologies&lt;/h3&gt;
&lt;p&gt;I implemented &lt;a href="https://github.com/zimmicz/kn-landuse-monitor/tree/f0af50d44d6aac11adb6cdb0c7c67a97d7db1df3"&gt;the whole app with vanilla JavaScript&lt;/a&gt;. The app resided in the &lt;code&gt;Monitor&lt;/code&gt; variable, had several modules that were communicating via custom events with each&amp;nbsp;other.&lt;/p&gt;
&lt;p&gt;So far, so good. Once the app was production-ready, I stumbled upon &lt;a href="https://vuejs.org"&gt;vue.js&lt;/a&gt;, which is by miles the best JavaScript framework experience I&amp;#8217;ve had so far. Reinventing the app once again was the matter of two days (thanks to &lt;a href="https://github.com/vuejs-templates/webpack"&gt;this amazing setup&lt;/a&gt; - hot reload&amp;nbsp;included).&lt;/p&gt;
&lt;p&gt;Thus, the current version of the app is based&amp;nbsp;on:&lt;/p&gt;
&lt;h4&gt;vue.js&lt;/h4&gt;
&lt;p&gt;Thanks to the easy-to-understand system of components, properties and methods, learning curve is really steep. The app is now divided into several components (Search, Dashboard with child components for charts and similar cadastres&amp;nbsp;list).&lt;/p&gt;
&lt;h4&gt;vuex&lt;/h4&gt;
&lt;p&gt;&lt;a href="https://vuex.vuejs.org/en/"&gt;Vuex&lt;/a&gt;, probably inspired by Flux or Redux, is the &lt;em&gt;&amp;#8220;state management pattern + library&amp;#8221;&lt;/em&gt;, the single source of truth for your apps. That&amp;#8217;s pretty much it: there&amp;#8217;s only one place in your app (called the &lt;code&gt;store&lt;/code&gt;), where you go to put or get your data. Not necessarily every single piece of data, just those pieces used across several components. It plays really nice with the&amp;nbsp;vue.js.&lt;/p&gt;
&lt;h4&gt;D3.js&lt;/h4&gt;
&lt;p&gt;Tried it before, &lt;a href="https://d3js.org"&gt;D3.js&lt;/a&gt; was really hard to grasp. And it still is, I guess. At the same time, it&amp;#8217;s damn good at plotting the data. Yet, being a bit less low-level would be&amp;nbsp;great.&lt;/p&gt;
&lt;h4&gt;Dexie&lt;/h4&gt;
&lt;p&gt;I hate writing servers for my pet projects. The server means no Github Pages. Thus, I decided to load the whole dataset with &lt;code&gt;fetch API&lt;/code&gt;  from the external &lt;span class="caps"&gt;JSON&lt;/span&gt; file. Loading the 13K objects &amp;times; 30 properties &amp;times; array with 8 items in each didn&amp;#8217;t seem like the best idea ever, so&amp;hellip; Here comes &lt;a href="http://dexie.org"&gt;Dexie&lt;/a&gt;, a &lt;code&gt;IndexedDB API&lt;/code&gt; wrapper that makes it easy on you (unlike the &lt;code&gt;IndexedDB API&lt;/code&gt; itself, which doesn&amp;#8217;t even let you find out whether the database you&amp;#8217;re creating already exists.&amp;nbsp;Seriously?).&lt;/p&gt;
&lt;p&gt;Dexie loads the initial dataset into the IndexedDB storage and reads it every time user comes back without loading the &lt;span class="caps"&gt;JSON&lt;/span&gt; file again. On data change, the fresh file will be loaded, the database flushed and the new data written. &lt;a href="https://github.com/zimmicz/kn-landuse-monitor/blob/master/src/stores/actions.js"&gt;Behold&lt;/a&gt;; I hate the way it&amp;#8217;s&amp;nbsp;written.&lt;/p&gt;
&lt;h4&gt;Flex&lt;/h4&gt;
&lt;p&gt;Used &lt;code&gt;flex&lt;/code&gt; for the first time, I&amp;#8217;m not sure I understand how it actually works though. &lt;span class="caps"&gt;CSS&lt;/span&gt; feels more complicated every time I need&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;&lt;small&gt;Bottom line: I use localStorage to keep track of the database existence.&lt;/small&gt;&lt;/p&gt;
&lt;h3&gt;Resume&lt;/h3&gt;
&lt;p&gt;Two pet projects completed in one month definitely means the winter is here! Looking forward to using more&amp;nbsp;vue.js.&lt;/p&gt;</content><category term="d3"></category><category term="javascript"></category><category term="svg"></category></entry><entry><title>Plotting the Czech Cadastre Land Use with d3: Data Load (part III)</title><link href="https://www.zimmi.cz/posts/2016/plotting-czech-cadastre-land-use-with-d3-data-load-part-iii/" rel="alternate"></link><published>2016-11-15T18:30:00+01:00</published><updated>2016-11-15T18:30:00+01:00</updated><author><name>Michal Zimmermann</name></author><id>tag:www.zimmi.cz,2016-11-15:/posts/2016/plotting-czech-cadastre-land-use-with-d3-data-load-part-iii/</id><summary type="html">&lt;p&gt;This post is the third part of the series summarizing the process of visualizing landuse data with bash, PostgreSQL and d3.js. Read other&amp;nbsp;parts:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://www.zimmi.cz/posts/2016/plotting-czech-cadastre-land-use-with-d3-data-extraction-part-i"&gt;Plotting the Czech Cadastre Land Use with d3: Data Extraction (part&amp;nbsp;I)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.zimmi.cz/posts/2016/plotting-czech-cadastre-land-use-with-d3-data-transformation-part-ii"&gt;Plotting the Czech Cadastre Land Use with d3: Data Transformation (part &lt;span class="caps"&gt;II&lt;/span&gt;)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;you …&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;This post is the third part of the series summarizing the process of visualizing landuse data with bash, PostgreSQL and d3.js. Read other&amp;nbsp;parts:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://www.zimmi.cz/posts/2016/plotting-czech-cadastre-land-use-with-d3-data-extraction-part-i"&gt;Plotting the Czech Cadastre Land Use with d3: Data Extraction (part&amp;nbsp;I)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.zimmi.cz/posts/2016/plotting-czech-cadastre-land-use-with-d3-data-transformation-part-ii"&gt;Plotting the Czech Cadastre Land Use with d3: Data Transformation (part &lt;span class="caps"&gt;II&lt;/span&gt;)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;you&amp;#8217;re reading it&amp;nbsp;now&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;&lt;span class="caps"&gt;ETL&lt;/span&gt;&amp;nbsp;process&lt;/h2&gt;
&lt;p&gt;Before the d3 viz can be crafted, it&amp;#8217;s necessary&amp;nbsp;to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;extract &lt;span class="caps"&gt;CSV&lt;/span&gt; data from the URLs provided via the Atom&amp;nbsp;feed&lt;/li&gt;
&lt;li&gt;transform those data into a relational database, do some&amp;nbsp;math&lt;/li&gt;
&lt;li&gt;load data into a d3.js&amp;nbsp;viz&lt;/li&gt;
&lt;li&gt;profit (as&amp;nbsp;usual)&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Extract&lt;/h3&gt;
&lt;p&gt;See &lt;a href="https://www.zimmi.cz/posts/2016/plotting-czech-cadastre-land-use-with-d3-data-extraction-part-i"&gt;Plotting the Czech Cadastre Land Use with d3: Data Extraction (part I)&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Transform&lt;/h3&gt;
&lt;p&gt;See &lt;a href="https://www.zimmi.cz/posts/2016/plotting-czech-cadastre-land-use-with-d3-data-transformation-part-ii"&gt;Plotting the Czech Cadastre Land Use with d3: Data Transformation (part &lt;span class="caps"&gt;II&lt;/span&gt;)&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Load&lt;/h2&gt;
&lt;p&gt;Thanks to the way I transformed the data, the whole load is done with&amp;nbsp;simple&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;

touch ./data/data.js
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;let data =&amp;quot;&lt;/span&gt; &amp;gt; ./data/data.js

&lt;span class="o"&gt;(&lt;/span&gt;
cat &lt;span class="s"&gt;&amp;lt;&amp;lt; EOF | psql -qAt --no-psqlrc&lt;/span&gt;
&lt;span class="s"&gt;    SELECT&lt;/span&gt;
&lt;span class="s"&gt;    array_to_json(array_agg(row_to_json(r)))&lt;/span&gt;
&lt;span class="s"&gt;    FROM (&lt;/span&gt;
&lt;span class="s"&gt;    SELECT *&lt;/span&gt;
&lt;span class="s"&gt;    FROM data&lt;/span&gt;
&lt;span class="s"&gt;    ) r&lt;/span&gt;
&lt;span class="s"&gt;EOF&lt;/span&gt;
&lt;span class="o"&gt;)&lt;/span&gt; &amp;gt;&amp;gt; ./data/data.js
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That&amp;#8217;s the whole &lt;span class="caps"&gt;ETL&lt;/span&gt; process! Next time, I&amp;#8217;ll cover the d3.js&amp;nbsp;viz.&lt;/p&gt;</content><category term="postgresql"></category><category term="d3"></category><category term="javascript"></category><category term="svg"></category></entry><entry><title>Plotting the Czech Cadastre Land Use with d3: Data Transformation (part II)</title><link href="https://www.zimmi.cz/posts/2016/plotting-czech-cadastre-land-use-with-d3-data-transformation-part-ii" rel="alternate"></link><published>2016-11-14T18:30:00+01:00</published><updated>2016-11-14T18:30:00+01:00</updated><author><name>Michal Zimmermann</name></author><id>tag:www.zimmi.cz,2016-11-14:/posts/2016/plotting-czech-cadastre-land-use-with-d3-data-transformation-part-ii</id><summary type="html">&lt;p&gt;This post is the second part of the series summarizing the process of visualizing landuse data with bash, PostgreSQL and d3.js. Read other&amp;nbsp;parts:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://www.zimmi.cz/posts/2016/plotting-czech-cadastre-land-use-with-d3-data-extraction-part-i"&gt;Plotting the Czech Cadastre Land Use with d3: Data Extraction (part&amp;nbsp;I)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;you&amp;#8217;re reading it&amp;nbsp;now&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.zimmi.cz/posts/2016/plotting-czech-cadastre-land-use-with-d3-data-load-part-iii/"&gt;Plotting the Czech Cadastre Land Use with d3 …&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;This post is the second part of the series summarizing the process of visualizing landuse data with bash, PostgreSQL and d3.js. Read other&amp;nbsp;parts:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://www.zimmi.cz/posts/2016/plotting-czech-cadastre-land-use-with-d3-data-extraction-part-i"&gt;Plotting the Czech Cadastre Land Use with d3: Data Extraction (part&amp;nbsp;I)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;you&amp;#8217;re reading it&amp;nbsp;now&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.zimmi.cz/posts/2016/plotting-czech-cadastre-land-use-with-d3-data-load-part-iii/"&gt;Plotting the Czech Cadastre Land Use with d3: Data Transformation (part &lt;span class="caps"&gt;III&lt;/span&gt;)&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;&lt;span class="caps"&gt;ETL&lt;/span&gt;&amp;nbsp;process&lt;/h2&gt;
&lt;p&gt;Before the d3 viz can be crafted, it&amp;#8217;s necessary&amp;nbsp;to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;extract &lt;span class="caps"&gt;CSV&lt;/span&gt; data from the URLs provided via the Atom&amp;nbsp;feed&lt;/li&gt;
&lt;li&gt;transform those data into a relational database, do some&amp;nbsp;math&lt;/li&gt;
&lt;li&gt;load data into a d3.js&amp;nbsp;viz&lt;/li&gt;
&lt;li&gt;profit (as&amp;nbsp;usual)&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Extract&lt;/h3&gt;
&lt;p&gt;See &lt;a href="{filename}../2016/plotting-czech-cadastre-landuse-with-d3-part-i.md"&gt;Plotting the Czech Cadastre Land Use with d3: Data Extraction (part I)&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Transform&lt;/h3&gt;
&lt;p&gt;Last time, I extracted the data from multiple &lt;span class="caps"&gt;CSV&lt;/span&gt; files to separate PostgreSQL tables named by &lt;code&gt;data_YYYYMMDD&lt;/code&gt; pattern. My current goal is to transform it into the one big &lt;code&gt;data&lt;/code&gt; table, where each row represents one cadastral area. Here&amp;#8217;s what I&amp;#8217;m trying to&amp;nbsp;achieve:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;-&lt;span class="o"&gt;[&lt;/span&gt; RECORD &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;----------+----------------------------------
ku_kod                 &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;600881&lt;/span&gt;
ku_nazev               &lt;span class="p"&gt;|&lt;/span&gt; Bantice
celkova_vymera         &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;3763255&lt;/span&gt;,3763255,3763256,3763256&lt;span class="o"&gt;}&lt;/span&gt;
celkovy_pocet_parcel   &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;670&lt;/span&gt;,668,664,667&lt;span class="o"&gt;}&lt;/span&gt;
chmelnice_pp           &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;,0,0,0&lt;span class="o"&gt;}&lt;/span&gt;
chmelnice_pp_r         &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.00,0.00,0.00,0.00&lt;span class="o"&gt;}&lt;/span&gt;
chmelnice_v            &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;,0,0,0&lt;span class="o"&gt;}&lt;/span&gt;
chmelnice_v_avg        &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;,0,0,0&lt;span class="o"&gt;}&lt;/span&gt;
chmelnice_v_r          &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.00,0.00,0.00,0.00&lt;span class="o"&gt;}&lt;/span&gt;
lesni_pozemek_pp       &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;25&lt;/span&gt;,25,25,25&lt;span class="o"&gt;}&lt;/span&gt;
lesni_pozemek_pp_r     &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.73,3.74,3.77,3.75&lt;span class="o"&gt;}&lt;/span&gt;
lesni_pozemek_v        &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;83879&lt;/span&gt;,83879,83879,83879&lt;span class="o"&gt;}&lt;/span&gt;
lesni_pozemek_v_avg    &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;3355&lt;/span&gt;,3355,3355,3355&lt;span class="o"&gt;}&lt;/span&gt;
lesni_pozemek_v_r      &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.23,2.23,2.23,2.23&lt;span class="o"&gt;}&lt;/span&gt;
orna_puda_pp           &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;88&lt;/span&gt;,88,89,89&lt;span class="o"&gt;}&lt;/span&gt;
orna_puda_pp_r         &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;13&lt;/span&gt;.13,13.17,13.40,13.34&lt;span class="o"&gt;}&lt;/span&gt;
orna_puda_v            &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;3066230&lt;/span&gt;,3066230,3066230,3066230&lt;span class="o"&gt;}&lt;/span&gt;
orna_puda_v_avg        &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;34844&lt;/span&gt;,34844,34452,34452&lt;span class="o"&gt;}&lt;/span&gt;
orna_puda_v_r          &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;81&lt;/span&gt;.48,81.48,81.48,81.48&lt;span class="o"&gt;}&lt;/span&gt;
ostatni_plocha_pp      &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;201&lt;/span&gt;,199,199,201&lt;span class="o"&gt;}&lt;/span&gt;
ostatni_plocha_pp_r    &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;30&lt;/span&gt;.00,29.79,29.97,30.13&lt;span class="o"&gt;}&lt;/span&gt;
ostatni_plocha_v       &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;283468&lt;/span&gt;,283468,283468,284562&lt;span class="o"&gt;}&lt;/span&gt;
ostatni_plocha_v_avg   &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;1410&lt;/span&gt;,1424,1424,1416&lt;span class="o"&gt;}&lt;/span&gt;
ostatni_plocha_v_r     &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;7&lt;/span&gt;.53,7.53,7.53,7.56&lt;span class="o"&gt;}&lt;/span&gt;
ovocny_sad_pp          &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;,0,0,0&lt;span class="o"&gt;}&lt;/span&gt;
ovocny_sad_pp_r        &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.00,0.00,0.00,0.00&lt;span class="o"&gt;}&lt;/span&gt;
ovocny_sad_v           &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;,0,0,0&lt;span class="o"&gt;}&lt;/span&gt;
ovocny_sad_v_avg       &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;,0,0,0&lt;span class="o"&gt;}&lt;/span&gt;
ovocny_sad_v_r         &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.00,0.00,0.00,0.00&lt;span class="o"&gt;}&lt;/span&gt;
ttp_pp                 &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;44&lt;/span&gt;,44,44,45&lt;span class="o"&gt;}&lt;/span&gt;
ttp_pp_r               &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;.57,6.59,6.63,6.75&lt;span class="o"&gt;}&lt;/span&gt;
ttp_v                  &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;49002&lt;/span&gt;,49002,49002,47908&lt;span class="o"&gt;}&lt;/span&gt;
ttp_v_avg              &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;1114&lt;/span&gt;,1114,1114,1065&lt;span class="o"&gt;}&lt;/span&gt;
ttp_v_r                &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.30,1.30,1.30,1.27&lt;span class="o"&gt;}&lt;/span&gt;
vinice_pp              &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;,1,1,1&lt;span class="o"&gt;}&lt;/span&gt;
vinice_pp_r            &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.15,0.15,0.15,0.15&lt;span class="o"&gt;}&lt;/span&gt;
vinice_v               &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;106178&lt;/span&gt;,106178,106178,106178&lt;span class="o"&gt;}&lt;/span&gt;
vinice_v_avg           &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;106178&lt;/span&gt;,106178,106178,106178&lt;span class="o"&gt;}&lt;/span&gt;
vinice_v_r             &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.82,2.82,2.82,2.82&lt;span class="o"&gt;}&lt;/span&gt;
vodni_plocha_pp        &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;23&lt;/span&gt;,23,23,23&lt;span class="o"&gt;}&lt;/span&gt;
vodni_plocha_pp_r      &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.43,3.44,3.46,3.45&lt;span class="o"&gt;}&lt;/span&gt;
vodni_plocha_v         &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;27877&lt;/span&gt;,27877,27877,27877&lt;span class="o"&gt;}&lt;/span&gt;
vodni_plocha_v_avg     &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;1212&lt;/span&gt;,1212,1212,1212&lt;span class="o"&gt;}&lt;/span&gt;
vodni_plocha_v_r       &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.74,0.74,0.74,0.74&lt;span class="o"&gt;}&lt;/span&gt;
zahrada_pp             &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;115&lt;/span&gt;,115,115,115&lt;span class="o"&gt;}&lt;/span&gt;
zahrada_pp_r           &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;17&lt;/span&gt;.16,17.22,17.32,17.24&lt;span class="o"&gt;}&lt;/span&gt;
zahrada_v              &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;77381&lt;/span&gt;,77381,77353,77353&lt;span class="o"&gt;}&lt;/span&gt;
zahrada_v_avg          &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;673&lt;/span&gt;,673,673,673&lt;span class="o"&gt;}&lt;/span&gt;
zahrada_v_r            &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.06,2.06,2.06,2.06&lt;span class="o"&gt;}&lt;/span&gt;
zastavena_plocha_pp    &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;173&lt;/span&gt;,173,168,168&lt;span class="o"&gt;}&lt;/span&gt;
zastavena_plocha_pp_r  &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;25&lt;/span&gt;.82,25.90,25.30,25.19&lt;span class="o"&gt;}&lt;/span&gt;
zastavena_plocha_v     &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;69240&lt;/span&gt;,69240,69269,69269&lt;span class="o"&gt;}&lt;/span&gt;
zastavena_plocha_v_avg &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;400&lt;/span&gt;,400,412,412&lt;span class="o"&gt;}&lt;/span&gt;
zastavena_plocha_v_r   &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.84,1.84,1.84,1.84&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Several stats were calculated for each land use category (vinice &amp;rarr; vineyard, ovocny_sad &amp;rarr; orchard,&amp;nbsp;&amp;#8230;):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;v_r&lt;/code&gt; suffix stands for land use area&amp;nbsp;ratio&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pp_r&lt;/code&gt; suffix stands for land use parcel count&amp;nbsp;ratio&lt;/li&gt;
&lt;li&gt;&lt;code&gt;v_avg&lt;/code&gt; stands for average parcel&amp;nbsp;area&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All statistical columns are kept as PostgreSQL &lt;code&gt;ARRAY&lt;/code&gt;s, ordered by dates (very handy for the future d3.js viz by the&amp;nbsp;way).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note that since the &lt;code&gt;FULL OUTER JOIN&lt;/code&gt; is needed in the next step, SQLite can&amp;#8217;t be used. Pity&amp;nbsp;though.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The whole transformation bash script is the&amp;nbsp;plain:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;

psql -qAt --no-psqlrc -f transform.sql &lt;span class="p"&gt;|&lt;/span&gt; psql -qAt --no-psqlrc
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;transform.sql&lt;/code&gt; file is used to build the dynamic &lt;span class="caps"&gt;SQL&lt;/span&gt; query, which - once built - is piped to another &lt;code&gt;psql&lt;/code&gt; command. I admit, pipes are super&amp;nbsp;awesome.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;WITH&lt;/span&gt; &lt;span class="n"&gt;tables&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="c1"&gt;-- FULL OUTER JOIN all the data_YYYYMMDD tables&lt;/span&gt;
&lt;span class="k"&gt;SELECT&lt;/span&gt;
    &lt;span class="k"&gt;table_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;table_schema&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;d&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="n"&gt;tbl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;CASE&lt;/span&gt; &lt;span class="k"&gt;WHEN&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;THEN&lt;/span&gt; &lt;span class="n"&gt;table_schema&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;.&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="k"&gt;table_name&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39; d&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;
        &lt;span class="k"&gt;ELSE&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;FULL OUTER JOIN &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;table_schema&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;.&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="k"&gt;table_name&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39; d&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39; ON (d1.ku_kod = d&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;.ku_kod)&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;END&lt;/span&gt; &lt;span class="n"&gt;tbl_join&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="k"&gt;SELECT&lt;/span&gt;
        &lt;span class="k"&gt;table_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;table_schema&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;row_number&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="n"&gt;OVER&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;ORDER&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="k"&gt;table_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;
    &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;information_schema&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tables&lt;/span&gt;
    &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="k"&gt;table_name&lt;/span&gt; &lt;span class="k"&gt;LIKE&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;data_%&amp;#39;&lt;/span&gt;
        &lt;span class="k"&gt;AND&lt;/span&gt; &lt;span class="n"&gt;table_type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;BASE TABLE&amp;#39;&lt;/span&gt;
        &lt;span class="k"&gt;AND&lt;/span&gt; &lt;span class="n"&gt;table_schema&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;public&amp;#39;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;-- create data table with the correct values order for each statistical column&lt;/span&gt;
&lt;span class="c1"&gt;-- note that the whole process would crash if d1.ku_kod would be NULL -&amp;gt; @todo fix me&lt;/span&gt;
&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;DROP TABLE IF EXISTS data;&lt;/span&gt;
&lt;span class="s1"&gt;    CREATE TABLE data AS&lt;/span&gt;
&lt;span class="s1"&gt;    SELECT d1.ku_kod, d1.ku_nazev,&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;UNION&lt;/span&gt; &lt;span class="k"&gt;ALL&lt;/span&gt;
&lt;span class="k"&gt;SELECT&lt;/span&gt;
    &lt;span class="n"&gt;array_to_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;array_agg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;, &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="k"&gt;SELECT&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;ARRAY[&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;array_to_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;array_agg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tables&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tbl&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;.&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;columns&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;column_name&lt;/span&gt; &lt;span class="k"&gt;ORDER&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="n"&gt;tables&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;table_name&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;, &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;]&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39; &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;columns&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;column_name&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;
    &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;tables&lt;/span&gt;
    &lt;span class="k"&gt;JOIN&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="k"&gt;SELECT&lt;/span&gt;
        &lt;span class="n"&gt;table_schema&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="k"&gt;table_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="k"&gt;column_name&lt;/span&gt;
    &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;information_schema&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;columns&lt;/span&gt;
    &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="k"&gt;column_name&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;LIKE&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ku_%&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;ORDER&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="n"&gt;ordinal_position&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;columns&lt;/span&gt;
    &lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tables&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;table_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;columns&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;table_name&lt;/span&gt; &lt;span class="k"&gt;AND&lt;/span&gt; &lt;span class="n"&gt;columns&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;table_schema&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tables&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;table_schema&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;GROUP&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="n"&gt;columns&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;column_name&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;span class="k"&gt;UNION&lt;/span&gt; &lt;span class="k"&gt;ALL&lt;/span&gt;
&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;FROM&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;UNION&lt;/span&gt; &lt;span class="k"&gt;ALL&lt;/span&gt;
&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;tbl_join&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;tables&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;psql -qAt --no-psqlrc -f transform.sql&lt;/code&gt; builds the actual query from the query above, &lt;code&gt;| psql -qAt --no-psqlrc&lt;/code&gt; sends it to the database again. This part was really fun to&amp;nbsp;implement!&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m still considering to store diff values instead of absolute values in those &lt;code&gt;ARRAY&lt;/code&gt;s - that would save some serious&amp;nbsp;bandwidth!&lt;/p&gt;
&lt;h2&gt;Load&lt;/h2&gt;
&lt;p&gt;See &lt;a href="https://www.zimmi.cz/posts/2016/plotting-czech-cadastre-land-use-with-d3-data-load-part-iii/"&gt;Plotting the Czech Cadastre Land Use with d3: Data Transformation (part &lt;span class="caps"&gt;III&lt;/span&gt;)&lt;/a&gt;.&lt;/p&gt;</content><category term="javascript"></category><category term="d3"></category><category term="postgresql"></category><category term="svg"></category></entry><entry><title>Plotting the Czech Cadastre Land Use with d3: Data Extraction (part I)</title><link href="https://www.zimmi.cz/posts/2016/plotting-czech-cadastre-land-use-with-d3-data-extraction-part-i" rel="alternate"></link><published>2016-11-13T18:30:00+01:00</published><updated>2016-11-13T18:30:00+01:00</updated><author><name>Michal Zimmermann</name></author><id>tag:www.zimmi.cz,2016-11-13:/posts/2016/plotting-czech-cadastre-land-use-with-d3-data-extraction-part-i</id><summary type="html">&lt;p&gt;This post is the first part of the upcoming series summarizing the process of visualizing landuse data with bash, PostgreSQL and d3.js. Read other&amp;nbsp;parts:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;you&amp;#8217;re reading it&amp;nbsp;now&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.zimmi.cz/posts/2016/plotting-czech-cadastre-land-use-with-d3-data-transformation-part-ii"&gt;Plotting the Czech Cadastre Land Use with d3: Data Transformation (part &lt;span class="caps"&gt;II&lt;/span&gt;)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.zimmi.cz/posts/2016/plotting-czech-cadastre-land-use-with-d3-data-load-part-iii/"&gt;Plotting the Czech Cadastre Land Use with …&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;This post is the first part of the upcoming series summarizing the process of visualizing landuse data with bash, PostgreSQL and d3.js. Read other&amp;nbsp;parts:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;you&amp;#8217;re reading it&amp;nbsp;now&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.zimmi.cz/posts/2016/plotting-czech-cadastre-land-use-with-d3-data-transformation-part-ii"&gt;Plotting the Czech Cadastre Land Use with d3: Data Transformation (part &lt;span class="caps"&gt;II&lt;/span&gt;)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.zimmi.cz/posts/2016/plotting-czech-cadastre-land-use-with-d3-data-load-part-iii/"&gt;Plotting the Czech Cadastre Land Use with d3: Data Transformation (part &lt;span class="caps"&gt;III&lt;/span&gt;)&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href="http://cuzk.cz/en"&gt;Czech Office for Surveying, Mapping and Cadastre&lt;/a&gt; has recently published lot of data via &lt;a href="http://atom.cuzk.cz"&gt;Atom feed&lt;/a&gt;. There&amp;#8217;s pretty small and a bit boring dataset included, featuring quarterly updated landuse-related values for all 13,091 cadastral&amp;nbsp;areas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;absolute number of land lots within given category (arable land, forests,&amp;nbsp;etc.)&lt;/li&gt;
&lt;li&gt;absolute area of land lots within given&amp;nbsp;category&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Data are published as &lt;span class="caps"&gt;CSV&lt;/span&gt; files linked from the Atom feed. Sadly, they come windows-1250 encoded, using Windows line endings, with trailing semicolons and header rows using&amp;nbsp;diacritics.&lt;/p&gt;
&lt;h2&gt;&lt;span class="caps"&gt;ETL&lt;/span&gt;&amp;nbsp;process&lt;/h2&gt;
&lt;p&gt;Before the d3 viz can be crafted, it&amp;#8217;s necessary&amp;nbsp;to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;extract &lt;span class="caps"&gt;CSV&lt;/span&gt; data from the URLs provided via the Atom&amp;nbsp;feed&lt;/li&gt;
&lt;li&gt;transform those data into a relational database, do some&amp;nbsp;math&lt;/li&gt;
&lt;li&gt;load data into a d3.js&amp;nbsp;viz&lt;/li&gt;
&lt;li&gt;profit (as&amp;nbsp;usual)&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Extract&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="c1"&gt;# extract.sh -f YYYYMMDD&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="nv"&gt;$#&lt;/span&gt; -gt &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;
&lt;span class="k"&gt;do&lt;/span&gt;
&lt;span class="nv"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nv"&gt;$key&lt;/span&gt; in
    -f&lt;span class="p"&gt;|&lt;/span&gt;--file&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;FILE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$2&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
    &lt;span class="nb"&gt;shift&lt;/span&gt; &lt;span class="c1"&gt;# past argument&lt;/span&gt;
    &lt;span class="p"&gt;;;&lt;/span&gt;
    *&lt;span class="o"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;# unknown option&lt;/span&gt;
    &lt;span class="p"&gt;;;&lt;/span&gt;
&lt;span class="k"&gt;esac&lt;/span&gt;
&lt;span class="nb"&gt;shift&lt;/span&gt; &lt;span class="c1"&gt;# past argument or value&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;

&lt;span class="nv"&gt;URL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;http://services.cuzk.cz/sestavy/UHDP/UHDP-
&lt;span class="nv"&gt;CSVFILE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$FILE&lt;/span&gt;.csv
&lt;span class="nv"&gt;CSVUTF8FILE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;CSVFILE&lt;/span&gt;&lt;span class="p"&gt;%.*&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;.utf.csv
&lt;span class="nv"&gt;URL&lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="nv"&gt;$CSVFILE&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;downloading &lt;/span&gt;&lt;span class="nv"&gt;$URL&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
wget -q &lt;span class="nv"&gt;$URL&lt;/span&gt; -O &lt;span class="nv"&gt;$CSVFILE&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="nv"&gt;$?&lt;/span&gt; !&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
    rm -f &lt;span class="nv"&gt;$CSVFILE&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;download failed&amp;quot;&lt;/span&gt;
    &lt;span class="nb"&gt;exit&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;converting to utf-8&amp;quot;&lt;/span&gt;
iconv -f WINDOWS-1250 -t UTF-8 &lt;span class="nv"&gt;$CSVFILE&lt;/span&gt; -o &lt;span class="nv"&gt;$CSVUTF8FILE&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;modifying &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;FILE&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
sed -i &lt;span class="s1"&gt;&amp;#39;s/^M$//&amp;#39;&lt;/span&gt; &lt;span class="nv"&gt;$CSVUTF8FILE&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
sed -i &lt;span class="s1"&gt;&amp;#39;s/\r$//&amp;#39;&lt;/span&gt; &lt;span class="nv"&gt;$CSVUTF8FILE&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
sed -i &lt;span class="s1"&gt;&amp;#39;s/;*$//g&amp;#39;&lt;/span&gt; &lt;span class="nv"&gt;$CSVUTF8FILE&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
sed -i &lt;span class="s1"&gt;&amp;#39;1d&amp;#39;&lt;/span&gt; &lt;span class="nv"&gt;$CSVUTF8FILE&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;importing to database&amp;quot;&lt;/span&gt;
sed -e &lt;span class="s2"&gt;&amp;quot;s/\${DATE}/&lt;/span&gt;&lt;span class="nv"&gt;$FILE&lt;/span&gt;&lt;span class="s2"&gt;/g&amp;quot;&lt;/span&gt; extract.sql &lt;span class="p"&gt;|&lt;/span&gt; psql -qAt --no-psqlrc

rm &lt;span class="nv"&gt;$CSVFILE&lt;/span&gt; &lt;span class="nv"&gt;$CSVUTF8FILE&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This script downloads &lt;span class="caps"&gt;CSV&lt;/span&gt; file, deals with all the pitfalls mentioned above and, when done, &lt;code&gt;copy&lt;/code&gt; command within &lt;code&gt;extract.sql&lt;/code&gt; loads the data into a &lt;code&gt;data_YYYYMMDD&lt;/code&gt; table. Putting all the files into the one table would have saved me a lot of transformation &lt;span class="caps"&gt;SQL&lt;/span&gt;, yet it didn&amp;#8217;t feel quite right&amp;nbsp;though.&lt;/p&gt;
&lt;h2&gt;Transform&lt;/h2&gt;
&lt;p&gt;See &lt;a href="https://www.zimmi.cz/posts/2016/plotting-czech-cadastre-land-use-with-d3-data-transformation-part-ii"&gt;Plotting the Czech Cadastre Land Use with d3: Data Transformation (part &lt;span class="caps"&gt;II&lt;/span&gt;)&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Load&lt;/h2&gt;
&lt;p&gt;See &lt;a href="https://www.zimmi.cz/posts/2016/plotting-czech-cadastre-land-use-with-d3-data-load-part-iii/"&gt;Plotting the Czech Cadastre Land Use with d3: Data Transformation (part &lt;span class="caps"&gt;III&lt;/span&gt;)&lt;/a&gt;.&lt;/p&gt;</content><category term="javascript"></category><category term="d3"></category><category term="postgresql"></category><category term="svg"></category></entry><entry><title>Introducing Blind Maps Project</title><link href="https://www.zimmi.cz/posts/2016/introducing-blind-maps-project/" rel="alternate"></link><published>2016-11-02T18:30:00+01:00</published><updated>2016-11-02T18:30:00+01:00</updated><author><name>Michal Zimmermann</name></author><id>tag:www.zimmi.cz,2016-11-02:/posts/2016/introducing-blind-maps-project/</id><summary type="html">&lt;p&gt;I&amp;#8217;d like to introduce you to my little pet project, which might just as well be awarded &lt;em&gt;the first pet project I&amp;#8217;ve ever completed&lt;/em&gt;, called &lt;a href="https://www.zimmi.cz/blind-maps"&gt;Blind maps&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s a very simple, yet useful web application built on top of the great &lt;a href="../../tag/leaflet.html"&gt;Leaflet&lt;/a&gt; library meant to help you …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I&amp;#8217;d like to introduce you to my little pet project, which might just as well be awarded &lt;em&gt;the first pet project I&amp;#8217;ve ever completed&lt;/em&gt;, called &lt;a href="https://www.zimmi.cz/blind-maps"&gt;Blind maps&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s a very simple, yet useful web application built on top of the great &lt;a href="../../tag/leaflet.html"&gt;Leaflet&lt;/a&gt; library meant to help you get to know our world a bit better. As the name suggests, the app shows you, well&amp;hellip; a blind map, and you try to fill as many features as you&amp;nbsp;can.&lt;/p&gt;
&lt;div class="text-center"&gt;&lt;img data-echo="/posts/assets/introducing-blind-maps-project/map.png" /&gt;&lt;/div&gt;

&lt;p&gt;The app is ready and can be&amp;nbsp;used:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;online at &lt;a href="https://www.zimmi.cz/blind-maps/"&gt;Blind maps&lt;/a&gt; with the map of your choice (if&amp;nbsp;available)&lt;/li&gt;
&lt;li&gt;offline, downloaded to your computer and filled with whatever data you&amp;nbsp;want&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What I find great about this project is the ease of adding new dataset. For starters, I filled it with data coming from &lt;a href="naturalearthdata.com"&gt;Natural Earth&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class="caps"&gt;CONUS&lt;/span&gt;&amp;nbsp;states&lt;/li&gt;
&lt;li&gt;European&amp;nbsp;states&lt;/li&gt;
&lt;li&gt;World&amp;nbsp;capitals&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you wish, feel free to send me a pull request with GeoJSON data, I&amp;#8217;ll be happy to have more datasets available! The process is described at the &lt;a href="https://www.zimmi.cz/blind-maps"&gt;project homepage&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As you notice at the project homepage, there are two versions of the game&amp;nbsp;available:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;one lets you find map features by their&amp;nbsp;names&lt;/li&gt;
&lt;li&gt;the other one lets you type name highlighted feature (much&amp;nbsp;tougher)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Have&amp;nbsp;fun!&lt;/p&gt;</content><category term="javascript"></category><category term="leaflet"></category></entry><entry><title>Degrees To Decimal With Javascript Reworked</title><link href="https://www.zimmi.cz/posts/2016/degrees-to-decimal-with-javascript-reworked/" rel="alternate"></link><published>2016-10-28T16:00:00+02:00</published><updated>2016-10-28T16:00:00+02:00</updated><author><name>Michal Zimmermann</name></author><id>tag:www.zimmi.cz,2016-10-28:/posts/2016/degrees-to-decimal-with-javascript-reworked/</id><summary type="html">&lt;p&gt;Two years ago I was pretty happy with &lt;a href="https://www.zimmi.cz/posts/2014/degrees-to-decimal-with-javascript/"&gt;this little piece of code to transform degrees to the decimal value&lt;/a&gt;. Yesterday, I found a neater way to do the&amp;nbsp;same:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;deg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;degToDec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prev&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;cur&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;curIndex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;prev&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;cur&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;curIndex&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;deg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;degToDec …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Two years ago I was pretty happy with &lt;a href="https://www.zimmi.cz/posts/2014/degrees-to-decimal-with-javascript/"&gt;this little piece of code to transform degrees to the decimal value&lt;/a&gt;. Yesterday, I found a neater way to do the&amp;nbsp;same:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;deg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;degToDec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prev&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;cur&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;curIndex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;prev&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;cur&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;curIndex&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;deg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;degToDec&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Once you have an input array, that&amp;#8217;s pretty much it. Love&amp;nbsp;JavaScript.&lt;/p&gt;</content><category term="javascript"></category></entry><entry><title>Ogrinfo Output Formatting</title><link href="https://www.zimmi.cz/posts/2016/ogrinfo-output-formatting/" rel="alternate"></link><published>2016-10-21T23:00:00+02:00</published><updated>2016-10-21T23:00:00+02:00</updated><author><name>Michal Zimmermann</name></author><id>tag:www.zimmi.cz,2016-10-21:/posts/2016/ogrinfo-output-formatting/</id><summary type="html">&lt;p&gt;Today my workmate asked if there was a way to see an attribute table other than importing spatial data into a PostGIS database. I told him about &lt;span class="caps"&gt;QGIS&lt;/span&gt; and while talking about other &lt;span class="caps"&gt;GIS&lt;/span&gt; stuff, I started thinking about &lt;em&gt;pipes&lt;/em&gt; and how awesome it would be to actually format the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Today my workmate asked if there was a way to see an attribute table other than importing spatial data into a PostGIS database. I told him about &lt;span class="caps"&gt;QGIS&lt;/span&gt; and while talking about other &lt;span class="caps"&gt;GIS&lt;/span&gt; stuff, I started thinking about &lt;em&gt;pipes&lt;/em&gt; and how awesome it would be to actually format the output of the &lt;code&gt;ogrinfo&lt;/code&gt; command.&lt;/p&gt;
&lt;p&gt;Here it is. It is just a much longer way to do &lt;code&gt;ogr2ogr -f "CSV" dest source&lt;/code&gt;, but sometimes you just have to experiment a&amp;nbsp;bit.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="nv"&gt;FILE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;

&lt;span class="k"&gt;function&lt;/span&gt; columns &lt;span class="o"&gt;{&lt;/span&gt;
    ogrinfo &lt;span class="nv"&gt;$FILE&lt;/span&gt; -al -so &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    sed &lt;span class="s1"&gt;&amp;#39;/Column/,$!d&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    sed &lt;span class="s1"&gt;&amp;#39;/Geometry Column/d&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    sed -e &lt;span class="s1"&gt;&amp;#39;s/Column =/\:/g&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    awk -F: &lt;span class="s1"&gt;&amp;#39;{print $1}&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    awk -v &lt;span class="nv"&gt;RS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; -v &lt;span class="nv"&gt;OFS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;|&amp;quot;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{$1 = $1} 1&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;function&lt;/span&gt; data &lt;span class="o"&gt;{&lt;/span&gt;
   ogrinfo &lt;span class="nv"&gt;$FILE&lt;/span&gt; -al &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
   sed &lt;span class="s1"&gt;&amp;#39;/OGRFeature/,$!d&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
   sed &lt;span class="s1"&gt;&amp;#39;/POLYGON\|LINESTRING\|POINT/ d&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
   sed -e &lt;span class="s1"&gt;&amp;#39;s/OGRFeature\(.*\)\://g&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
   sed -e &lt;span class="s1"&gt;&amp;#39;s/.*\s*\(.*\)\s*=\s*//g&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
   awk -v &lt;span class="nv"&gt;RS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; -v &lt;span class="nv"&gt;OFS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;|&amp;quot;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{$1 = $1} 1&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;{&lt;/span&gt; columns&lt;span class="p"&gt;;&lt;/span&gt; data&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The result can be piped to other &lt;code&gt;bash&lt;/code&gt; functions, such as &lt;code&gt;less&lt;/code&gt; or &lt;code&gt;more&lt;/code&gt;. I call it &lt;code&gt;ogrinfotable&lt;/code&gt;.&lt;/p&gt;</content><category term="gdal"></category></entry><entry><title>PostGIS Custom Function to Create Wind Rose</title><link href="https://www.zimmi.cz/posts/2016/postgis-custom-function-to-create-wind-rose/" rel="alternate"></link><published>2016-09-01T22:00:00+02:00</published><updated>2016-09-01T22:00:00+02:00</updated><author><name>Michal Zimmermann</name></author><id>tag:www.zimmi.cz,2016-09-01:/posts/2016/postgis-custom-function-to-create-wind-rose/</id><summary type="html">&lt;p&gt;I&amp;#8217;ve come across the &lt;a href="http://gis.stackexchange.com/questions/208797/draw-wind-rose-with-qgis-from-postgis/"&gt;beautiful &lt;span class="caps"&gt;GIS&lt;/span&gt; StackExchange question&lt;/a&gt; recently, asking how to draw a &lt;a href="https://en.wikipedia.org/wiki/Wind_rose"&gt;wind rose&lt;/a&gt; within&amp;nbsp;PostGIS.&lt;/p&gt;
&lt;div class="text-center"&gt;
&lt;img data-echo="http://i.stack.imgur.com/0xAMU.png"&gt;
&lt;/div&gt;

&lt;p&gt;It&amp;#8217;s pretty easy to accomplish this with a custom &lt;span class="caps"&gt;PLPGSQL&lt;/span&gt; procedure below, that takes line geometry, number of sections and radius of the inner circle as&amp;nbsp;parameters.&lt;/p&gt;
&lt;!-- codeblock --&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;OR&lt;/span&gt; &lt;span class="k"&gt;REPLACE …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;I&amp;#8217;ve come across the &lt;a href="http://gis.stackexchange.com/questions/208797/draw-wind-rose-with-qgis-from-postgis/"&gt;beautiful &lt;span class="caps"&gt;GIS&lt;/span&gt; StackExchange question&lt;/a&gt; recently, asking how to draw a &lt;a href="https://en.wikipedia.org/wiki/Wind_rose"&gt;wind rose&lt;/a&gt; within&amp;nbsp;PostGIS.&lt;/p&gt;
&lt;div class="text-center"&gt;
&lt;img data-echo="http://i.stack.imgur.com/0xAMU.png"&gt;
&lt;/div&gt;

&lt;p&gt;It&amp;#8217;s pretty easy to accomplish this with a custom &lt;span class="caps"&gt;PLPGSQL&lt;/span&gt; procedure below, that takes line geometry, number of sections and radius of the inner circle as&amp;nbsp;parameters.&lt;/p&gt;
&lt;!-- codeblock --&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;OR&lt;/span&gt; &lt;span class="k"&gt;REPLACE&lt;/span&gt; &lt;span class="k"&gt;FUNCTION&lt;/span&gt; &lt;span class="n"&gt;ST_WindRose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="n"&gt;geometry&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;directions&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;radius&lt;/span&gt; &lt;span class="nb"&gt;numeric&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;RETURNS&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="nb"&gt;integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;geom&lt;/span&gt; &lt;span class="n"&gt;geometry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LINESTRING&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;ST_WindRose$&lt;/span&gt;
&lt;span class="k"&gt;BEGIN&lt;/span&gt;
    &lt;span class="k"&gt;IF&lt;/span&gt; &lt;span class="n"&gt;directions&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;THEN&lt;/span&gt;
        &lt;span class="n"&gt;RAISE&lt;/span&gt; &lt;span class="k"&gt;EXCEPTION&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Odd number of directions found, please provide even number of directions instead.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;END&lt;/span&gt; &lt;span class="k"&gt;IF&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;IF&lt;/span&gt; &lt;span class="n"&gt;radius&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ST_Length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;THEN&lt;/span&gt;
    &lt;span class="n"&gt;RAISE&lt;/span&gt; &lt;span class="k"&gt;EXCEPTION&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Inner circle radius is bigger than the wind rose diameter, please make it smaller.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;END&lt;/span&gt; &lt;span class="k"&gt;IF&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;RETURN&lt;/span&gt; &lt;span class="n"&gt;QUERY&lt;/span&gt;
&lt;span class="k"&gt;WITH&lt;/span&gt; &lt;span class="n"&gt;rose&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="k"&gt;SELECT&lt;/span&gt;
        &lt;span class="n"&gt;ST_Rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;radians&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;360&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;directions&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;dirs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ST_Centroid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_line&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="n"&gt;_line&lt;/span&gt;
    &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="n"&gt;_line&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
    &lt;span class="k"&gt;CROSS&lt;/span&gt; &lt;span class="k"&gt;JOIN&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;generate_series&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;directions&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;dirs&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;SELECT&lt;/span&gt;
    &lt;span class="n"&gt;row_number&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="n"&gt;OVER&lt;/span&gt; &lt;span class="p"&gt;()::&lt;/span&gt;&lt;span class="nb"&gt;integer&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;_line&lt;/span&gt; &lt;span class="n"&gt;geom&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;_line&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;rose&lt;/span&gt;
    &lt;span class="k"&gt;UNION&lt;/span&gt; &lt;span class="k"&gt;ALL&lt;/span&gt;
    &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;ST_ExteriorRing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ST_Buffer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ST_Centroid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;radius&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;-- inner circle&lt;/span&gt;
    &lt;span class="k"&gt;UNION&lt;/span&gt; &lt;span class="k"&gt;ALL&lt;/span&gt;
    &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;ST_ExteriorRing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ST_Buffer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ST_Centroid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;ST_Length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;-- outer circle&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;END&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;ST_WindRose$&lt;/span&gt;
&lt;span class="k"&gt;LANGUAGE&lt;/span&gt; &lt;span class="n"&gt;PLPGSQL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Wind rose created with this function might look like the one&amp;nbsp;below.&lt;/p&gt;
&lt;div class="text-center"&gt;
&lt;img data-echo="http://i.stack.imgur.com/4OD0J.png"&gt;
&lt;/div&gt;

&lt;p&gt;Run it as follows. The &lt;code&gt;line&lt;/code&gt; parameter should be a simple straight line made of just two&amp;nbsp;vertices.&lt;/p&gt;
&lt;!-- codeblock --&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;ST_WindRose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ST_MakeLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ST_MakePoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;ST_MakePoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;01&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="postgis"></category><category term="postgresql"></category><category term="sql"></category></entry><entry><title>PostGIS Custom Function to Create Polygon from Centroid</title><link href="https://www.zimmi.cz/posts/2016/postgis-custom-function-to-create-polygon-from-centroid/" rel="alternate"></link><published>2016-08-28T09:00:00+02:00</published><updated>2016-08-28T09:00:00+02:00</updated><author><name>Michal Zimmermann</name></author><id>tag:www.zimmi.cz,2016-08-28:/posts/2016/postgis-custom-function-to-create-polygon-from-centroid/</id><summary type="html">&lt;p&gt;Needed to create a polygon from a point defining its size in both axes, here&amp;#8217;s a little syntax sugar to make life&amp;nbsp;easier.&lt;/p&gt;
&lt;!-- codeblock --&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;OR&lt;/span&gt; &lt;span class="k"&gt;REPLACE&lt;/span&gt; &lt;span class="k"&gt;FUNCTION&lt;/span&gt; &lt;span class="n"&gt;ST_PolygonFromCentroid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;centroid&lt;/span&gt; &lt;span class="n"&gt;geometry&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;xsize&lt;/span&gt; &lt;span class="nb"&gt;numeric&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ysize&lt;/span&gt; &lt;span class="nb"&gt;numeric&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;RETURNS&lt;/span&gt; &lt;span class="n"&gt;geometry&lt;/span&gt;
&lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;ST_PolygonFromCentroid$&lt;/span&gt;
&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;ST_MakeEnvelope&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;ST_X&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ST_Translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
    &lt;span class="n"&gt;ST_Y&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ST_Translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="mi"&gt;2 …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Needed to create a polygon from a point defining its size in both axes, here&amp;#8217;s a little syntax sugar to make life&amp;nbsp;easier.&lt;/p&gt;
&lt;!-- codeblock --&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;OR&lt;/span&gt; &lt;span class="k"&gt;REPLACE&lt;/span&gt; &lt;span class="k"&gt;FUNCTION&lt;/span&gt; &lt;span class="n"&gt;ST_PolygonFromCentroid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;centroid&lt;/span&gt; &lt;span class="n"&gt;geometry&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;xsize&lt;/span&gt; &lt;span class="nb"&gt;numeric&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ysize&lt;/span&gt; &lt;span class="nb"&gt;numeric&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;RETURNS&lt;/span&gt; &lt;span class="n"&gt;geometry&lt;/span&gt;
&lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;ST_PolygonFromCentroid$&lt;/span&gt;
&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;ST_MakeEnvelope&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;ST_X&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ST_Translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
    &lt;span class="n"&gt;ST_Y&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ST_Translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
    &lt;span class="n"&gt;ST_X&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ST_Translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
    &lt;span class="n"&gt;ST_Y&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ST_Translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;ST_PolygonFromCentroid$&lt;/span&gt;
&lt;span class="k"&gt;LANGUAGE&lt;/span&gt; &lt;span class="k"&gt;SQL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Run it&amp;nbsp;as:&lt;/p&gt;
&lt;!-- codeblock --&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;ST_PolygonFromCentroid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ST_SetSRID&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ST_MakePoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;912&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;633&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="mi"&gt;4326&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="postgis"></category><category term="postgresql"></category><category term="sql"></category></entry><entry><title>Finding Polygons Lying across Other Polygons with PostGIS</title><link href="https://www.zimmi.cz/posts/2016/finding-polygons-lying-across-other-polygons-with-postgis/" rel="alternate"></link><published>2016-08-05T19:39:00+02:00</published><updated>2016-08-05T19:39:00+02:00</updated><author><name>Michal Zimmermann</name></author><id>tag:www.zimmi.cz,2016-08-05:/posts/2016/finding-polygons-lying-across-other-polygons-with-postgis/</id><summary type="html">&lt;p&gt;Doing overlays (&lt;code&gt;ST_Intersection()&lt;/code&gt;) in PostGIS based on spatial relationships (&lt;code&gt;ST_Intersects()&lt;/code&gt;, &lt;code&gt;ST_Contains()&lt;/code&gt;, &amp;hellip;) is so easy it is not something you get particularly excited&amp;nbsp;about.&lt;/p&gt;
&lt;p&gt;Today I faced a bit more interesting task: &lt;strong&gt;given two polygon layers, get me all the polygons from layer A such that they lie across the polygons …&lt;/strong&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Doing overlays (&lt;code&gt;ST_Intersection()&lt;/code&gt;) in PostGIS based on spatial relationships (&lt;code&gt;ST_Intersects()&lt;/code&gt;, &lt;code&gt;ST_Contains()&lt;/code&gt;, &amp;hellip;) is so easy it is not something you get particularly excited&amp;nbsp;about.&lt;/p&gt;
&lt;p&gt;Today I faced a bit more interesting task: &lt;strong&gt;given two polygon layers, get me all the polygons from layer A such that they lie across the polygons from layer B and&amp;hellip; a picture worth a thousand words,&amp;nbsp;right?&lt;/strong&gt;&lt;/p&gt;
&lt;div class="text-center"&gt;&lt;img data-echo="/posts/assets/finding-polygons-lying-across-other-polygons-with-postgis/polygons.svg" /&gt;&lt;/div&gt;

&lt;p&gt;I hope you got the idea, it is fairly&amp;nbsp;simple:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Intersect A (red, blue) with B&amp;nbsp;(green)&lt;/li&gt;
&lt;li&gt;Subtract the result of previous from layer&amp;nbsp;A&lt;/li&gt;
&lt;li&gt;Combine results from steps 1 and&amp;nbsp;2&lt;/li&gt;
&lt;li&gt;Keep polygon only if its id occurs more than twice (that means it went straight through the layer&amp;nbsp;B)&lt;/li&gt;
&lt;li&gt;Profit!&lt;/li&gt;
&lt;/ol&gt;
&lt;!-- codeblock --&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;WITH&lt;/span&gt; &lt;span class="n"&gt;overlays&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="cm"&gt;/* nothing fancy here */&lt;/span&gt;
    &lt;span class="k"&gt;SELECT&lt;/span&gt;
        &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ogc_fid&lt;/span&gt; &lt;span class="n"&gt;a_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ogc_fid&lt;/span&gt; &lt;span class="n"&gt;b_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;ST_Intersection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;geom&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;geom&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;geom&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;ST_Area&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ST_Intersection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;geom&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;geom&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;area_shared&lt;/span&gt;
    &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;
    &lt;span class="k"&gt;JOIN&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ST_Intersects&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;geom&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;geom&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="n"&gt;diffs&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="cm"&gt;/* note this is a 1:1 relationship in ST_Difference */&lt;/span&gt;
&lt;span class="cm"&gt;/* a little hack is needed to prevent PostGIS from returning its usual difference mess */&lt;/span&gt;
    &lt;span class="k"&gt;SELECT&lt;/span&gt;
        &lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;a_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ST_Dump&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ST_Difference&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ST_Buffer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;geom&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0001&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;geom&lt;/span&gt;&lt;span class="p"&gt;))).&lt;/span&gt;&lt;span class="n"&gt;geom&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;-- ugly hack&lt;/span&gt;
        &lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;area_shared&lt;/span&gt;
    &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;overlays&lt;/span&gt; &lt;span class="n"&gt;o&lt;/span&gt;
    &lt;span class="k"&gt;JOIN&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;a_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;),&lt;/span&gt;

&lt;span class="n"&gt;merged&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="cm"&gt;/* put those two result sets together */&lt;/span&gt;
    &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;overlays&lt;/span&gt;
    &lt;span class="k"&gt;UNION&lt;/span&gt; &lt;span class="k"&gt;ALL&lt;/span&gt;
    &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;diffs&lt;/span&gt;
&lt;span class="p"&gt;),&lt;/span&gt;

&lt;span class="n"&gt;merged_reduced&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="cm"&gt;/* get only those A polygons that consist of three parts at least for each intersection with B polygon */&lt;/span&gt;
  &lt;span class="k"&gt;SELECT&lt;/span&gt;
    &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;
  &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;merged&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;
  &lt;span class="k"&gt;JOIN&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="k"&gt;SELECT&lt;/span&gt;
      &lt;span class="n"&gt;a_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="n"&gt;b_id&lt;/span&gt;
    &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;merged&lt;/span&gt;
    &lt;span class="k"&gt;GROUP&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="n"&gt;a_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b_id&lt;/span&gt;
    &lt;span class="k"&gt;HAVING&lt;/span&gt; &lt;span class="k"&gt;COUNT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;a_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;a_id&lt;/span&gt; &lt;span class="k"&gt;AND&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="cm"&gt;/* do as you wish with the result */&lt;/span&gt;
&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;merged_reduced&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In my case, centerlines of layer B were also included and their length inside each intersection was used to divide the area of the smallest part with. It was fun,&amp;nbsp;actually.&lt;/p&gt;</content><category term="postgis"></category><category term="postgresql"></category><category term="sql"></category></entry><entry><title>Dead Simple Random Points in Polygons with PostGIS</title><link href="https://www.zimmi.cz/posts/2016/dead-simple-random-points-in-polygons-with-postgis/" rel="alternate"></link><published>2016-08-03T20:10:00+02:00</published><updated>2016-08-03T20:10:00+02:00</updated><author><name>Michal Zimmermann</name></author><id>tag:www.zimmi.cz,2016-08-03:/posts/2016/dead-simple-random-points-in-polygons-with-postgis/</id><summary type="html">&lt;p&gt;Since PostgreSQL 9.3 there has been a handy little keyword called &lt;code&gt;LATERAL&lt;/code&gt;, which - combined with &lt;code&gt;JOIN&lt;/code&gt; - might rock your &lt;span class="caps"&gt;GIS&lt;/span&gt; world in a second. To keep it simple, a &lt;code&gt;LATERAL JOIN&lt;/code&gt; enables a subquery in the &lt;code&gt;FROM&lt;/code&gt; part of a query to reference columns from preceding expressions in the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Since PostgreSQL 9.3 there has been a handy little keyword called &lt;code&gt;LATERAL&lt;/code&gt;, which - combined with &lt;code&gt;JOIN&lt;/code&gt; - might rock your &lt;span class="caps"&gt;GIS&lt;/span&gt; world in a second. To keep it simple, a &lt;code&gt;LATERAL JOIN&lt;/code&gt; enables a subquery in the &lt;code&gt;FROM&lt;/code&gt; part of a query to reference columns from preceding expressions in the &lt;code&gt;FROM&lt;/code&gt; list. What the&amp;nbsp;heck?&lt;/p&gt;
&lt;p&gt;Imagine that not so unusual request to &lt;strong&gt;generate random points in polygons&lt;/strong&gt; (something I needed to do today). Do it automatically without your favorite piece of desktop &lt;span class="caps"&gt;GIS&lt;/span&gt;&amp;nbsp;software.&lt;/p&gt;
&lt;p&gt;It is pretty easy using &lt;code&gt;LATERAL JOIN&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="k"&gt;VALUES&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;ST_SetSRID&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;ST_GeomFromText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="s1"&gt;&amp;#39;POLYGON((0 0, -1 0, -1 -1, 0 -1, 0 0))&amp;#39;&lt;/span&gt;
            &lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="mi"&gt;4326&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;UNION&lt;/span&gt; &lt;span class="k"&gt;ALL&lt;/span&gt;
    &lt;span class="k"&gt;VALUES&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;ST_SetSRID&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;ST_GeomFromText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="s1"&gt;&amp;#39;POLYGON((0 0, 1 0, 1 1, 0 1, 0 0))&amp;#39;&lt;/span&gt;
            &lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="mi"&gt;4326&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;geom&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;CROSS&lt;/span&gt; &lt;span class="k"&gt;JOIN&lt;/span&gt; &lt;span class="k"&gt;LATERAL&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;ST_SetSRID&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ST_MakePoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;4326&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;geom&lt;/span&gt;
    &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="k"&gt;SELECT&lt;/span&gt;
            &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ST_XMax&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;geom&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;ST_XMin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;geom&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;ST_XMin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;geom&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ST_YMax&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;geom&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;ST_YMin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;geom&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;ST_YMin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;geom&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;
        &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;generate_series&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;What actually happened over there? If you want to put points inside polygons, you need&amp;#8230; polygons. We will do just fine with two of them created inside this&amp;nbsp;query:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;VALUES&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;ST_SetSRID&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;ST_GeomFromText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;POLYGON((0 0, -1 0, -1 -1, 0 -1, 0 0))&amp;#39;&lt;/span&gt;
        &lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="mi"&gt;4326&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;UNION&lt;/span&gt; &lt;span class="k"&gt;ALL&lt;/span&gt;
&lt;span class="k"&gt;VALUES&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;ST_SetSRID&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;ST_GeomFromText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;POLYGON((0 0, 1 0, 1 1, 0 1, 0 0))&amp;#39;&lt;/span&gt;
        &lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="mi"&gt;4326&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;All the magic happens inside the &lt;code&gt;LATERAL JOIN&lt;/code&gt; part of the&amp;nbsp;query:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;CROSS&lt;/span&gt; &lt;span class="k"&gt;JOIN&lt;/span&gt; &lt;span class="k"&gt;LATERAL&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;ST_SetSRID&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ST_MakePoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;4326&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;geom&lt;/span&gt;
    &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="k"&gt;SELECT&lt;/span&gt;
            &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ST_XMax&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;geom&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;ST_XMin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;geom&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;ST_XMin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;geom&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ST_YMax&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;geom&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;ST_YMin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;geom&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;ST_YMin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;geom&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;
        &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;generate_series&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The inner &lt;code&gt;SELECT&lt;/code&gt; calculates random points based on the extent of the polygon. Note it directly calls &lt;code&gt;a.geom&lt;/code&gt;, a value that comes from the previous &lt;code&gt;SELECT&lt;/code&gt;! The &lt;code&gt;LATERAL JOIN&lt;/code&gt; part is thus run for every row of the previous &lt;code&gt;SELECT&lt;/code&gt; statement inside &lt;code&gt;FROM&lt;/code&gt; part of the query. This means it will return 201 points for each of the two polygons (run the query inside &lt;span class="caps"&gt;QGIS&lt;/span&gt; to see the&amp;nbsp;result).&lt;/p&gt;
&lt;p&gt;Note all the points fall inside the polygons by accident, because they are &lt;strong&gt;square&lt;/strong&gt;. Otherwise a &lt;code&gt;ST_Contains&lt;/code&gt; or &lt;code&gt;ST_Within&lt;/code&gt; should be used inside the outermost &lt;code&gt;WHERE&lt;/code&gt; query to filter outliers. This part could use some&amp;nbsp;tweaking.&lt;/p&gt;</content><category term="postgis"></category><category term="postgresql"></category><category term="sql"></category></entry><entry><title>Syncing Two PostgreSQL Databases Faster</title><link href="https://www.zimmi.cz/posts/2016/syncing-two-postgresql-databases-faster/" rel="alternate"></link><published>2016-07-17T19:10:00+02:00</published><updated>2016-07-17T19:10:00+02:00</updated><author><name>Michal Zimmermann</name></author><id>tag:www.zimmi.cz,2016-07-17:/posts/2016/syncing-two-postgresql-databases-faster/</id><summary type="html">&lt;p&gt;Imagine you run two database machines hosting structurally the same databases on two separate servers and you need to transfer data from one to another. Not very often, let&amp;#8217;s say once a month. Your tables aren&amp;#8217;t small nor huge, let&amp;#8217;s say millions rows in&amp;nbsp;general.&lt;/p&gt;
&lt;p&gt;You&amp;#8217;re …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Imagine you run two database machines hosting structurally the same databases on two separate servers and you need to transfer data from one to another. Not very often, let&amp;#8217;s say once a month. Your tables aren&amp;#8217;t small nor huge, let&amp;#8217;s say millions rows in&amp;nbsp;general.&lt;/p&gt;
&lt;p&gt;You&amp;#8217;re going to use &lt;code&gt;pg_dump&lt;/code&gt; and pipe it to &lt;code&gt;psql&lt;/code&gt;, but the indices on your tables will slow you down a&amp;nbsp;lot.&lt;/p&gt;
&lt;p&gt;That&amp;#8217;s why you&amp;#8217;ll want to drop all indices and constraints (&lt;code&gt;drop_indices_constraints.sql&lt;/code&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ALTER TABLE &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt;
    &lt;span class="n"&gt;tc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;table_schema&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;.&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt;
    &lt;span class="n"&gt;tc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;table_name&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39; DROP CONSTRAINT &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt;
    &lt;span class="n"&gt;tc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;constraint_name&lt;/span&gt;  &lt;span class="o"&gt;||&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;;&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;information_schema&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;table_constraints&lt;/span&gt; &lt;span class="n"&gt;tc&lt;/span&gt;
&lt;span class="k"&gt;JOIN&lt;/span&gt; &lt;span class="n"&gt;information_schema&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;constraint_column_usage&lt;/span&gt; &lt;span class="n"&gt;ccu&lt;/span&gt; &lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;constraint_catalog&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ccu&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;constraint_catalog&lt;/span&gt; &lt;span class="k"&gt;AND&lt;/span&gt; &lt;span class="n"&gt;tc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;constraint_schema&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ccu&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;constraint_schema&lt;/span&gt; &lt;span class="k"&gt;AND&lt;/span&gt; &lt;span class="n"&gt;tc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;constraint_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ccu&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;constraint_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;tc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;table_schema&lt;/span&gt; &lt;span class="k"&gt;IN&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="k"&gt;unnest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string_to_array&lt;/span&gt;&lt;span class="p"&gt;(:&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;schemas&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;span class="k"&gt;UNION&lt;/span&gt; &lt;span class="k"&gt;ALL&lt;/span&gt;
&lt;span class="k"&gt;SELECT&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;DROP INDEX IF EXISTS &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;schemaname&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;.&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;indexname&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;;&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;pg_indexes&lt;/span&gt;
&lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;schemaname&lt;/span&gt; &lt;span class="k"&gt;IN&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="k"&gt;unnest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string_to_array&lt;/span&gt;&lt;span class="p"&gt;(:&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;schemas&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then you will transfer the&amp;nbsp;data:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pg_dump -a -t &lt;span class="s2"&gt;&amp;quot;schema1.*&amp;quot;&lt;/span&gt; -t &lt;span class="s2"&gt;&amp;quot;schema2.*&amp;quot;&lt;/span&gt; -O -d &lt;span class="nb"&gt;source&lt;/span&gt; -v &lt;span class="p"&gt;|&lt;/span&gt; psql -h localhost -d target
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And restore the already dropped indices and constraints (&lt;code&gt;create_indices_constraints.sql&lt;/code&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;WITH&lt;/span&gt; &lt;span class="k"&gt;constraints&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ALTER TABLE &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt;
    &lt;span class="n"&gt;tc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;table_schema&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;.&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt;
    &lt;span class="n"&gt;tc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;table_name&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39; ADD CONSTRAINT &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt;
    &lt;span class="n"&gt;tc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;constraint_name&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39; &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt;
    &lt;span class="n"&gt;tc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;constraint_type&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;(&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt;
    &lt;span class="n"&gt;string_agg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ccu&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;column_name&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nb"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;, &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="c1"&gt;-- column order should be taken into account here&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;);&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;def&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;tc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;table_schema&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;tc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;table_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;tc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;constraint_name&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;information_schema&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;table_constraints&lt;/span&gt; &lt;span class="n"&gt;tc&lt;/span&gt;
&lt;span class="k"&gt;JOIN&lt;/span&gt; &lt;span class="n"&gt;information_schema&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;constraint_column_usage&lt;/span&gt; &lt;span class="n"&gt;ccu&lt;/span&gt; &lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;constraint_catalog&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ccu&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;constraint_catalog&lt;/span&gt; &lt;span class="k"&gt;AND&lt;/span&gt; &lt;span class="n"&gt;tc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;constraint_schema&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ccu&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;constraint_schema&lt;/span&gt; &lt;span class="k"&gt;AND&lt;/span&gt; &lt;span class="n"&gt;tc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;constraint_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ccu&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;constraint_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;tc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;table_schema&lt;/span&gt; &lt;span class="k"&gt;IN&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="k"&gt;unnest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string_to_array&lt;/span&gt;&lt;span class="p"&gt;(:&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;schemas&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
    &lt;span class="k"&gt;AND&lt;/span&gt; &lt;span class="n"&gt;tc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;constraint_type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;PRIMARY KEY&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;GROUP&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt;
    &lt;span class="n"&gt;tc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;table_schema&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;tc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;table_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;tc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;constraint_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;tc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;constraint_type&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="k"&gt;constraints&lt;/span&gt;
&lt;span class="k"&gt;UNION&lt;/span&gt; &lt;span class="k"&gt;ALL&lt;/span&gt;
&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;indexdef&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;;&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;pg_indexes&lt;/span&gt;
&lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;schemaname&lt;/span&gt; &lt;span class="k"&gt;IN&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="k"&gt;unnest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string_to_array&lt;/span&gt;&lt;span class="p"&gt;(:&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;schemas&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt; 
&lt;span class="k"&gt;AND&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;EXISTS&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt;
    &lt;span class="k"&gt;constraints&lt;/span&gt; &lt;span class="k"&gt;c&lt;/span&gt;
    &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;pg_indexes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;schemaname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;table_schema&lt;/span&gt;
        &lt;span class="k"&gt;AND&lt;/span&gt; &lt;span class="n"&gt;pg_indexes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tablename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;table_name&lt;/span&gt;
        &lt;span class="k"&gt;AND&lt;/span&gt; &lt;span class="n"&gt;pg_indexes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;indexname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;constraint_name&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Few&amp;nbsp;sidenotes&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Run the second piece of code first. If you forget, run that code on the source&amp;nbsp;database.&lt;/li&gt;
&lt;li&gt;Notice the &lt;code&gt;:schemas&lt;/code&gt;. Variable assignment is one of the &lt;code&gt;psql&lt;/code&gt; features I really&amp;nbsp;like.&lt;/li&gt;
&lt;li&gt;Notice &lt;code&gt;DROP INDEX IF EXISTS&lt;/code&gt; and the &lt;span class="caps"&gt;CTE&lt;/span&gt; used in the drop code - that&amp;#8217;s due to the fact that dropping the constraint obviously drops the underlying index as well and you don&amp;#8217;t want to dropping something that doesn&amp;#8217;t exist or creating something that exists&amp;nbsp;already.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The bash script proposal might look as&amp;nbsp;follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# store indices and constraint definitions&lt;/span&gt;
psql -qAt -d target -v &lt;span class="nv"&gt;schemas&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;schema1&amp;#39;&lt;/span&gt;,&lt;span class="s1"&gt;&amp;#39;schema2&amp;#39;&lt;/span&gt; -f create_indices_constraints.sql &amp;gt; create.sql

&lt;span class="c1"&gt;# drop indices and constraints&lt;/span&gt;
psql -qAt -d target -v &lt;span class="nv"&gt;schemas&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;schema1&amp;#39;&lt;/span&gt;,&lt;span class="s1"&gt;&amp;#39;schema2&amp;#39;&lt;/span&gt; -f drop_indices_constraints.sql &lt;span class="p"&gt;|&lt;/span&gt; psql -d target

​# load data
pg_dump -a -t &lt;span class="s2"&gt;&amp;quot;schema1.*&amp;quot;&lt;/span&gt; -t &lt;span class="s2"&gt;&amp;quot;schema2.*&amp;quot;&lt;/span&gt; -O -d &lt;span class="nb"&gt;source&lt;/span&gt; -v &lt;span class="p"&gt;|&lt;/span&gt; psql -h localhost -d target

&lt;span class="c1"&gt;#renew indices and constraints&lt;/span&gt;
psql -qAt -d target -f create.sql
​
&lt;/pre&gt;&lt;/div&gt;</content><category term="postgresql"></category><category term="bash"></category></entry><entry><title>Testing PostgreSQL OGR FDW</title><link href="https://www.zimmi.cz/posts/2016/testing-postgresql-ogr-fdw/" rel="alternate"></link><published>2016-07-01T11:10:00+02:00</published><updated>2016-07-01T11:10:00+02:00</updated><author><name>Michal Zimmermann</name></author><id>tag:www.zimmi.cz,2016-07-01:/posts/2016/testing-postgresql-ogr-fdw/</id><summary type="html">&lt;p&gt;&lt;a href="https://wiki.postgresql.org/wiki/Foreign_data_wrappers"&gt;PostgreSQL foreign data wrappers&lt;/a&gt; are used to connect PostgreSQL database to different datasources, e.g. other &lt;span class="caps"&gt;SQL&lt;/span&gt; databases, &lt;span class="caps"&gt;CSV&lt;/span&gt; files, &lt;span class="caps"&gt;XLS&lt;/span&gt;&amp;nbsp;spreadsheets&amp;times;&lt;/p&gt;
&lt;p&gt;The one I&amp;#8217;ve been interested in for several months is &lt;a href="https://github.com/pramsey/pgsql-ogr-fdw"&gt;Paul Ramsey&amp;#8217;s &lt;span class="caps"&gt;OGR&lt;/span&gt; &lt;span class="caps"&gt;FDW&lt;/span&gt;&lt;/a&gt; - it gives you access to &lt;span class="caps"&gt;OGR&lt;/span&gt; supported spatial formats directly from your …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://wiki.postgresql.org/wiki/Foreign_data_wrappers"&gt;PostgreSQL foreign data wrappers&lt;/a&gt; are used to connect PostgreSQL database to different datasources, e.g. other &lt;span class="caps"&gt;SQL&lt;/span&gt; databases, &lt;span class="caps"&gt;CSV&lt;/span&gt; files, &lt;span class="caps"&gt;XLS&lt;/span&gt;&amp;nbsp;spreadsheets&amp;times;&lt;/p&gt;
&lt;p&gt;The one I&amp;#8217;ve been interested in for several months is &lt;a href="https://github.com/pramsey/pgsql-ogr-fdw"&gt;Paul Ramsey&amp;#8217;s &lt;span class="caps"&gt;OGR&lt;/span&gt; &lt;span class="caps"&gt;FDW&lt;/span&gt;&lt;/a&gt; - it gives you access to &lt;span class="caps"&gt;OGR&lt;/span&gt; supported spatial formats directly from your database. &lt;em&gt;No more shapefiles lying&amp;nbsp;around?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Each foreign data wrapper should have three basic&amp;nbsp;components:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;foreign server&amp;nbsp;object&lt;/li&gt;
&lt;li&gt;foreign user mapping - not necessary if you&amp;#8217;re not connecting to other&amp;nbsp;database&lt;/li&gt;
&lt;li&gt;foreign&amp;nbsp;table(s)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I got some data about &lt;a href="http://www.dibavod.cz/download.php?id_souboru=1413"&gt;rivers&lt;/a&gt; and &lt;a href="http://www.dibavod.cz/download.php?id_souboru=1416"&gt;dams&lt;/a&gt; from &lt;a href="http://www.dibavod.cz"&gt;&lt;span class="caps"&gt;DIBAVOD&lt;/span&gt;&lt;/a&gt; open datasets to play&amp;nbsp;with.&lt;/p&gt;
&lt;p&gt;First define the foreign server&amp;nbsp;object:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;CREATE SERVER dibavod
FOREIGN DATA WRAPPER ogr_fdw
OPTIONS (
    datasource &amp;#39;/downloads/dibavod&amp;#39;,
    format &amp;#39;ESRI Shapefile&amp;#39;,
    config_options &amp;#39;SHAPE_ENCODING=CP1250&amp;#39;
);
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note the &lt;span class="caps"&gt;OGR&lt;/span&gt; specific driver configuration options are available inside &lt;code&gt;config_options&lt;/code&gt;. In case of &lt;span class="caps"&gt;ESRI&lt;/span&gt; Shapefiles, the &lt;code&gt;datasource&lt;/code&gt; is the directory your files reside&amp;nbsp;in.&lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s create PostgreSQL tables (use &lt;code&gt;ogrinfo&lt;/code&gt; or Paul&amp;#8217;s &lt;code&gt;ogr_fdw_info&lt;/code&gt; to list the&amp;nbsp;columns):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;CREATE FOREIGN TABLE rivers (
    fid integer,
    utokj_id numeric,
    utokjn_id numeric,
    utokjn_f numeric,
    prprop_z integer,
    ex_jh integer,
    pozn text,
    shape_leng numeric,
    naz_tok text,
    idvt integer,
    tok_id numeric,
    shape_len numeric,
    geom geometry(LINESTRING, 5514)
)
SERVER dibavod
OPTIONS (layer &amp;#39;A02_Vodni_tok_JU&amp;#39;);

CREATE FOREIGN TABLE dams (
    fid integer,
    objectid integer,
    naz_na text,
    nadr_gid numeric,
    kota_hladi numeric,
    hloubka numeric,
    zatop_ploc numeric,
    objem numeric,
    kota_hraz numeric,
    kota_preli numeric,
    kota_vypus numeric,
    plocha_m2 numeric,
    shape_area numeric,
    shape_len numeric,
    geom geometry(MULTIPOLYGON, 5514)
)
SERVER dibavod
OPTIONS (LAYER &amp;#39;A05_Vodni_nadrze&amp;#39;);
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note the &lt;code&gt;fid&lt;/code&gt; column - required for &lt;strong&gt;write access&lt;/strong&gt; to underlying&amp;nbsp;datasource.&lt;/p&gt;
&lt;p&gt;Things to&amp;nbsp;remember:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;foreign tables mean no constraints nor&amp;nbsp;indices&lt;/li&gt;
&lt;li&gt;no indices mean spatial queries are terribly slow compared to&amp;nbsp;PostGIS&lt;/li&gt;
&lt;li&gt;I like the idea of &lt;code&gt;CREATE UNLOGGED TABLE dams2 AS SELECT * FROM dams&lt;/code&gt;, not sure what to use it for&amp;nbsp;though&lt;/li&gt;
&lt;/ul&gt;</content><category term="postgresql"></category><category term="gdal"></category></entry><entry><title>A Month of Commuting on My Own</title><link href="https://www.zimmi.cz/posts/2016/a-month-of-commuting-on-my-own/" rel="alternate"></link><published>2016-04-09T09:10:00+02:00</published><updated>2016-04-09T09:10:00+02:00</updated><author><name>Michal Zimmermann</name></author><id>tag:www.zimmi.cz,2016-04-09:/posts/2016/a-month-of-commuting-on-my-own/</id><summary type="html">&lt;p&gt;I&amp;#8217;ve been sort of living in Brno for the last 7 years (college included). It&amp;#8217;s quite a hilly city, with lots of cars, very good public transportation system and ever-improving cycling infrastructure. All these years I was using trams, buses and trolleybuses to get myself from one place …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I&amp;#8217;ve been sort of living in Brno for the last 7 years (college included). It&amp;#8217;s quite a hilly city, with lots of cars, very good public transportation system and ever-improving cycling infrastructure. All these years I was using trams, buses and trolleybuses to get myself from one place to&amp;nbsp;another.&lt;/p&gt;
&lt;p&gt;These are all great,&amp;nbsp;because:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;you can read while you&amp;nbsp;ride&lt;/li&gt;
&lt;li&gt;you are generally faster than car during rush&amp;nbsp;hour&lt;/li&gt;
&lt;li&gt;you don&amp;#8217;t waste your time trying to park your&amp;nbsp;car&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These all suck,&amp;nbsp;because:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;public transportation is quite expensive in&amp;nbsp;Brno&lt;/li&gt;
&lt;li&gt;people stink in&amp;nbsp;summer&lt;/li&gt;
&lt;li&gt;some people stink in winter as&amp;nbsp;well&lt;/li&gt;
&lt;li&gt;you usually have to change several lines to actually get where you&amp;nbsp;want&lt;/li&gt;
&lt;li&gt;they&amp;#8217;re&amp;nbsp;crowded&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;My period card expired on March 8 and I decided not to renew it. Why? See the list above. As I don&amp;#8217;t have a car and I work at the far end of the city, I can either ride a bike or run to work. Ask me how it&amp;#8217;s been for the first month? Not bad at&amp;nbsp;all.&lt;/p&gt;
&lt;div class="text-center"&gt;&lt;a href="{filename}/assets/a-month-of-commuting-on-my-own/training_calendar.png"&gt;&lt;img data-echo="/posts/assets/a-month-of-commuting-on-my-own/training_calendar_small.png" title="Strava training log" class="img-rounded"&gt;&lt;/a&gt;&lt;p&gt;&lt;strong&gt;Figure:&lt;/strong&gt; March Strava&amp;nbsp;log.&lt;/p&gt;&lt;/div&gt;

&lt;div class="text-center"&gt;&lt;a href="{filename}/assets/a-month-of-commuting-on-my-own/training_calendar2.png"&gt;&lt;img data-echo="/posts/assets/a-month-of-commuting-on-my-own/training_calendar_small2.png" title="Strava training log" class="img-rounded"&gt;&lt;/a&gt;&lt;p&gt;&lt;strong&gt;Figure:&lt;/strong&gt; April Strava&amp;nbsp;log.&lt;/p&gt;&lt;/div&gt;

&lt;h2&gt;What&amp;#8217;s so great about&amp;nbsp;commuting?&lt;/h2&gt;
&lt;p&gt;Not so long ago &lt;em&gt;I considered commuting a waste of time&lt;/em&gt;. It took me 40-50 minutes to get to work and about the same to get back home. That&amp;#8217;s 1-2 hours not being productive, not doing anything at all actually, just changing&amp;nbsp;places.&lt;/p&gt;
&lt;p&gt;That&amp;#8217;s a &lt;em&gt;terrible mistake&lt;/em&gt; to do. It&amp;#8217;s much better to see this time as an &lt;strong&gt;opportunity&lt;/strong&gt; to do that little extra for yourself - walk, run, ride. Even though it takes me a bit longer than public transport (showering and dressing included), it leaves me with totally different state of mind in the end - it just starts me up (hello Rolling&amp;nbsp;Stones).&lt;/p&gt;
&lt;p&gt;You can go for a ride right from work. That&amp;#8217;s&amp;nbsp;priceless.&lt;/p&gt;
&lt;p&gt;As a by-product I started to care more about what I eat and when I eat it. I actually spend time cooking so I get enough food during the day. Something I didn&amp;#8217;t do before, because you can always buy something sweet before the bus comes,&amp;nbsp;right?&lt;/p&gt;
&lt;div class="text-center"&gt;&lt;a href="https://www.zimmi.cz/posts/assets/a-month-of-commuting-on-my-own/map.pdf"&gt;&lt;embed style="width:100%; height:250px" src="https://www.zimmi.cz/posts/assets/a-month-of-commuting-on-my-own/map.pdf" title="Daily commute in Brno" class="img-rounded" type="application/pdf"&gt;&lt;/a&gt;&lt;p&gt;&lt;strong&gt;Figure:&lt;/strong&gt; Daily commute in Brno: bike in pink, run in green. &lt;a href="https://www.zimmi.cz/posts/assets/a-month-of-commuting-on-my-own/map.pdf"&gt;See the full&amp;nbsp;version.&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;

&lt;h2&gt;What&amp;#8217;s not so great about&amp;nbsp;commuting?&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Weather&lt;/strong&gt;, especially in spring and autumn, often sucks. Sometimes I come to work soaking wet, nothing a hot shower wouldn&amp;#8217;t fix though. Someone still needs to clean the&amp;nbsp;bike&amp;hellip;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Traffic&lt;/strong&gt; sucks in the evening. I get up before six, leave home before half past six, thus avoid heavy traffic. Riding a bike home in the evening is threatening sometimes and a bit of mutual respect between pedestrians, cyclists and drivers would&amp;nbsp;do.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cycling paths&lt;/strong&gt; sometimes end right before the big crossroads. Often drivers use parts of the network as parking lanes, which puts you in danger&amp;nbsp;suddenly.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Other cyclists, skaters, people walking their dogs, little kids&lt;/strong&gt; usually don&amp;#8217;t care about you at all. You better don&amp;#8217;t get distracted if you want to get home safe and&amp;nbsp;sound.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Books are hard to read&lt;/strong&gt; on the&amp;nbsp;bike.&lt;/p&gt;
&lt;h2&gt;Does it tell you something about your&amp;nbsp;city?&lt;/h2&gt;
&lt;p&gt;I guess the city you see on foot or from atop a saddle is completely different than the one seen from a bus or a&amp;nbsp;car.&lt;/p&gt;
&lt;p&gt;Is it rather car or bike friendly? Do you feel at risk riding a bike or running? Is it faster to run/ride or drive? Does your city actually want you to leave your car at home at all, or has it been designed for&amp;nbsp;cars?&lt;/p&gt;
&lt;p&gt;River seems to be blessing when your city has one (unless flood strikes, different story). &lt;a href="https://goo.gl/maps/T6wMLSCFzZU2"&gt;If done right&lt;/a&gt;, its shores might become one of the most beautiful parts of the city. Something Brno needs to catch up with other&amp;nbsp;cities.&lt;/p&gt;
&lt;p&gt;I hope one day I&amp;#8217;ll get up and see Brno changing in front of me. &lt;a href="http://www.fastcoexist.com/3058685/paris-is-redesigning-its-major-intersections-for-pedestrians-not-cars"&gt;Just like Paris is right now.&lt;/a&gt; We all die in the end, so why not to take a walk before we&amp;nbsp;do?&lt;/p&gt;</content><category term="spatial"></category><category term="visualization"></category></entry><entry><title>Do You Really Need Gulp? Or Grunt? Or Bower? Or What?</title><link href="https://www.zimmi.cz/posts/2016/do-you-really-need-gulp-or-grunt-or-bower-or-what/" rel="alternate"></link><published>2016-03-20T19:15:00+01:00</published><updated>2016-03-20T19:15:00+01:00</updated><author><name>Michal Zimmermann</name></author><id>tag:www.zimmi.cz,2016-03-20:/posts/2016/do-you-really-need-gulp-or-grunt-or-bower-or-what/</id><summary type="html">&lt;p&gt;&lt;strong&gt;Disclaimer:&lt;/strong&gt; I&amp;#8217;m an enthuastic developer, but I do not code for a living. I&amp;#8217;m just the ordinary guy who keeps editing a wrong file wondering why &lt;em&gt;the heck&lt;/em&gt; the changes are not being&amp;nbsp;applied.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span class="caps"&gt;TL&lt;/span&gt;;&lt;span class="caps"&gt;DR&lt;/span&gt;:&lt;/strong&gt; I do think &lt;code&gt;npm&lt;/code&gt; might be the&amp;nbsp;answer.&lt;/p&gt;
&lt;h2&gt;Wonderful world of JavaScript …&lt;/h2&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;Disclaimer:&lt;/strong&gt; I&amp;#8217;m an enthuastic developer, but I do not code for a living. I&amp;#8217;m just the ordinary guy who keeps editing a wrong file wondering why &lt;em&gt;the heck&lt;/em&gt; the changes are not being&amp;nbsp;applied.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span class="caps"&gt;TL&lt;/span&gt;;&lt;span class="caps"&gt;DR&lt;/span&gt;:&lt;/strong&gt; I do think &lt;code&gt;npm&lt;/code&gt; might be the&amp;nbsp;answer.&lt;/p&gt;
&lt;h2&gt;Wonderful world of JavaScript&amp;nbsp;DevOps&lt;/h2&gt;
&lt;p&gt;When I first started using JavaScript on the server side with &lt;code&gt;node.js&lt;/code&gt;, I felt overwhelmed by numerous options to automate tasks. There was &lt;code&gt;npm&lt;/code&gt; taking care of backend dependencies. Then I would build a&amp;nbsp;frontend and found out about &lt;code&gt;bower&lt;/code&gt; for handling frontend dependencies. Then it would be great to have some kind of minification/obfuscation/uglification/you-name-it task. And the &lt;code&gt;build&lt;/code&gt; task. And the &lt;code&gt;build:prod&lt;/code&gt; task. And how about &lt;code&gt;eslint&lt;/code&gt; task? And then I would end up spending hours doing nothing, just reading blogs about the tools being used by others who do code for a&amp;nbsp;living.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Intermezzo:&lt;/strong&gt; I think my coding is slow. Definitely slower than yours. I&amp;#8217;m getting better&amp;nbsp;though.&lt;/p&gt;
&lt;h2&gt;Using the&amp;nbsp;force&lt;/h2&gt;
&lt;p&gt;Looking back I find it a bit stressful - how &lt;em&gt;the heck&lt;/em&gt; do I choose the right tools? Where&amp;#8217;s Yoda to help me out? Anyway, next to adopt after &lt;code&gt;npm&lt;/code&gt; was &lt;code&gt;bower&lt;/code&gt;. And I liked it, even though some packages were missing - but who cares as long as there is no better way, right? Except there is&amp;hellip; I&amp;nbsp;guess.&lt;/p&gt;
&lt;p&gt;Automation was next in the line to tackle. So I chose &lt;code&gt;gulp&lt;/code&gt; without a bit of hesitation. It was a&amp;nbsp;hype, a bigger than &lt;code&gt;grunt&lt;/code&gt; back then. I even heard of &lt;code&gt;yeoman&lt;/code&gt;, but until now I still don&amp;#8217;t know what it actually does. And I&amp;#8217;m happy with&amp;nbsp;that.&lt;/p&gt;
&lt;p&gt;A short summary so&amp;nbsp;far:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;npm&lt;/code&gt; for backend&amp;nbsp;dependencies&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bower&lt;/code&gt; for frontend&amp;nbsp;dependencies&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gulp&lt;/code&gt; for running&amp;nbsp;tasks&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So far, so&amp;nbsp;good.&lt;/p&gt;
&lt;h2&gt;Is Bower going to&amp;nbsp;die?&lt;/h2&gt;
&lt;p&gt;Then I stumbled upon this tweet and started panicking. Or rather started to feel cheated. &lt;em&gt;It took me time to set all this up and now it&amp;#8217;s useless? Or&amp;nbsp;what?&lt;/em&gt;&lt;/p&gt;
&lt;blockquote class="twitter-tweet" data-lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;Bower development is stopped. Move to npm, if you haven&amp;#39;t already. &lt;a href="https://t.co/RQRcE7DT5V"&gt;https://t.co/RQRcE7DT5V&lt;/a&gt;&lt;/p&gt;&amp;mdash; Nacho Coloma (@nachocoloma) &lt;a href="https://twitter.com/nachocoloma/status/663622545162280960"&gt;November 9, 2015&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;Seeing it now, I&amp;#8217;m glad I read this. And I really don&amp;#8217;t know what happened to Bower, if anything at&amp;nbsp;all.&lt;/p&gt;
&lt;h2&gt;Keeping it&amp;nbsp;simple&lt;/h2&gt;
&lt;p&gt;So Bower&amp;#8217;s dying, what are you going to do about that? You&amp;#8217;ll use &lt;code&gt;npm&lt;/code&gt; instead! And you&amp;#8217;ll have a&amp;nbsp;single source of truth called &lt;code&gt;package.json&lt;/code&gt;. You&amp;#8217;l resolve all the dependencies with a single &lt;code&gt;npm install&lt;/code&gt; command and feel like a king. We&amp;#8217;re down to two now - &lt;code&gt;npm&lt;/code&gt; and &lt;code&gt;gulp&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Gulp, Gulp&amp;nbsp;everywhere!&lt;/h2&gt;
&lt;p&gt;When you get rid of Bower, next feeling you have is your &lt;code&gt;gulpfile.js&lt;/code&gt; just got off the leash. It got really big and grew to ~160 lines of code and became a nightmare to&amp;nbsp;manage.&lt;/p&gt;
&lt;p&gt;So you split it into &lt;a href="https://github.com/zimmicz/bookmap/commit/98a3ce451856e2beaac8fa2be9eb3b7e2878b0a7"&gt;task files&lt;/a&gt; and a &lt;a href="https://github.com/zimmicz/bookmap/commit/07eaf7d355a47ff9d08e5b7138791a67669534d6"&gt;config file&lt;/a&gt;. What a relief. But you still realize a &lt;strong&gt;half&lt;/strong&gt; of your &lt;code&gt;package.json&lt;/code&gt; dependencies starts with &lt;code&gt;gulp-&lt;/code&gt;. And you hate&amp;nbsp;it.&lt;/p&gt;
&lt;h2&gt;Webpack for the&amp;nbsp;win&lt;/h2&gt;
&lt;p&gt;For me, a non-developer, setting the &lt;a href="https://webpack.github.io/"&gt;webpack&lt;/a&gt; wasn&amp;#8217;t easy. I didn&amp;#8217;t find docs very helpful either. Reading the website for the first time, I didn&amp;#8217;t even understand what it should be used for. I&amp;nbsp;got it working eventually. And I got rid of &lt;code&gt;gulp&lt;/code&gt;, &lt;code&gt;gulp-connect&lt;/code&gt;, &lt;code&gt;gulp-less&lt;/code&gt;, &lt;code&gt;gulp-nodemon&lt;/code&gt;, &lt;code&gt;gulp-rename&lt;/code&gt;, &lt;code&gt;gulp-replace&lt;/code&gt;, &lt;code&gt;gulp-task-listing&lt;/code&gt; and &lt;code&gt;gutil&lt;/code&gt;. And the whole &lt;code&gt;gulpfile.js&lt;/code&gt;. That was a big win for&amp;nbsp;me.&lt;/p&gt;
&lt;h2&gt;But how do you run&amp;nbsp;tasks?&lt;/h2&gt;
&lt;p&gt;Well&amp;hellip;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;npm run start-dev &lt;span class="c1"&gt;# which in turn calls the code below&lt;/span&gt;
npm run start-webpack &lt;span class="p"&gt;&amp;amp;&lt;/span&gt; &lt;span class="nv"&gt;NODE_ENV&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;development nodemon server.js &lt;span class="c1"&gt;# where start-webpack does the following&lt;/span&gt;
node_modules/webpack-dev-server/bin/webpack-dev-server.js --quiet --inline --hot --watch
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That&amp;#8217;s it. If I need to build code, I run &lt;code&gt;npm run build&lt;/code&gt;, which calls some other tasks from &lt;code&gt;scripts&lt;/code&gt; section in the &lt;code&gt;package.json&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;That&amp;#8217;s pretty much it. I don&amp;#8217;t think it&amp;#8217;s a silver bullet, but I feel like I finally found peace of mind for my future JavaScript development. At least for a month or so before some other guy comes to&amp;nbsp;town.&lt;/p&gt;</content><category term="javascript"></category></entry><entry><title>How to convert DGN to Tiff with GDAL</title><link href="https://www.zimmi.cz/posts/2016/how-to-convert-dgn-to-tiff-with-gdal/" rel="alternate"></link><published>2016-02-21T18:45:00+01:00</published><updated>2016-02-21T18:45:00+01:00</updated><author><name>Michal Zimmermann</name></author><id>tag:www.zimmi.cz,2016-02-21:/posts/2016/how-to-convert-dgn-to-tiff-with-gdal/</id><summary type="html">&lt;p&gt;We have to deal with &lt;span class="caps"&gt;DGN&lt;/span&gt; drawings quite often at &lt;a href="http://www.clevermaps.cz"&gt;CleverMaps&lt;/a&gt; - heavily used for infrastructure projects (highways, roads, pipelines), they are a pure nightmare to the &lt;span class="caps"&gt;GIS&lt;/span&gt; person inside me. Right now, I&amp;#8217;m only capable of converting it into a raster file and serve it with Geoserver. The transformation …&lt;/p&gt;</summary><content type="html">&lt;p&gt;We have to deal with &lt;span class="caps"&gt;DGN&lt;/span&gt; drawings quite often at &lt;a href="http://www.clevermaps.cz"&gt;CleverMaps&lt;/a&gt; - heavily used for infrastructure projects (highways, roads, pipelines), they are a pure nightmare to the &lt;span class="caps"&gt;GIS&lt;/span&gt; person inside me. Right now, I&amp;#8217;m only capable of converting it into a raster file and serve it with Geoserver. The transformation from &lt;span class="caps"&gt;DGN&lt;/span&gt; to &lt;span class="caps"&gt;PDF&lt;/span&gt; to &lt;span class="caps"&gt;PNG&lt;/span&gt; to Tiff is not something that makes me utterly happy&amp;nbsp;though.&lt;/p&gt;
&lt;p&gt;All you need to do the same is &lt;a href="https://www.zimmi.cz/posts/tag/gdal.html"&gt;&lt;span class="caps"&gt;GDAL&lt;/span&gt;&lt;/a&gt;, ImageMagick, some &lt;span class="caps"&gt;PDF&lt;/span&gt; documents created out of &lt;span class="caps"&gt;DGN&lt;/span&gt; files - something MicroStation can help you with - and their upper left and lower right corner&amp;nbsp;coordinates.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# I recommend putting some limits on ImageMagick - it tends to eat up all the resources and quit&lt;/span&gt;
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;MAGICK_MEMORY_LIMIT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1512&lt;/span&gt;
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;MAGICK_MAP_LIMIT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;512&lt;/span&gt;
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;MAGICK_AREA_LIMIT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1024&lt;/span&gt;
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;MAGICK_FILES_LIMIT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;512&lt;/span&gt;
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;MAGICK_TMPDIR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/partition/large/enough

&lt;span class="c1"&gt;# I expect two files on the input: the first is PDF file with drawing, the second is a simple text file with four coordinates on a single line in the following order: upper left x, upper left y, lower right x, lower right y&lt;/span&gt;
&lt;span class="nv"&gt;INPUT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:?&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;PDF file path&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="nv"&gt;COORDS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:?&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Bounding box file path&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="nv"&gt;OUTPUTDIRNAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;dirname &lt;span class="nv"&gt;$INPUT&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;OUTPUTFILENAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;basename &lt;span class="nv"&gt;$INPUT&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; cut -d. -f1&lt;span class="k"&gt;)&lt;/span&gt;.png
&lt;span class="nv"&gt;OUTPUTPATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$OUTPUTDIRNAME&lt;/span&gt;/&lt;span class="nv"&gt;$OUTPUTFILENAME&lt;/span&gt;

&lt;span class="c1"&gt;# create PNG image - I actually don&amp;#39;t remember why it didn&amp;#39;t work directly to Tiff&lt;/span&gt;
gdal_translate &lt;span class="se"&gt;\&lt;/span&gt;
    -co &lt;span class="nv"&gt;WORLDFILE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;YES &lt;span class="se"&gt;\&lt;/span&gt;
    -co &lt;span class="nv"&gt;ZLEVEL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    -of PNG &lt;span class="se"&gt;\&lt;/span&gt;
    --config GDAL_CACHEMAX &lt;span class="m"&gt;500&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    --config GDAL_PDF_DPI &lt;span class="m"&gt;300&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    -a_srs EPSG:5514 &lt;span class="se"&gt;\ &lt;/span&gt;&lt;span class="c1"&gt;# Czech local CRS&lt;/span&gt;
    -a_ullr &lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;cat &lt;span class="nv"&gt;$COORDS&lt;/span&gt;&lt;span class="k"&gt;))&lt;/span&gt; &lt;span class="se"&gt;\ &lt;/span&gt;&lt;span class="c1"&gt;# read the file with coordinates&lt;/span&gt;
    &lt;span class="nv"&gt;$INPUT&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nv"&gt;$OUTPUTPATH&lt;/span&gt;

&lt;span class="c1"&gt;# convert to Tiff image&lt;/span&gt;
convert &lt;span class="se"&gt;\&lt;/span&gt;
    -define tiff:tile-geometry&lt;span class="o"&gt;=&lt;/span&gt;256x256 &lt;span class="se"&gt;\&lt;/span&gt;
    -transparent white &lt;span class="se"&gt;\ &lt;/span&gt;&lt;span class="c1"&gt;# drawings come with white background&lt;/span&gt;
    &lt;span class="nv"&gt;$OUTPUTPATH&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;OUTPUTPATH&lt;/span&gt;&lt;span class="p"&gt;/.png&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;_alpha.tif

&lt;span class="c1"&gt;# build overwies to speed things up&lt;/span&gt;
gdaladdo &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;OUTPUTPATH&lt;/span&gt;&lt;span class="p"&gt;/.png&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;_alpha.tif &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt; &lt;span class="m"&gt;8&lt;/span&gt; &lt;span class="m"&gt;16&lt;/span&gt; &lt;span class="m"&gt;32&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And you&amp;#8217;re done. The &lt;code&gt;.wld&lt;/code&gt; file will be present for each resulting file. I rename it manually to match the name of a GeoTiff - that should be probably done automatically as&amp;nbsp;well.&lt;/p&gt;</content><category term="gdal"></category></entry><entry><title>Looking for the Next Row with PostgreSQL</title><link href="https://www.zimmi.cz/posts/2016/looking-for-the-next-row-with-postgresql/" rel="alternate"></link><published>2016-01-23T16:45:00+01:00</published><updated>2016-01-23T16:45:00+01:00</updated><author><name>Michal Zimmermann</name></author><id>tag:www.zimmi.cz,2016-01-23:/posts/2016/looking-for-the-next-row-with-postgresql/</id><summary type="html">&lt;h2&gt;Using &lt;span class="caps"&gt;JOIN&lt;/span&gt;&amp;nbsp;clause&lt;/h2&gt;
&lt;p&gt;All my &lt;span class="caps"&gt;GIS&lt;/span&gt; life I&amp;#8217;ve been using a simple &lt;code&gt;JOIN&lt;/code&gt; clause to find a row with an &lt;code&gt;id = previous_id + 1&lt;/code&gt;. In other words, imagine a simple table with no&amp;nbsp;indices:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="nb"&gt;integer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;INSERT&lt;/span&gt; &lt;span class="k"&gt;INTO&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt; &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;generate_series&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10000000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Let …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Using &lt;span class="caps"&gt;JOIN&lt;/span&gt;&amp;nbsp;clause&lt;/h2&gt;
&lt;p&gt;All my &lt;span class="caps"&gt;GIS&lt;/span&gt; life I&amp;#8217;ve been using a simple &lt;code&gt;JOIN&lt;/code&gt; clause to find a row with an &lt;code&gt;id = previous_id + 1&lt;/code&gt;. In other words, imagine a simple table with no&amp;nbsp;indices:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="nb"&gt;integer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;INSERT&lt;/span&gt; &lt;span class="k"&gt;INTO&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt; &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;generate_series&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10000000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Let&amp;#8217;s retrieve next row for each row in that&amp;nbsp;table:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;span class="k"&gt;LEFT&lt;/span&gt; &lt;span class="k"&gt;JOIN&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;-- note the LEFT JOIN is needed to get the last row as well&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Execution plan looks like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Hash&lt;/span&gt; &lt;span class="k"&gt;Join&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cost&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;311087&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;953199&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;41&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10088363&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;actual&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;25440&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;770&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;79591&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;869&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10000000&lt;/span&gt; &lt;span class="n"&gt;loops&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="n"&gt;Hash&lt;/span&gt; &lt;span class="n"&gt;Cond&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;  &lt;span class="n"&gt;Seq&lt;/span&gt; &lt;span class="n"&gt;Scan&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cost&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;00&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;145574&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;63&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10088363&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;actual&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;588&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;10801&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;584&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10000001&lt;/span&gt; &lt;span class="n"&gt;loops&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;  &lt;span class="n"&gt;Hash&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cost&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;145574&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;63&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;145574&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;63&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10088363&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;actual&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;25415&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;282&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;25415&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;282&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10000001&lt;/span&gt; &lt;span class="n"&gt;loops&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
         &lt;span class="n"&gt;Buckets&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;16384&lt;/span&gt;  &lt;span class="n"&gt;Batches&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;128&lt;/span&gt;  &lt;span class="n"&gt;Memory&lt;/span&gt; &lt;span class="k"&gt;Usage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2778&lt;/span&gt;&lt;span class="n"&gt;kB&lt;/span&gt;
         &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;  &lt;span class="n"&gt;Seq&lt;/span&gt; &lt;span class="n"&gt;Scan&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cost&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;00&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;145574&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;63&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10088363&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;actual&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;422&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;11356&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;108&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10000001&lt;/span&gt; &lt;span class="n"&gt;loops&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="n"&gt;Planning&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;155&lt;/span&gt; &lt;span class="n"&gt;ms&lt;/span&gt;
 &lt;span class="n"&gt;Execution&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;90134&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;248&lt;/span&gt; &lt;span class="n"&gt;ms&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If we add an index with &lt;code&gt;CREATE INDEX ON test (id)&lt;/code&gt;, the plan&amp;nbsp;changes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Merge&lt;/span&gt; &lt;span class="k"&gt;Join&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cost&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;87&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;669369&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;85&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;9999844&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;actual&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;035&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;56219&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;294&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10000001&lt;/span&gt; &lt;span class="n"&gt;loops&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="n"&gt;Merge&lt;/span&gt; &lt;span class="n"&gt;Cond&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;  &lt;span class="k"&gt;Index&lt;/span&gt; &lt;span class="k"&gt;Only&lt;/span&gt; &lt;span class="n"&gt;Scan&lt;/span&gt; &lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="n"&gt;test_id_idx&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cost&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;43&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;259686&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;9999844&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;actual&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;015&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;11101&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;937&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10000001&lt;/span&gt; &lt;span class="n"&gt;loops&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
         &lt;span class="n"&gt;Heap&lt;/span&gt; &lt;span class="n"&gt;Fetches&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
   &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;  &lt;span class="k"&gt;Index&lt;/span&gt; &lt;span class="k"&gt;Only&lt;/span&gt; &lt;span class="n"&gt;Scan&lt;/span&gt; &lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="n"&gt;test_id_idx&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cost&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;43&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;259686&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;9999844&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;actual&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;012&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;11827&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;895&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10000001&lt;/span&gt; &lt;span class="n"&gt;loops&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
         &lt;span class="n"&gt;Heap&lt;/span&gt; &lt;span class="n"&gt;Fetches&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
 &lt;span class="n"&gt;Planning&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;244&lt;/span&gt; &lt;span class="n"&gt;ms&lt;/span&gt;
 &lt;span class="n"&gt;Execution&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;65973&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;421&lt;/span&gt; &lt;span class="n"&gt;ms&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Not&amp;nbsp;bad.&lt;/p&gt;
&lt;h2&gt;Using window&amp;nbsp;function&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://www.postgresql.org/docs/9.4/static/functions-window.html"&gt;Window functions&lt;/a&gt; are real fun. They&amp;#8217;re great if you&amp;#8217;re doing counts, sums or ranks by groups. And, to my surprise, they&amp;#8217;re great in finding next rows as&amp;nbsp;well.&lt;/p&gt;
&lt;p&gt;With the same &lt;code&gt;test&lt;/code&gt; table, we retrieve next row for each row with the following&amp;nbsp;query:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lead&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;OVER&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;ORDER&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;How does that score without an index? Better than the &lt;code&gt;JOIN&lt;/code&gt; clause.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;WindowAgg&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cost&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1581246&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;1756294&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10002720&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;actual&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;28785&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;388&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;63819&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;071&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10000001&lt;/span&gt; &lt;span class="n"&gt;loops&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;  &lt;span class="n"&gt;Sort&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cost&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1581246&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;1606253&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;70&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10002720&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;actual&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;28785&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;354&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;40117&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;899&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10000001&lt;/span&gt; &lt;span class="n"&gt;loops&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
         &lt;span class="n"&gt;Sort&lt;/span&gt; &lt;span class="k"&gt;Key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;
         &lt;span class="n"&gt;Sort&lt;/span&gt; &lt;span class="k"&gt;Method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;external&lt;/span&gt; &lt;span class="n"&gt;merge&lt;/span&gt;  &lt;span class="n"&gt;Disk&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;136848&lt;/span&gt;&lt;span class="n"&gt;kB&lt;/span&gt;
         &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;  &lt;span class="n"&gt;Seq&lt;/span&gt; &lt;span class="n"&gt;Scan&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cost&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;00&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;144718&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10002720&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;actual&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;020&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;10797&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;961&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10000001&lt;/span&gt; &lt;span class="n"&gt;loops&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="n"&gt;Planning&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;242&lt;/span&gt; &lt;span class="n"&gt;ms&lt;/span&gt;
 &lt;span class="n"&gt;Execution&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;73391&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;024&lt;/span&gt; &lt;span class="n"&gt;ms&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And it works even better if indexed. It&amp;#8217;s actually ~1,5&amp;times; faster than the &lt;code&gt;JOIN&lt;/code&gt; way.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;WindowAgg&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cost&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;43&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;409770&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;03&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10002720&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;actual&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;087&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;35647&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;815&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10000001&lt;/span&gt; &lt;span class="n"&gt;loops&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;  &lt;span class="k"&gt;Index&lt;/span&gt; &lt;span class="k"&gt;Only&lt;/span&gt; &lt;span class="n"&gt;Scan&lt;/span&gt; &lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="n"&gt;test_id_idx&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cost&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;43&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;259729&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;23&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10002720&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;actual&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;059&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;11310&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;879&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10000001&lt;/span&gt; &lt;span class="n"&gt;loops&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
         &lt;span class="n"&gt;Heap&lt;/span&gt; &lt;span class="n"&gt;Fetches&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
 &lt;span class="n"&gt;Planning&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;247&lt;/span&gt; &lt;span class="n"&gt;ms&lt;/span&gt;
 &lt;span class="n"&gt;Execution&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;45388&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;202&lt;/span&gt; &lt;span class="n"&gt;ms&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It reads well and the purpose of such a query is pretty&amp;nbsp;obvious.&lt;/p&gt;</content><category term="postgresql"></category><category term="sql"></category></entry><entry><title>Liftago Open Dataset Infographics</title><link href="https://www.zimmi.cz/posts/2015/liftago-open-dataset-infographics/" rel="alternate"></link><published>2015-12-21T09:35:00+01:00</published><updated>2015-12-21T09:35:00+01:00</updated><author><name>Michal Zimmermann</name></author><id>tag:www.zimmi.cz,2015-12-21:/posts/2015/liftago-open-dataset-infographics/</id><summary type="html">&lt;p&gt;&lt;a href="https://www.liftago.com/cs"&gt;Liftago&lt;/a&gt; (the Czech analogy of Uber) has recently &lt;a href="http://try.liftago.com/info-wants-to-be-free/"&gt;released a sample of its data&lt;/a&gt; covering four weeks of driver/pasenger&amp;nbsp;interactions.&lt;/p&gt;
&lt;p&gt;Have a look at my infographics created with PostGIS, Inkscape, Python and&amp;nbsp;pygal.&lt;/p&gt;
&lt;p class="text-center"&gt;&lt;a href="https://www.zimmi.cz/posts/assets/liftago-open-dataset-infographics/liftago.pdf"&gt;&lt;img title="Liftago infographics" src="{filename}/assets/liftago-open-dataset-infographics/liftago.png" class="img-responsive centered"&gt;&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://www.liftago.com/cs"&gt;Liftago&lt;/a&gt; (the Czech analogy of Uber) has recently &lt;a href="http://try.liftago.com/info-wants-to-be-free/"&gt;released a sample of its data&lt;/a&gt; covering four weeks of driver/pasenger&amp;nbsp;interactions.&lt;/p&gt;
&lt;p&gt;Have a look at my infographics created with PostGIS, Inkscape, Python and&amp;nbsp;pygal.&lt;/p&gt;
&lt;p class="text-center"&gt;&lt;a href="https://www.zimmi.cz/posts/assets/liftago-open-dataset-infographics/liftago.pdf"&gt;&lt;img title="Liftago infographics" src="{filename}/assets/liftago-open-dataset-infographics/liftago.png" class="img-responsive centered"&gt;&lt;/a&gt;&lt;/p&gt;</content><category term="python"></category><category term="postgis"></category><category term="svg"></category><category term="visualization"></category></entry><entry><title>Twitter REST API Data Mining on OpenShift (Part II)</title><link href="https://www.zimmi.cz/posts/2015/twitter-rest-api-data-mining-on-openshift-part-ii/" rel="alternate"></link><published>2015-12-06T12:25:00+01:00</published><updated>2015-12-06T12:25:00+01:00</updated><author><name>Michal Zimmermann</name></author><id>tag:www.zimmi.cz,2015-12-06:/posts/2015/twitter-rest-api-data-mining-on-openshift-part-ii/</id><summary type="html">&lt;p&gt;Last time I described &lt;a href="https://www.zimmi.cz/posts/2015/twitter-rest-api-data-mining-on-openshift-part-i/"&gt;the setup of my OpenShift Twitter crawler&lt;/a&gt; and let it running and downloading data. It&amp;#8217;s been more than two months since I started and I got interesting amount of data. I also made a simple &lt;span class="caps"&gt;ETL&lt;/span&gt; process to load it into my local PostGIS database …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Last time I described &lt;a href="https://www.zimmi.cz/posts/2015/twitter-rest-api-data-mining-on-openshift-part-i/"&gt;the setup of my OpenShift Twitter crawler&lt;/a&gt; and let it running and downloading data. It&amp;#8217;s been more than two months since I started and I got interesting amount of data. I also made a simple &lt;span class="caps"&gt;ETL&lt;/span&gt; process to load it into my local PostGIS database, which I&amp;#8217;d like to cover in this&amp;nbsp;post.&lt;/p&gt;
&lt;h2&gt;Extract&amp;nbsp;data&lt;/h2&gt;
&lt;p&gt;Each day is written to the separate sqlite file with a name like &lt;code&gt;tw_day_D_M_YYYY&lt;/code&gt;. &lt;code&gt;Bash&lt;/code&gt; is used to gzip all the files before downloading them from&amp;nbsp;OpenShift.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;

ssh openshift &lt;span class="s"&gt;&amp;lt;&amp;lt; EOF&lt;/span&gt;
&lt;span class="s"&gt;    cd app-root/data&lt;/span&gt;
&lt;span class="s"&gt;    tar czf twitter.tar.gz *.db&lt;/span&gt;
&lt;span class="s"&gt;EOF&lt;/span&gt;

scp openshift:/var/lib/openshift/55e487587628e1280b0000a9/app-root/data/twitter.tar.gz ./data
&lt;span class="nb"&gt;cd&lt;/span&gt; data &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
tar -xzf twitter.tar.gz &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
&lt;span class="nb"&gt;cd&lt;/span&gt; -

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Extract done&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Transform&amp;nbsp;data&lt;/h2&gt;
&lt;p&gt;The transformation part operates on downloaded files and merges them into one big &lt;span class="caps"&gt;CSV&lt;/span&gt; file. That&amp;#8217;s pretty straightforward. Note that&amp;#8217;s quite simple with sqlite flags, some &lt;code&gt;sed&lt;/code&gt; and &lt;code&gt;tail&lt;/code&gt; commands.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;

rm -rf ./data/csv
mkdir ./data/csv

&lt;span class="k"&gt;for&lt;/span&gt; db in ./data/*.db&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="nv"&gt;FILENAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;basename &lt;span class="nv"&gt;$db&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;DBNAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;FILENAME&lt;/span&gt;&lt;span class="p"&gt;%%.db&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="nv"&gt;CSVNAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$DBNAME&lt;/span&gt;.csv
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$DBNAME&lt;/span&gt;&lt;span class="s2"&gt; to csv...&amp;quot;&lt;/span&gt;
    sqlite3 -header -csv &lt;span class="nv"&gt;$db&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;select * from &lt;/span&gt;&lt;span class="nv"&gt;$DBNAME&lt;/span&gt;&lt;span class="s2"&gt;;&amp;quot;&lt;/span&gt; &amp;gt; ./data/csv/&lt;span class="nv"&gt;$CSVNAME&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;

&lt;span class="nb"&gt;cd&lt;/span&gt; ./data/csv
touch tweets.csv
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;sed -n 1p &lt;span class="k"&gt;$(&lt;/span&gt;ls -d -1 *.csv &lt;span class="p"&gt;|&lt;/span&gt; head -n &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="k"&gt;))&lt;/span&gt; &amp;gt; tweets.csv &lt;span class="c1"&gt;# get column names&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; csv in tw_*.csv&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$csv&lt;/span&gt;
    tail -n +2 &lt;span class="nv"&gt;$csv&lt;/span&gt; &amp;gt;&amp;gt; tweets.csv &lt;span class="c1"&gt;# get all lines without the first one&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Load&amp;nbsp;data&lt;/h2&gt;
&lt;p&gt;In the last step, the data is loaded with &lt;span class="caps"&gt;SQL&lt;/span&gt; &lt;code&gt;\copy&lt;/code&gt; command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;PG_USE_COPY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;YES

&lt;span class="nv"&gt;DATABASE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;mzi_dizertace
&lt;span class="nv"&gt;SCHEMA&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;dizertace
&lt;span class="nv"&gt;TABLE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;tweets

psql &lt;span class="nv"&gt;$DATABASE&lt;/span&gt; &lt;span class="s"&gt;&amp;lt;&amp;lt; EOF&lt;/span&gt;
&lt;span class="s"&gt;    DROP TABLE IF EXISTS $SCHEMA.$TABLE;&lt;/span&gt;
&lt;span class="s"&gt;    CREATE UNLOGGED TABLE $SCHEMA.$TABLE (id text, author text, author_id text, tweet text, created_at text, lon float, lat float, lang text);&lt;/span&gt;
&lt;span class="s"&gt;    \copy $SCHEMA.$TABLE FROM &amp;#39;data/csv/tweets.csv&amp;#39; CSV HEADER DELIMITER &amp;#39;,&amp;#39;&lt;/span&gt;
&lt;span class="s"&gt;    ALTER TABLE $SCHEMA.$TABLE ADD COLUMN wkb_geometry geometry(POINT, 4326);&lt;/span&gt;
&lt;span class="s"&gt;    UPDATE $SCHEMA.$TABLE SET wkb_geometry = ST_SetSRID(ST_MakePoint(lon, lat), 4326);&lt;/span&gt;
&lt;span class="s"&gt;    CREATE INDEX ${TABLE}_geom_idx ON $SCHEMA.$TABLE USING gist(wkb_geometry);&lt;/span&gt;
&lt;span class="s"&gt;    COMMIT;&lt;/span&gt;
&lt;span class="s"&gt;EOF&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;First&amp;nbsp;statistics&lt;/h2&gt;
&lt;p&gt;Some interesting charts and numbers&amp;nbsp;follow.&lt;/p&gt;
&lt;p class="text-center"&gt;&lt;img title="Top 100 Twitter users in the Czech Republic" src="{filename}/assets/twitter-rest-api-data-mining-on-openshift-part-ii/authors.png" class="img-responsive centered"&gt;&lt;/p&gt;

&lt;p class="text-center"&gt;&lt;img title="When people tweet in the Czech Republic" src="{filename}/assets/twitter-rest-api-data-mining-on-openshift-part-ii/hours.png" class="img-responsive centered"&gt;&lt;/p&gt;

&lt;p class="text-center"&gt;&lt;img title="Languages on Twitter in the Czech Republic" src="{filename}/assets/twitter-rest-api-data-mining-on-openshift-part-ii/languages.png" class="img-responsive centered"&gt;&lt;/p&gt;</content><category term="javascript"></category><category term="openshift"></category><category term="twitter"></category></entry><entry><title>PostGIS Case Study: Vozejkmap Open Data (Part III)</title><link href="https://www.zimmi.cz/posts/2015/postgis-case-study-vozejkmap-open-data-part-iii/" rel="alternate"></link><published>2015-11-14T20:39:00+01:00</published><updated>2015-11-14T20:39:00+01:00</updated><author><name>Michal Zimmermann</name></author><id>tag:www.zimmi.cz,2015-11-14:/posts/2015/postgis-case-study-vozejkmap-open-data-part-iii/</id><summary type="html">&lt;p&gt;After a while I got back to my &lt;a href="https://www.zimmi.cz/posts/2014/postgis-case-study-vozejkmap-open-data-part-i/"&gt;PostGIS open data&lt;/a&gt; &lt;a href="https://www.zimmi.cz/posts/2015/postgis-case-study-vozejkmap-open-data-part-ii/"&gt;case study&lt;/a&gt;. Last time I left it with clustering implemented, looking forward to incorporate &lt;a href="http://turfjs.org"&gt;Turf.js&lt;/a&gt; in the future. &lt;em&gt;And the future is now.&lt;/em&gt; &lt;a href="https://github.com/zimmicz/vozejkmap-to-postgis"&gt;The code is still available on&amp;nbsp;GitHub.&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Subgroup&amp;nbsp;clustering&lt;/h2&gt;
&lt;p&gt;Vozejkmap data is categorized based on …&lt;/p&gt;</summary><content type="html">&lt;p&gt;After a while I got back to my &lt;a href="https://www.zimmi.cz/posts/2014/postgis-case-study-vozejkmap-open-data-part-i/"&gt;PostGIS open data&lt;/a&gt; &lt;a href="https://www.zimmi.cz/posts/2015/postgis-case-study-vozejkmap-open-data-part-ii/"&gt;case study&lt;/a&gt;. Last time I left it with clustering implemented, looking forward to incorporate &lt;a href="http://turfjs.org"&gt;Turf.js&lt;/a&gt; in the future. &lt;em&gt;And the future is now.&lt;/em&gt; &lt;a href="https://github.com/zimmicz/vozejkmap-to-postgis"&gt;The code is still available on&amp;nbsp;GitHub.&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Subgroup&amp;nbsp;clustering&lt;/h2&gt;
&lt;p&gt;Vozejkmap data is categorized based on the place type (banks, parking lots, pubs, &amp;hellip;). One of the core features of map showing such data should be the easy way to turn these categories on and&amp;nbsp;off.&lt;/p&gt;
&lt;p&gt;As far as I know, it&amp;#8217;s not trivial to do this with the standard Leaflet library. Extending &lt;code&gt;L.control.layers&lt;/code&gt; and implement its &lt;code&gt;addOverlay&lt;/code&gt;, &lt;code&gt;removeOverlay&lt;/code&gt; methods on your own might be the way to add needed behavior. Fortunately, there&amp;#8217;s an easier option thanks to &lt;a href="https://github.com/ghybs/Leaflet.FeatureGroup.SubGroup"&gt;Leaflet.FeatureGroup.SubGroup&lt;/a&gt; that can handle such use case and is really straightforward. See the code&amp;nbsp;below.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;cluster&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;L&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;markerClusterGroup&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="nx"&gt;chunkedLoading&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;chunkInterval&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;cluster&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;category&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;categories&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// just use L.featureGroup.subGroup instead of L.layerGroup or L.featureGroup&lt;/span&gt;
    &lt;span class="nx"&gt;overlays&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;my&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;category&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;L&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;featureGroup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subGroup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cluster&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;categories&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;category&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;mapkey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;L&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;control&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;layers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;overlays&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;addTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;With this piece of code you get a map key with checkboxes for all the categories, yet they&amp;#8217;re still kept in the single cluster on the map.&amp;nbsp;Brilliant!&lt;/p&gt;
&lt;p&gt;&lt;img data-echo="/posts/assets/postgis-case-study-vozejkmap-open-data-part-iii/map.png" title="vozejkmap.cz data map" class="img-responsive centered"&gt;&lt;/p&gt;
&lt;h2&gt;Using Turf.js for&amp;nbsp;analysis&lt;/h2&gt;
&lt;p&gt;Turf is one of those libraries I get amazed easily with, spending a week trying to find a use case, finally putting it aside with &lt;em&gt;&amp;#8220;I&amp;#8217;ll get back to it later&amp;#8221;&lt;/em&gt;. I usually don&amp;#8217;t. This time it&amp;#8217;s&amp;nbsp;different.&lt;/p&gt;
&lt;p&gt;I use Turf to get the nearest neighbor for any marker on click. My first try ended up with the same marker being the result as it was a member of a feature collection passed to &lt;code&gt;turf.nearest()&lt;/code&gt; method. After snooping around the docs I found &lt;code&gt;turf.remove()&lt;/code&gt; method that can filter GeoJSON based on key-value&amp;nbsp;pair.&lt;/p&gt;
&lt;p&gt;Another handy function is &lt;code&gt;turf.distance()&lt;/code&gt; that gives you distance between two points. The code below adds an information about the nearest point and its distance into the&amp;nbsp;popup.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// data is a geojson feature collection&lt;/span&gt;
&lt;span class="nx"&gt;json&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;L&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;geoJson&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;onEachFeature&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;feature&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;layer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;layer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;click&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;nearest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;turf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nearest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;layer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toGeoJSON&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="nx"&gt;turf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;feature&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
                &lt;span class="nx"&gt;distance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;turf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;distance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;layer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toGeoJSON&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="nx"&gt;nearest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;kilometers&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toPrecision&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                &lt;span class="nx"&gt;popup&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;L&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;popup&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;offset&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;35&lt;/span&gt;&lt;span class="p"&gt;]}).&lt;/span&gt;&lt;span class="nx"&gt;setLatLng&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;latlng&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                &lt;span class="nx"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;L&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Util&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                    &lt;span class="s2"&gt;&amp;quot;&amp;lt;h1&amp;gt;{title}&amp;lt;/h1&amp;gt;&amp;lt;p&amp;gt;{description}&amp;lt;/p&amp;gt; \&lt;/span&gt;
&lt;span class="s2"&gt;                    &amp;lt;p&amp;gt;Nejbližší bod: {nearest} je {distance} km daleko.&amp;lt;/p&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;feature&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;feature&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="nx"&gt;nearest&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;nearest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="nx"&gt;distance&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;distance&lt;/span&gt;
                &lt;span class="p"&gt;});&lt;/span&gt;

            &lt;span class="nx"&gt;popup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setContent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;popup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;openOn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

            &lt;span class="p"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;From what I&amp;#8217;ve tried so far, Turf seems to be incredibly fast and easy to use. I&amp;#8217;ll try to find the nearest point for any of the categories, that could take Turf some&amp;nbsp;time.&lt;/p&gt;
&lt;h2&gt;Update&lt;/h2&gt;
&lt;p&gt;Turf is blazing fast! I&amp;#8217;ve implemented nearest point for each of the categories and it gets done in a blink of an eye. Some screenshots below. Geolocation implemented as&amp;nbsp;well.&lt;/p&gt;
&lt;p&gt;&lt;img data-echo="/posts/assets/postgis-case-study-vozejkmap-open-data-part-iii/screen1.png" title="vozejkmap.cz data map" class="img-responsive centered"&gt; You can locate the point&amp;nbsp;easily.&lt;/p&gt;

&lt;p&gt;&lt;img data-echo="/posts/assets/postgis-case-study-vozejkmap-open-data-part-iii/screen2.png" title="vozejkmap.cz data map" class="img-responsive centered"&gt; You can hide the&amp;nbsp;infobox.&lt;/p&gt;

&lt;p&gt;&lt;img data-echo="/posts/assets/postgis-case-study-vozejkmap-open-data-part-iii/screen3.png" title="vozejkmap.cz data map" class="img-responsive centered"&gt;You can jump to any of the nearest&amp;nbsp;places.&lt;/p&gt;</content><category term="postgresql"></category><category term="postgis"></category><category term="leaflet"></category><category term="javascript"></category></entry><entry><title>Twitter REST API Data Mining on OpenShift (Part I)</title><link href="https://www.zimmi.cz/posts/2015/twitter-rest-api-data-mining-on-openshift-part-i/" rel="alternate"></link><published>2015-11-06T22:00:00+01:00</published><updated>2015-11-06T22:00:00+01:00</updated><author><name>Michal Zimmermann</name></author><id>tag:www.zimmi.cz,2015-11-06:/posts/2015/twitter-rest-api-data-mining-on-openshift-part-i/</id><summary type="html">&lt;p&gt;More than a year ago I wrote about &lt;a href="http://www.zimmi.cz/posts/2014/analyzing-twitter-languages-with-streaming-api/"&gt;analyzing Twitter languages with Streaming &lt;span class="caps"&gt;API&lt;/span&gt;&lt;/a&gt;. Back then I kept my laptop running for a week to download data. Not a comfortable way, especially if you decide to get more data. One year uptime doesn&amp;#8217;t sound like anything you want to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;More than a year ago I wrote about &lt;a href="http://www.zimmi.cz/posts/2014/analyzing-twitter-languages-with-streaming-api/"&gt;analyzing Twitter languages with Streaming &lt;span class="caps"&gt;API&lt;/span&gt;&lt;/a&gt;. Back then I kept my laptop running for a week to download data. Not a comfortable way, especially if you decide to get more data. One year uptime doesn&amp;#8217;t sound like anything you want to be part of. &lt;a href="https://www.openshift.com/"&gt;OpenShift&lt;/a&gt; by Red Hat seems to be almost perfect replacement.&amp;nbsp;Almost.&lt;/p&gt;
&lt;h2&gt;OpenShift&amp;nbsp;setup&lt;/h2&gt;
&lt;p&gt;I started with Node.js application running on one small gear. Once running, you can easily &lt;code&gt;git push&lt;/code&gt; the code to your OpenShift repo and login via &lt;span class="caps"&gt;SSH&lt;/span&gt;. I quickly found simple copy-pasting my local solution wasn&amp;#8217;t going to work. and fixed it with some minor tweaks. That&amp;#8217;s where the fun&amp;nbsp;begins&amp;#8230;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I based the downloader on Node.js a year ago. Until now I still don&amp;#8217;t get how that piece of software works. Frankly, I don&amp;#8217;t really care as long as it&amp;nbsp;works.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Pitfalls&lt;/h3&gt;
&lt;p&gt;If your application doesn&amp;#8217;t generate any traffic, &lt;strong&gt;OpenShift turns it off&lt;/strong&gt;. It wakes up once someone visits again. I had no idea about that and spent some time trying to stop that behavior. Obviously, I could have scheduled a cron job on my laptop pinging it every now and then. Luckily, OpenShift can run cron jobs itself. All you need is to embed a cron cartridge into the running application (and install a bunch of ruby dependencies&amp;nbsp;beforehand).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rhc cartridge add cron-1.4 -a app-name
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then create &lt;code&gt;.openshift/cron/{hourly,daily,weekly,monthly}&lt;/code&gt; folder in the git repository and put your script running a simple curl command into one of&amp;nbsp;those.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl http://social-zimmi.rhcloud.com &amp;gt; /dev/null
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Another problem was just around the corner. Once in a while, the app stopped writing data to the database without saying a word. What helped was restarting it - the only automatic way to do so being a &lt;code&gt;git push&lt;/code&gt; command. Sadly, I haven&amp;#8217;t found a way to restart the app from within itself; it probably can&amp;#8217;t be&amp;nbsp;done.&lt;/p&gt;
&lt;p&gt;When you &lt;code&gt;git push&lt;/code&gt;, the gear stops, builds, deploys and restarts the app. By using hot deployment you can minimize the downtime. Just put the &lt;code&gt;hot_deploy&lt;/code&gt; file into &lt;code&gt;.openshift/markers&lt;/code&gt; folder.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git commit --allow-empty -m &lt;span class="s2"&gt;&amp;quot;Restart gear&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; git push
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This solved the problem until I realize that &lt;strong&gt;every restart deleted all the data&lt;/strong&gt; collected so far. If your data are to stay safe and sound, &lt;strong&gt;save them in &lt;code&gt;process.env.OPENSHIFT_DATA_DIR&lt;/code&gt;&lt;/strong&gt; (which is &lt;code&gt;app-root/data&lt;/code&gt;).&lt;/p&gt;
&lt;h3&gt;Anacron to the&amp;nbsp;rescue&lt;/h3&gt;
&lt;p&gt;How do you push an empty commit once a day? With cron of course. Even better, &lt;strong&gt;anacron&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir ~/.anacron
&lt;span class="nb"&gt;cd&lt;/span&gt; ~/.anacron
mkdir cron.daily cron.weekly cron.monthly spool etc

cat &lt;span class="s"&gt;&amp;lt;&amp;lt;EOT &amp;gt; ~/.anacron/etc/anacrontab&lt;/span&gt;

&lt;span class="s"&gt;SHELL=/bin/sh&lt;/span&gt;
&lt;span class="s"&gt;PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/$HOME/bin&lt;/span&gt;
&lt;span class="s"&gt;HOME=$HOME&lt;/span&gt;
&lt;span class="s"&gt;LOGNAME=$USER&lt;/span&gt;

&lt;span class="s"&gt;1 5  daily-cron nice run-parts --report $HOME/.anacron/cron.daily&lt;/span&gt;
&lt;span class="s"&gt;7 10 weekly-cron nice run-parts --report $HOME/.anacron/cron.weekly&lt;/span&gt;
&lt;span class="s"&gt;@monthly 15 monthly-cron nice run-parts --report $HOME/.anacron/cron.monthly&lt;/span&gt;

&lt;span class="s"&gt;EOT&lt;/span&gt;

cat &lt;span class="s"&gt;&amp;lt;&amp;lt;EOT &amp;gt;&amp;gt; ~/.zprofile # I use zsh shell&lt;/span&gt;
&lt;span class="s"&gt;rm -f $HOME/.anacron/anacron.log&lt;/span&gt;
&lt;span class="s"&gt;/usr/sbin/anacron -t /home/zimmi/.anacron/etc/anacrontab -S /home/zimmi/.anacron/spool &amp;amp;&amp;gt; /home/zimmi/.anacron/anacron.log&lt;/span&gt;

&lt;span class="s"&gt;EOT&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Anacron is to laptop what cron is to 24/7 running server. It just runs automatic jobs when the laptop is running. If it&amp;#8217;s not and the job should be run, it runs it once the &lt;span class="caps"&gt;OS&lt;/span&gt; boots. Brilliant&amp;nbsp;idea.&lt;/p&gt;
&lt;p&gt;It runs the following code for me to keep the app writing data to the&amp;nbsp;database.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="nv"&gt;workdir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/home/zimmi/documents/zimmi/dizertace/social&amp;#39;&lt;/span&gt;
&lt;span class="nv"&gt;logfile&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$workdir&lt;/span&gt;/restart-gear.log
date &amp;gt; &lt;span class="nv"&gt;$logfile&lt;/span&gt;

&lt;span class="o"&gt;{&lt;/span&gt; 
&lt;span class="nv"&gt;HOME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/home/zimmi
&lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="nv"&gt;$workdir&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
git merge origin/master &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
git commit --allow-empty -m &lt;span class="s2"&gt;&amp;quot;Restart gear&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
git push &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Success&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="o"&gt;}&lt;/span&gt; &amp;gt;&amp;gt; &lt;span class="nv"&gt;$logfile&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&amp;gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;&lt;span class="caps"&gt;UPDATE&lt;/span&gt;:&lt;/strong&gt; Spent a long time debugging the &amp;#8220;Permission denied (publickey).&amp;#8221;-like errors. What seems to help&amp;nbsp;is:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Use id_rsa instead of any other &lt;span class="caps"&gt;SSH&lt;/span&gt;&amp;nbsp;key&lt;/li&gt;
&lt;li&gt;Put a new entry into the &lt;code&gt;~/.ssh/config&lt;/code&gt; file&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I don&amp;#8217;t know which one did the magic&amp;nbsp;though.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve been harvesting Twitter for a month with about 10-15K tweets a day (only interested in the Czech Republic). 
&lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;6&lt;/sub&gt; to &lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;5&lt;/sub&gt; of them is located with latitude and longitude. More on this next&amp;nbsp;time.&lt;/p&gt;</content><category term="javascript"></category><category term="openshift"></category><category term="twitter"></category></entry><entry><title>Installing PostGIS 2.2 with SFCGAL on Ubuntu-based OS</title><link href="https://www.zimmi.cz/posts/2015/installing-postgis-22-with-sfcgal-on-ubuntu-based-os/" rel="alternate"></link><published>2015-10-29T22:00:00+01:00</published><updated>2015-10-29T22:00:00+01:00</updated><author><name>Michal Zimmermann</name></author><id>tag:www.zimmi.cz,2015-10-29:/posts/2015/installing-postgis-22-with-sfcgal-on-ubuntu-based-os/</id><summary type="html">&lt;p&gt;I&amp;#8217;ve seen a bunch of questions on &lt;span class="caps"&gt;GIS&lt;/span&gt; StackExchange recently related to &lt;a href="http://sfcgal.org/"&gt;&lt;span class="caps"&gt;SFCGAL&lt;/span&gt;&lt;/a&gt; extension for &lt;a href="http://postgis.net"&gt;PostGIS 2.2&lt;/a&gt;. Great news are it can be installed with one simple query &lt;code&gt;CREATE EXTENSION postgis_sfcgal&lt;/code&gt;. Not so great news are you have to compile it from source for Ubuntu-based &lt;span class="caps"&gt;OS&lt;/span&gt; (14.04 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I&amp;#8217;ve seen a bunch of questions on &lt;span class="caps"&gt;GIS&lt;/span&gt; StackExchange recently related to &lt;a href="http://sfcgal.org/"&gt;&lt;span class="caps"&gt;SFCGAL&lt;/span&gt;&lt;/a&gt; extension for &lt;a href="http://postgis.net"&gt;PostGIS 2.2&lt;/a&gt;. Great news are it can be installed with one simple query &lt;code&gt;CREATE EXTENSION postgis_sfcgal&lt;/code&gt;. Not so great news are you have to compile it from source for Ubuntu-based &lt;span class="caps"&gt;OS&lt;/span&gt; (14.04) as recent versions of required packages are not available in the&amp;nbsp;repositories.&lt;/p&gt;
&lt;p&gt;I tested my solution on elementary &lt;span class="caps"&gt;OS&lt;/span&gt; 0.3.1 based on Ubuntu 14.04. &lt;strong&gt;And it works!&lt;/strong&gt; It installs PostgreSQL 9.4 from repositories together with &lt;span class="caps"&gt;GDAL&lt;/span&gt; and &lt;span class="caps"&gt;GEOS&lt;/span&gt; and some other libs PostGIS depends on. PostGIS itself, &lt;span class="caps"&gt;CGAL&lt;/span&gt;, Boost, &lt;span class="caps"&gt;MPFR&lt;/span&gt; and &lt;span class="caps"&gt;GMP&lt;/span&gt; are built from&amp;nbsp;source.&lt;/p&gt;
&lt;p&gt;Here comes the code (commented where&amp;nbsp;needed).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo -i
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;deb http://apt.postgresql.org/pub/repos/apt/ trusty-pgdg main&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; tee -a /etc/apt/sources.list
wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc &lt;span class="p"&gt;|&lt;/span&gt; sudo apt-key add -
apt-get update
apt-get install -y postgresql-9.4 &lt;span class="se"&gt;\&lt;/span&gt;
    postgresql-client-9.4 &lt;span class="se"&gt;\&lt;/span&gt;
    postgresql-contrib-9.4 &lt;span class="se"&gt;\&lt;/span&gt;
    libpq-dev &lt;span class="se"&gt;\&lt;/span&gt;
    postgresql-server-dev-9.4 &lt;span class="se"&gt;\&lt;/span&gt;
    build-essential &lt;span class="se"&gt;\&lt;/span&gt;
    libgeos-c1 &lt;span class="se"&gt;\&lt;/span&gt;
    libgdal-dev &lt;span class="se"&gt;\&lt;/span&gt;
    libproj-dev &lt;span class="se"&gt;\&lt;/span&gt;
    libjson0-dev &lt;span class="se"&gt;\&lt;/span&gt;
    libxml2-dev &lt;span class="se"&gt;\&lt;/span&gt;
    libxml2-utils &lt;span class="se"&gt;\&lt;/span&gt;
    xsltproc &lt;span class="se"&gt;\&lt;/span&gt;
    docbook-xsl &lt;span class="se"&gt;\&lt;/span&gt;
    docbook-mathml &lt;span class="se"&gt;\&lt;/span&gt;
    cmake &lt;span class="se"&gt;\&lt;/span&gt;
    gcc &lt;span class="se"&gt;\&lt;/span&gt;
    m4 &lt;span class="se"&gt;\&lt;/span&gt;
    icu-devtools

&lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="c1"&gt;# leave root otherwise postgis will choke&lt;/span&gt;

&lt;span class="nb"&gt;cd&lt;/span&gt; /tmp
touch download.txt
cat &lt;span class="s"&gt;&amp;lt;&amp;lt;EOT &amp;gt;&amp;gt; download.txt&lt;/span&gt;
&lt;span class="s"&gt;https://gmplib.org/download/gmp/gmp-6.0.0a.tar.bz2&lt;/span&gt;
&lt;span class="s"&gt;https://github.com/Oslandia/SFCGAL/archive/v1.2.0.tar.gz&lt;/span&gt;
&lt;span class="s"&gt;http://www.mpfr.org/mpfr-current/mpfr-3.1.3.tar.gz&lt;/span&gt;
&lt;span class="s"&gt;http://downloads.sourceforge.net/project/boost/boost/1.59.0/boost_1_59_0.tar.gz&lt;/span&gt;
&lt;span class="s"&gt;https://github.com/CGAL/cgal/archive/releases/CGAL-4.6.3.tar.gz&lt;/span&gt;
&lt;span class="s"&gt;http://download.osgeo.org/postgis/source/postgis-2.2.0.tar.gz&lt;/span&gt;

&lt;span class="s"&gt;EOT&lt;/span&gt;

cat download.txt &lt;span class="p"&gt;|&lt;/span&gt; xargs -n &lt;span class="m"&gt;1&lt;/span&gt; -P &lt;span class="m"&gt;8&lt;/span&gt; wget &lt;span class="c1"&gt;# make wget a little bit faster&lt;/span&gt;

tar xjf gmp-6.0.0a.tar.bz2
tar xzf mpfr-3.1.3.tar.gz
tar xzf v1.2.0.tar.gz
tar xzf boost_1_59_0.tar.gz
tar xzf CGAL-4.6.3.tar.gz
tar xzf postgis-2.2.0.tar.gz

&lt;span class="nv"&gt;CORES&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;nproc&lt;span class="k"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="nv"&gt;$CORES&lt;/span&gt; &amp;gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
    &lt;span class="nv"&gt;CORES&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;expr &lt;span class="nv"&gt;$CORES&lt;/span&gt; - &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# be nice to your PC&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;

&lt;span class="nb"&gt;cd&lt;/span&gt; gmp-6.0.0
./configure &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; make -j &lt;span class="nv"&gt;$CORES&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; sudo make -j &lt;span class="nv"&gt;$CORES&lt;/span&gt; install

&lt;span class="nb"&gt;cd&lt;/span&gt; ..
&lt;span class="nb"&gt;cd&lt;/span&gt; mpfr-3.1.3
./configure &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; make -j &lt;span class="nv"&gt;$CORES&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; sudo make -j &lt;span class="nv"&gt;$CORES&lt;/span&gt; install

&lt;span class="nb"&gt;cd&lt;/span&gt; ..
&lt;span class="nb"&gt;cd&lt;/span&gt; boost_1_59_0
./bootstrap.sh --prefix&lt;span class="o"&gt;=&lt;/span&gt;/usr/local --with-libraries&lt;span class="o"&gt;=&lt;/span&gt;all &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; sudo ./b2 install &lt;span class="c1"&gt;# there might be some warnings along the way, don&amp;#39;t panic&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/usr/local/lib&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sudo tee /etc/ld.so.conf.d/boost.conf
sudo ldconfig

&lt;span class="nb"&gt;cd&lt;/span&gt; ..
&lt;span class="nb"&gt;cd&lt;/span&gt; cgal-releases-CGAL-4.6.3
cmake . &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; make -j &lt;span class="nv"&gt;$CORES&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; sudo make -j &lt;span class="nv"&gt;$CORES&lt;/span&gt; install

&lt;span class="nb"&gt;cd&lt;/span&gt; ..
&lt;span class="nb"&gt;cd&lt;/span&gt; SFCGAL-1.2.0/
cmake . &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; make -j &lt;span class="nv"&gt;$CORES&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; sudo make -j &lt;span class="nv"&gt;$CORES&lt;/span&gt; install

&lt;span class="nb"&gt;cd&lt;/span&gt; ..
&lt;span class="nb"&gt;cd&lt;/span&gt; postgis-2.2.0
./configure &lt;span class="se"&gt;\&lt;/span&gt;
    --with-geosconfig&lt;span class="o"&gt;=&lt;/span&gt;/usr/bin/geos-config &lt;span class="se"&gt;\&lt;/span&gt;
    --with-xml2config&lt;span class="o"&gt;=&lt;/span&gt;/usr/bin/xml2-config &lt;span class="se"&gt;\&lt;/span&gt;
    --with-projdir&lt;span class="o"&gt;=&lt;/span&gt;/usr/share/proj &lt;span class="se"&gt;\&lt;/span&gt;
    --with-libiconv&lt;span class="o"&gt;=&lt;/span&gt;/usr/bin &lt;span class="se"&gt;\&lt;/span&gt;
    --with-jsondir&lt;span class="o"&gt;=&lt;/span&gt;/usr/include/json &lt;span class="se"&gt;\&lt;/span&gt;
    --with-gdalconfig&lt;span class="o"&gt;=&lt;/span&gt;/usr/bin/gdal-config &lt;span class="se"&gt;\&lt;/span&gt;
    --with-raster &lt;span class="se"&gt;\&lt;/span&gt;
    --with-topology &lt;span class="se"&gt;\&lt;/span&gt;
    --with-sfcgal&lt;span class="o"&gt;=&lt;/span&gt;/usr/local/bin/sfcgal-config &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
make &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; make cheatsheets &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; sudo make install &lt;span class="c1"&gt;# deliberately one CPU only&lt;/span&gt;

sudo -u postgres psql
sudo -u postgres createdb spatial_template
sudo -u postgres psql -d spatial_template -c &lt;span class="s2"&gt;&amp;quot;CREATE EXTENSION postgis;&amp;quot;&lt;/span&gt;
sudo -u postgres psql -d spatial_template -c &lt;span class="s2"&gt;&amp;quot;CREATE EXTENSION postgis_topology;&amp;quot;&lt;/span&gt;
sudo -u postgres psql -d spatial_template -c &lt;span class="s2"&gt;&amp;quot;CREATE EXTENSION postgis_sfcgal;&amp;quot;&lt;/span&gt;
sudo -u postgres psql -d spatial_template -c &lt;span class="s2"&gt;&amp;quot;SELECT postgis_full_version();&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="postgresql"></category><category term="postgis"></category><category term="linux"></category></entry><entry><title>Color Relief Shaded Map Using Open Data with Open Source Software</title><link href="https://www.zimmi.cz/posts/2015/color-relief-shaded-map-using-open-data-with-open-source-software/" rel="alternate"></link><published>2015-10-25T09:42:00+01:00</published><updated>2015-10-25T09:42:00+01:00</updated><author><name>Michal Zimmermann</name></author><id>tag:www.zimmi.cz,2015-10-25:/posts/2015/color-relief-shaded-map-using-open-data-with-open-source-software/</id><summary type="html">&lt;p&gt;The Digital Elevation Model over Europe (&lt;span class="caps"&gt;EU&lt;/span&gt;-&lt;span class="caps"&gt;DEM&lt;/span&gt;) has been recently released for public usage at &lt;a href="http://land.copernicus.eu/in-situ/eu-dem"&gt;Copernicus Land Monitoring Services homepage&lt;/a&gt;. Strictly speaking, it is a &lt;strong&gt;digital surface model&lt;/strong&gt; coming from weighted average of &lt;span class="caps"&gt;SRTM&lt;/span&gt; and &lt;span class="caps"&gt;ASTER&lt;/span&gt; &lt;span class="caps"&gt;GDEM&lt;/span&gt; with geographic accuracy of 25 m. Data are provided as GeoTIFF files …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The Digital Elevation Model over Europe (&lt;span class="caps"&gt;EU&lt;/span&gt;-&lt;span class="caps"&gt;DEM&lt;/span&gt;) has been recently released for public usage at &lt;a href="http://land.copernicus.eu/in-situ/eu-dem"&gt;Copernicus Land Monitoring Services homepage&lt;/a&gt;. Strictly speaking, it is a &lt;strong&gt;digital surface model&lt;/strong&gt; coming from weighted average of &lt;span class="caps"&gt;SRTM&lt;/span&gt; and &lt;span class="caps"&gt;ASTER&lt;/span&gt; &lt;span class="caps"&gt;GDEM&lt;/span&gt; with geographic accuracy of 25 m. Data are provided as GeoTIFF files projected in 1 degree by 1 degree tiles (projected to &lt;span class="caps"&gt;EPSG&lt;/span&gt;:3035), so they correspond to the &lt;span class="caps"&gt;SRTM&lt;/span&gt; naming&amp;nbsp;convention.&lt;/p&gt;
&lt;p&gt;If you can&amp;#8217;t see the map to choose the data to download, make sure you&amp;#8217;re not using &lt;span class="caps"&gt;HTTPS&lt;/span&gt; Everywhere or similar browser&amp;nbsp;plugin.&lt;/p&gt;
&lt;p&gt;I chose &lt;strong&gt;Austria&lt;/strong&gt; to play with the&amp;nbsp;data.&lt;/p&gt;
&lt;h2&gt;Obtaining the&amp;nbsp;data&lt;/h2&gt;
&lt;p&gt;It&amp;#8217;s so easy I doubt it&amp;#8217;s even worth a word. Get zipped data with &lt;code&gt;wget&lt;/code&gt;, extract them to a&amp;nbsp;directory.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wget https://cws-download.eea.europa.eu/in-situ/eudem/eu-dem/EUD_CP-DEMS_4500025000-AA.rar -O dem.rar
unrar dem.rar -d copernicus
&lt;span class="nb"&gt;cd&lt;/span&gt; copernicus
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Hillshade and color&amp;nbsp;relief&lt;/h2&gt;
&lt;p&gt;Use &lt;span class="caps"&gt;GDAL&lt;/span&gt; to create hillshade with a simple command. No need to use &lt;code&gt;-s&lt;/code&gt; flag to convert units, it already comes in meters. Exaggerate heights a bit with &lt;code&gt;-z&lt;/code&gt; flag.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gdaldem hillshade EUD_CP-DEMS_4500025000-AA.tif hillshade.tif -z &lt;span class="m"&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And here comes the&amp;nbsp;Alps.&lt;/p&gt;
&lt;p class="text-center"&gt;&lt;img title="Hillshade" src="{filename}/assets/color-relief-shaded-map-using-open-data-and-open-source-software/hillshade.png" class="center"&gt;&lt;/p&gt;

&lt;p&gt;To create a color relief you need a ramp of heights with colors. &lt;a href="http://cartographicperspectives.org/index.php/journal/article/viewFile/20/70"&gt;&amp;#8220;The Development and Rationale of Cross-blended Hypsometric Tints&amp;#8221;&lt;/a&gt; by T. Patterson and B. Jenny is a great read on &lt;strong&gt;hypsometric tints&lt;/strong&gt;. They also give advice on what colors to choose in different environments (see the table at the last page of the article). I settled for warm humid color&amp;nbsp;values.&lt;/p&gt;
&lt;table class="center"&gt;
&lt;thead&gt;
    &lt;tr&gt;
        &lt;th&gt;Elevation [m]&lt;/th&gt;
        &lt;th&gt;Red&lt;/th&gt;
        &lt;th&gt;Green&lt;/th&gt;
        &lt;th&gt;Blue&lt;/th&gt;
    &lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr style="background: rgb(220, 220, 220)"&gt;
&lt;td&gt;5000&lt;/td&gt;
&lt;td&gt;220&lt;/td&gt;
&lt;td&gt;220&lt;/td&gt;
&lt;td&gt;220&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style="background: rgb(212, 207, 204)"&gt;
&lt;td&gt;4000&lt;/td&gt;
&lt;td&gt;212&lt;/td&gt;
&lt;td&gt;207&lt;/td&gt;
&lt;td&gt;204&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style="background: rgb(212, 193, 179)"&gt;
&lt;td&gt;3000&lt;/td&gt;
&lt;td&gt;212&lt;/td&gt;
&lt;td&gt;193&lt;/td&gt;
&lt;td&gt;179&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style="background: rgb(212, 184, 163)"&gt;
&lt;td&gt;2000&lt;/td&gt;
&lt;td&gt;212&lt;/td&gt;
&lt;td&gt;184&lt;/td&gt;
&lt;td&gt;163&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style="background: rgb(212, 201, 180)"&gt;
&lt;td&gt;1000&lt;/td&gt;
&lt;td&gt;212&lt;/td&gt;
&lt;td&gt;201&lt;/td&gt;
&lt;td&gt;180&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style="background: rgb(196, 192, 166)"&gt;
&lt;td&gt;600&lt;/td&gt;
&lt;td&gt;169&lt;/td&gt;
&lt;td&gt;192&lt;/td&gt;
&lt;td&gt;166&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style="background: rgb(134, 184, 159)"&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;td&gt;134&lt;/td&gt;
&lt;td&gt;184&lt;/td&gt;
&lt;td&gt;159&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style="background: rgb(120, 172, 149)"&gt;
&lt;td&gt;50&lt;/td&gt;
&lt;td&gt;120&lt;/td&gt;
&lt;td&gt;172&lt;/td&gt;
&lt;td&gt;149&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style="background: rgb(114, 164, 141)"&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;114&lt;/td&gt;
&lt;td&gt;164&lt;/td&gt;
&lt;td&gt;141&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;I created a color relief with another &lt;span class="caps"&gt;GDAL&lt;/span&gt;&amp;nbsp;command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gdaldem color-relief EUD_CP-DEMS_4500025000-AA.tif ramp_humid.txt color_relief.tif
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And here comes hypsometric&amp;nbsp;tints.&lt;/p&gt;
&lt;p class="text-center"&gt;&lt;img title="Color relief" src="{filename}/assets/color-relief-shaded-map-using-open-data-and-open-source-software/color_relief.png" class="center"&gt;&lt;/p&gt;

&lt;p&gt;Add a bit of compression and some overviews to make it smaller and load&amp;nbsp;faster.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gdal_translate -of GTiff -co &lt;span class="nv"&gt;TILED&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;YES -co &lt;span class="nv"&gt;COMPRESS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;DEFLATE color_relief.tif color_relief.compress.tif
gdal_translate -of GTiff -co &lt;span class="nv"&gt;TILED&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;YES -co &lt;span class="nv"&gt;COMPRESS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;DEFLATE hillshade.tif hillshade.compress.tif
rm color_relief.tif
rm hillshade.tif
mv color_relief.compress.tif color_relief.tif
mv hillshade.compress.tif hillshade.tif
gdaladdo color_relief.tif &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt; &lt;span class="m"&gt;8&lt;/span&gt; &lt;span class="m"&gt;16&lt;/span&gt;
gdaladdo hillshade.tif &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt; &lt;span class="m"&gt;8&lt;/span&gt; &lt;span class="m"&gt;16&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Map&amp;nbsp;composition&lt;/h2&gt;
&lt;p&gt;I chose Austria for its excessive amount of freely available datasets. What I didn&amp;#8217;t take into consideration was my lack of knowledge when it comes to German (#fail). States come from &lt;a href="http://data.gv.at"&gt;data.gv.at&lt;/a&gt; and was dissolved from smaller administrative units. State capitals were downloaded from &lt;a href="http://naturalearth.com"&gt;naturalearth.com&lt;/a&gt;.&lt;/p&gt;
&lt;p class="text-center"&gt;&lt;a href="https://www.zimmi.cz/posts/assets/color-relief-shaded-map-using-open-data-and-open-source-software/map.pdf" title="Click for PDF version"&gt;&lt;img title="Austria" src="{filename}/assets/color-relief-shaded-map-using-open-data-and-open-source-software/map.png" class="center"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I&amp;#8217;d like to add some more thematic layers in the future. And translate the map to&amp;nbsp;English.&lt;/p&gt;
&lt;h2&gt;Few words on &lt;span class="caps"&gt;INSPIRE&lt;/span&gt;&amp;nbsp;Geoportal&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://inspire-geoportal.ec.europa.eu/"&gt;&lt;span class="caps"&gt;INSPIRE&lt;/span&gt; Geoportal&lt;/a&gt; should be the first place you go to search for European spatial data (at last &lt;span class="caps"&gt;EU&lt;/span&gt; thinks so). I used it to find data for this map and it was a very frustrating experience. It was actually more frustrating than using Austrian open data portal in German. Last news are from May 21, 2015, but the whole site looks and feels like deep 90s or early 2000 at&amp;nbsp;least.&lt;/p&gt;</content><category term="bash"></category><category term="gdal"></category><category term="linux"></category><category term="qgis"></category></entry><entry><title>PostgreSQL IN vs EXISTS</title><link href="https://www.zimmi.cz/posts/2015/postgresql-in-vs-exists/" rel="alternate"></link><published>2015-10-09T09:00:00+02:00</published><updated>2015-10-09T09:00:00+02:00</updated><author><name>Michal Zimmermann</name></author><id>tag:www.zimmi.cz,2015-10-09:/posts/2015/postgresql-in-vs-exists/</id><summary type="html">&lt;p&gt;Until recently, &lt;span class="caps"&gt;SQL&lt;/span&gt; &lt;code&gt;IN&lt;/code&gt; and &lt;code&gt;EXISTS&lt;/code&gt; were almost exactly the same to me. There is a significant difference both in execution plans and time of execution though, as I found out after not being able to speed up my workmate&amp;#8217;s&amp;nbsp;query.&lt;/p&gt;
&lt;p&gt;Assume two not-as-small-as-they-might-be&amp;nbsp;tables:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;BEGIN&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="n"&gt;UNLOGGED&lt;/span&gt; &lt;span class="k"&gt;TABLE …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Until recently, &lt;span class="caps"&gt;SQL&lt;/span&gt; &lt;code&gt;IN&lt;/code&gt; and &lt;code&gt;EXISTS&lt;/code&gt; were almost exactly the same to me. There is a significant difference both in execution plans and time of execution though, as I found out after not being able to speed up my workmate&amp;#8217;s&amp;nbsp;query.&lt;/p&gt;
&lt;p&gt;Assume two not-as-small-as-they-might-be&amp;nbsp;tables:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;BEGIN&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="n"&gt;UNLOGGED&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;small&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt;
&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;generate_series&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;500000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="n"&gt;UNLOGGED&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;big&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt;
&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;4000000&lt;/span&gt;&lt;span class="p"&gt;)::&lt;/span&gt;&lt;span class="nb"&gt;integer&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;generate_series&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4000000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;COMMIT&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To find out what rows from &lt;code&gt;test.big&lt;/code&gt; is missing in &lt;code&gt;test.small&lt;/code&gt;, you&amp;#8217;ll use one of these&amp;nbsp;queries:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;big&lt;/span&gt;
&lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;IN&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;small&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

                            &lt;span class="n"&gt;QUERY&lt;/span&gt; &lt;span class="n"&gt;PLAN&lt;/span&gt;
&lt;span class="c1"&gt;-----------------------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="n"&gt;Seq&lt;/span&gt; &lt;span class="n"&gt;Scan&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt; &lt;span class="n"&gt;big&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cost&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;8463&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;01&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;42313&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;02&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1000000&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;actual&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;177&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;061&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;864&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;043&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1500894&lt;/span&gt; &lt;span class="n"&gt;loops&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;Filter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hashed&lt;/span&gt; &lt;span class="n"&gt;SubPlan&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;Rows&lt;/span&gt; &lt;span class="n"&gt;Removed&lt;/span&gt; &lt;span class="k"&gt;by&lt;/span&gt; &lt;span class="n"&gt;Filter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;499107&lt;/span&gt;
    &lt;span class="n"&gt;SubPlan&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;  &lt;span class="n"&gt;Seq&lt;/span&gt; &lt;span class="n"&gt;Scan&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt; &lt;span class="n"&gt;small&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cost&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;00&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;7213&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;01&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;500001&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;actual&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;045&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;34&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;727&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;500001&lt;/span&gt; &lt;span class="n"&gt;loops&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;Total&lt;/span&gt; &lt;span class="n"&gt;runtime&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;904&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;413&lt;/span&gt; &lt;span class="n"&gt;ms&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;big&lt;/span&gt;
&lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;EXISTS&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;small&lt;/span&gt;
    &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;big&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;small&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
                            &lt;span class="n"&gt;QUERY&lt;/span&gt; &lt;span class="n"&gt;PLAN&lt;/span&gt;
&lt;span class="c1"&gt;-----------------------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="n"&gt;Hash&lt;/span&gt; &lt;span class="n"&gt;Anti&lt;/span&gt; &lt;span class="k"&gt;Join&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cost&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;15417&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;02&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;82100&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;58&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;955189&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;actual&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;257&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;1240&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;343&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1500894&lt;/span&gt; &lt;span class="n"&gt;loops&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;Hash&lt;/span&gt; &lt;span class="n"&gt;Cond&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;big&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;small&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;  &lt;span class="n"&gt;Seq&lt;/span&gt; &lt;span class="n"&gt;Scan&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt; &lt;span class="n"&gt;big&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cost&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;00&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;28850&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;01&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2000001&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;actual&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;016&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;125&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;024&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2000001&lt;/span&gt; &lt;span class="n"&gt;loops&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;  &lt;span class="n"&gt;Hash&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cost&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;7213&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;01&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;7213&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;01&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;500001&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;actual&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;068&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;068&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;500001&lt;/span&gt; &lt;span class="n"&gt;loops&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;Buckets&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;65536&lt;/span&gt;  &lt;span class="n"&gt;Batches&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;  &lt;span class="n"&gt;Memory&lt;/span&gt; &lt;span class="k"&gt;Usage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;8800&lt;/span&gt;&lt;span class="n"&gt;kB&lt;/span&gt;
        &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;  &lt;span class="n"&gt;Seq&lt;/span&gt; &lt;span class="n"&gt;Scan&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt; &lt;span class="n"&gt;small&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cost&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;00&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;7213&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;01&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;500001&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;actual&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;011&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;35&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;543&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;500001&lt;/span&gt; &lt;span class="n"&gt;loops&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Total&lt;/span&gt; &lt;span class="n"&gt;runtime&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1280&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;609&lt;/span&gt; &lt;span class="n"&gt;ms&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That&amp;#8217;s not a significant difference in time execution, is&amp;nbsp;it?&lt;/p&gt;
&lt;p&gt;What if you want to find out what rows from &lt;code&gt;test.small&lt;/code&gt; is missing in &lt;code&gt;test.big&lt;/code&gt;?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;small&lt;/span&gt;
&lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;IN&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;big&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

                                &lt;span class="n"&gt;QUERY&lt;/span&gt; &lt;span class="n"&gt;PLAN&lt;/span&gt;
&lt;span class="c1"&gt;---------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="n"&gt;Seq&lt;/span&gt; &lt;span class="n"&gt;Scan&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt; &lt;span class="n"&gt;small&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cost&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;00&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;12915788669&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;52&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;250000&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;Filter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SubPlan&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;SubPlan&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;  &lt;span class="n"&gt;Materialize&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cost&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;00&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;46663&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;01&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2000001&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;  &lt;span class="n"&gt;Seq&lt;/span&gt; &lt;span class="n"&gt;Scan&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt; &lt;span class="n"&gt;big&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cost&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;00&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;28850&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;01&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2000001&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;small&lt;/span&gt;
&lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;EXISTS&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;big&lt;/span&gt;
    &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;big&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;small&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

                               &lt;span class="n"&gt;QUERY&lt;/span&gt; &lt;span class="n"&gt;PLAN&lt;/span&gt;
&lt;span class="c1"&gt;-------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="n"&gt;Hash&lt;/span&gt; &lt;span class="n"&gt;Anti&lt;/span&gt; &lt;span class="k"&gt;Join&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cost&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;61663&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;02&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;180597&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;23&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;Hash&lt;/span&gt; &lt;span class="n"&gt;Cond&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;small&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;big&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;  &lt;span class="n"&gt;Seq&lt;/span&gt; &lt;span class="n"&gt;Scan&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt; &lt;span class="n"&gt;small&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cost&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;00&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;7213&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;01&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;500001&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;  &lt;span class="n"&gt;Hash&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cost&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;28850&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;01&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;28850&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;01&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2000001&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;  &lt;span class="n"&gt;Seq&lt;/span&gt; &lt;span class="n"&gt;Scan&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt; &lt;span class="n"&gt;big&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cost&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;00&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;28850&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;01&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2000001&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It took me ~750 ms to get the result with &lt;code&gt;EXISTS&lt;/code&gt; expression. I kept &lt;code&gt;IN&lt;/code&gt; running whole night with no result. I&amp;#8217;m not really sure why &lt;code&gt;IN&lt;/code&gt; is so much slower, it might be caused by checks for &lt;code&gt;NULL&lt;/code&gt; values. The speed is also related to the size of the subquery, thus the difference when tables were&amp;nbsp;switched.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;LEFT JOIN&lt;/code&gt; can be used to achieve the same result, I find its syntax less obvious&amp;nbsp;though.&lt;/p&gt;
&lt;p&gt;No indexes were built this time, I know they don&amp;#8217;t help the &lt;code&gt;IN&lt;/code&gt; performance at all from my previous tests. Tested with PostgreSQL&amp;nbsp;9.3.9.&lt;/p&gt;</content><category term="sql"></category></entry><entry><title>How to Use Queue with Rsync</title><link href="https://www.zimmi.cz/posts/2015/how-to-use-queue-with-rsync/" rel="alternate"></link><published>2015-10-01T07:51:00+02:00</published><updated>2015-10-01T07:51:00+02:00</updated><author><name>Michal Zimmermann</name></author><id>tag:www.zimmi.cz,2015-10-01:/posts/2015/how-to-use-queue-with-rsync/</id><summary type="html">&lt;p&gt;Having more than 120K &lt;span class="caps"&gt;5MB&lt;/span&gt;+ images that should be moved to the server is a great oportunity for some automatic bash processing. It might be good idea to use &lt;a href="http://www.imagemagick.org/script/index.php"&gt;ImageMagick&lt;/a&gt; &lt;a href="http://www.imagemagick.org/script/convert.php"&gt;convert tool&lt;/a&gt; to make images smaller in a simple for loop. &lt;a href="http://www.gnu.org/software/parallel/"&gt;&lt;span class="caps"&gt;GNU&lt;/span&gt; Parallel&lt;/a&gt; can significantly increase the performance by running …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Having more than 120K &lt;span class="caps"&gt;5MB&lt;/span&gt;+ images that should be moved to the server is a great oportunity for some automatic bash processing. It might be good idea to use &lt;a href="http://www.imagemagick.org/script/index.php"&gt;ImageMagick&lt;/a&gt; &lt;a href="http://www.imagemagick.org/script/convert.php"&gt;convert tool&lt;/a&gt; to make images smaller in a simple for loop. &lt;a href="http://www.gnu.org/software/parallel/"&gt;&lt;span class="caps"&gt;GNU&lt;/span&gt; Parallel&lt;/a&gt; can significantly increase the performance by running one job per &lt;span class="caps"&gt;CPU&lt;/span&gt;&amp;nbsp;core.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;parallel --verbose convert &lt;span class="o"&gt;{}&lt;/span&gt; -quality &lt;span class="m"&gt;40&lt;/span&gt;% &lt;span class="o"&gt;{}&lt;/span&gt; ::: *.jpg
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;parallel&lt;/code&gt; modifies several images per second. Uploading these right away seems to be the next step. But how do you tell &lt;code&gt;rsync&lt;/code&gt; to check for modified files every now and then? Another for loop mixed with &lt;code&gt;sleep&lt;/code&gt; would work, but it just doesn&amp;#8217;t feel&amp;nbsp;right.&lt;/p&gt;
&lt;p&gt;Luckily, there&amp;#8217;s a &lt;a href="http://linux.die.net/man/1/inotifywait"&gt;&lt;code&gt;inotifywait&lt;/code&gt;&lt;/a&gt; tool capable of watching changes to files and taking actions based on those&amp;nbsp;changes.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;inotifywait -e close_write -m --format &lt;span class="s1"&gt;&amp;#39;%f&amp;#39;&lt;/span&gt; . &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="nb"&gt;read&lt;/span&gt; file
&lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$file&lt;/span&gt;
    rsync -OWRD0Pq --ignore-existing &lt;span class="nv"&gt;$file&lt;/span&gt; data@localhost
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;By default, &lt;code&gt;inotifywait&lt;/code&gt; stops after receiving a single event, while &lt;code&gt;-m&lt;/code&gt; flag runs it indefinitely. &lt;code&gt;-e&lt;/code&gt; flag defines an event to watch for, in my case that&amp;#8217;s a &lt;code&gt;close_write&lt;/code&gt; event. The &lt;code&gt;inotifywait&lt;/code&gt; output can be piped to &lt;code&gt;rsync&lt;/code&gt; that takes care of syncing local files to remote&amp;nbsp;server.&lt;/p&gt;
&lt;p&gt;The last step, as usual, is&amp;nbsp;profit.&lt;/p&gt;</content><category term="linux"></category><category term="bash"></category></entry><entry><title>Automated Map Creation With QGIS, PostGIS, Python, SVG and ImageMagick</title><link href="https://www.zimmi.cz/posts/2015/automated-map-creation-with-qgis-postgis-python-svg-and-imagemagick/" rel="alternate"></link><published>2015-08-09T07:51:00+02:00</published><updated>2015-08-09T07:51:00+02:00</updated><author><name>Michal Zimmermann</name></author><id>tag:www.zimmi.cz,2015-08-09:/posts/2015/automated-map-creation-with-qgis-postgis-python-svg-and-imagemagick/</id><summary type="html">&lt;p&gt;As mentioned in &lt;a href="https://www.zimmi.cz/posts/2015/qgis-tips-for-collaborative-mapping/"&gt;&lt;span class="caps"&gt;QGIS&lt;/span&gt; Tips For Collaborative Mapping&lt;/a&gt; we&amp;#8217;re in the middle of crop evaluation project at &lt;a href="http://www.clevermaps.cz/"&gt;CleverMaps&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;With the &lt;span class="caps"&gt;QGIS&lt;/span&gt; workflow up and running, I&amp;#8217;ve been focused on different &lt;span class="caps"&gt;QGIS&lt;/span&gt; related task: &lt;strong&gt;automatic map generation&lt;/strong&gt; for land blocks that meet certain conditions. The logic behind identifying such …&lt;/p&gt;</summary><content type="html">&lt;p&gt;As mentioned in &lt;a href="https://www.zimmi.cz/posts/2015/qgis-tips-for-collaborative-mapping/"&gt;&lt;span class="caps"&gt;QGIS&lt;/span&gt; Tips For Collaborative Mapping&lt;/a&gt; we&amp;#8217;re in the middle of crop evaluation project at &lt;a href="http://www.clevermaps.cz/"&gt;CleverMaps&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;With the &lt;span class="caps"&gt;QGIS&lt;/span&gt; workflow up and running, I&amp;#8217;ve been focused on different &lt;span class="caps"&gt;QGIS&lt;/span&gt; related task: &lt;strong&gt;automatic map generation&lt;/strong&gt; for land blocks that meet certain conditions. The logic behind identifying such land blocks is as&amp;nbsp;follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;if the original area and the measured one differ more than 0.5 %&amp;nbsp;or&lt;/li&gt;
&lt;li&gt;number of declared crops differs from number of crops identified&amp;nbsp;or&lt;/li&gt;
&lt;li&gt;at least one parcel in the land block was given a certain error&amp;nbsp;code&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let&amp;#8217;s assume that with several lines of &lt;span class="caps"&gt;SQL&lt;/span&gt; code we can store these mentioned above in a table called &lt;code&gt;land_blocks&lt;/code&gt; with geometries being the result of calling &lt;code&gt;ST_Union()&lt;/code&gt; over parcels for each land&amp;nbsp;block.&lt;/p&gt;
&lt;h2&gt;Map&amp;nbsp;composition&lt;/h2&gt;
&lt;p&gt;Every map should feature following&amp;nbsp;layers:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;land blocks (remember the &lt;code&gt;land_blocks&lt;/code&gt; table?) - labeled with &lt;span class="caps"&gt;ID&lt;/span&gt;, yellowish borders, no&amp;nbsp;fill&lt;/li&gt;
&lt;li&gt;land parcels - that&amp;#8217;s my source layer - labeled with letters, blue borders, no&amp;nbsp;fill&lt;/li&gt;
&lt;li&gt;other&amp;nbsp;layers&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;HR&lt;/span&gt;, &lt;span class="caps"&gt;VHR&lt;/span&gt;, &lt;span class="caps"&gt;NIR&lt;/span&gt; imagery, orthophoto - served via &lt;span class="caps"&gt;WMS&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Labels should be visible only for the featured land block (both for the land parcels and the land block itself. The whole map scales dynamically, showing small land blocks zoomed in and the large ones zoomed&amp;nbsp;out.&lt;/p&gt;
&lt;p class='text-center'&gt;&lt;a id="desired-map" title="Desired map" href="/posts/assets/automated-map-creation-with-qgis-postgis-python-svg-and-imagemagick/map.jpg"&gt;&lt;img title="Desired map" src="/posts/assets/automated-map-creation-with-qgis-postgis-python-svg-and-imagemagick/map.jpg" width=70% class="img-responsive centered"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Every map features additional&amp;nbsp;items:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;dynamic list of subsidies farmer asks for - showing both measured and declared&amp;nbsp;area&lt;/li&gt;
&lt;li&gt;dynamic list of land parcels with their areas and error&amp;nbsp;codes&lt;/li&gt;
&lt;li&gt;scalebar&lt;/li&gt;
&lt;li&gt;map&amp;nbsp;key&lt;/li&gt;
&lt;li&gt;logos&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Atlas&amp;nbsp;creation&lt;/h2&gt;
&lt;p&gt;Now with requirements defined, let&amp;#8217;s create some maps. It&amp;#8217;s incredibly easy to generate a series of maps with &lt;span class="caps"&gt;QGIS&lt;/span&gt; atlas&amp;nbsp;options.&lt;/p&gt;
&lt;h3&gt;Atlas generation&amp;nbsp;settings&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Coverage layer&lt;/strong&gt; is presumably the only thing you really need - as the name suggests, it covers your area of interest. One map will be created for each feature in this layer, unless you decide to use some &lt;strong&gt;filtering&lt;/strong&gt; - which I&amp;nbsp;did.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Output filenames&lt;/strong&gt; can be tweaked to your needs, here&amp;#8217;s what such a function might look like. If there is a slash in the land block &lt;span class="caps"&gt;ID&lt;/span&gt; (&lt;span class="caps"&gt;XXXXXXX&lt;/span&gt;/Y), the filename is set to &lt;code&gt;USER-ID_XXXXXXX-00Y_M_00&lt;/code&gt;, &lt;code&gt;USER-ID_XXXXXXX-000_M_00&lt;/code&gt; otherwise.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;CASE&lt;/span&gt; &lt;span class="k"&gt;WHEN&lt;/span&gt; &lt;span class="n"&gt;strpos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;attribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;atlasfeature&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;kod_pb&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;THEN&lt;/span&gt;
        &lt;span class="n"&gt;ji&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;_&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt;
        &lt;span class="n"&gt;substr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;attribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;atlasfeature&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;kod_pb&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;strpos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;attribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;atlasfeature&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;kod_pb&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="c1"&gt;-- slash position&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;-&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt;
        &lt;span class="n"&gt;lpad&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;substr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;attribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;atlasfeature&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;kod_pb&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                &lt;span class="n"&gt;strpos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;attribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;atlasfeature&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;kod_pb&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="k"&gt;length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;attribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;atlasfeature&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;kod_pb&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;_M_00&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;ELSE&lt;/span&gt;
        &lt;span class="n"&gt;ji&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;_&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;attribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;atlasfeature&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;kod_pb&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;-000_M_00&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;END&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Map scale &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; variable&amp;nbsp;substitutions&lt;/h3&gt;
&lt;p&gt;Different land blocks are of different sizes, thus needing different &lt;strong&gt;scales&lt;/strong&gt; to fit in the map. Again, &lt;span class="caps"&gt;QGIS&lt;/span&gt; handles this &lt;em&gt;might-become-a-nightmare-pretty-easily&lt;/em&gt; issue with a single click. You can define the scale&amp;nbsp;as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;margin around feature: percentage of the space displayed&amp;nbsp;around&lt;/li&gt;
&lt;li&gt;predefined scale (best fit): my choice, sometimes it doesn&amp;#8217;t display the entire land block&amp;nbsp;though&lt;/li&gt;
&lt;li&gt;fixed scale: sets the scale the same for all the&amp;nbsp;maps&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With these settings, I get a map similar to the one below. Notice two interesting&amp;nbsp;things:&lt;/p&gt;
&lt;p class='text-center'&gt;&lt;a title="QGIS map skeleton" href="/posts/assets/automated-map-creation-with-qgis-postgis-python-svg-and-imagemagick/map_skeleton.png"&gt;&lt;img title="QGIS map skeleton" src="/posts/assets/automated-map-creation-with-qgis-postgis-python-svg-and-imagemagick/map_skeleton.png" width=70% class="img-responsive centered"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Scale uses decimal places, which I find &lt;em&gt;a huge failure&lt;/em&gt;. Has anyone ever seen a map with such scale? The worst is there is no easy way to hide these, or at least I didn&amp;#8217;t find&amp;nbsp;one.&lt;/li&gt;
&lt;li&gt;You can see a bunch of &lt;code&gt;[something in the brackets]&lt;/code&gt; notations. These will be substituted with actual values during the atlas generation. Showing land block &lt;span class="caps"&gt;ID&lt;/span&gt; with a preceeding label is as easy as &lt;code&gt;[%concat('PB: ', "kod_pb")%]&lt;/code&gt; (mind the percentage&amp;nbsp;sign).&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Styling the map using atlas&amp;nbsp;features&lt;/h3&gt;
&lt;p&gt;Atlas features are a great help for &lt;strong&gt;map customization&lt;/strong&gt;. As mentioned earlier, in my case, only one land block label per map should be visible. That can be achieved with a simple label dialog&amp;nbsp;expression:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;CASE&lt;/span&gt;
    &lt;span class="k"&gt;WHEN&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;atlasfeatureid&lt;/span&gt;
    &lt;span class="k"&gt;THEN&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;kod_pb&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;END&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;span class="caps"&gt;QGIS&lt;/span&gt; keeps reference to each coverage layer feature &lt;span class="caps"&gt;ID&lt;/span&gt; during atlas generation, so you can use it for comparison. The best part is you can use IDs with &lt;strong&gt;any layer&lt;/strong&gt; you&amp;nbsp;need:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;CASE&lt;/span&gt;
    &lt;span class="k"&gt;WHEN&lt;/span&gt; &lt;span class="n"&gt;attribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;atlasfeature&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;kod_pb&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;kod_pb&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;THEN&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;kod_zp&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;END&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;With this simple expression, I get labels only for those land parcels that are part of the mapped land block. Even the &lt;strong&gt;layer style&lt;/strong&gt; can be controlled with atlas feature. Land parcels inside the land block have blue borders, the rest is yellowish, remember? It&amp;#8217;s a piece of cake with rule-based&amp;nbsp;styling.&lt;/p&gt;
&lt;p class='text-center'&gt;&lt;a title="Layer style based on atlas feature" href="/posts/assets/automated-map-creation-with-qgis-postgis-python-svg-and-imagemagick/atlas_feature_style.png"&gt;&lt;img title="Layer style based on atlas feature" src="/posts/assets/automated-map-creation-with-qgis-postgis-python-svg-and-imagemagick/atlas_feature_style.png" width=70% class="img-responsive centered"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Atlas&amp;nbsp;generation&lt;/h3&gt;
&lt;p&gt;When you&amp;#8217;re set, atlas can be created with a single button. I used &lt;span class="caps"&gt;SVG&lt;/span&gt; as an output format to easily manipulate the map content afterwards. The resulting maps look like the one in &lt;a href="#desired-map"&gt;the first picture&lt;/a&gt; without the text in the red rectangle. A Python script appends this to each map&amp;nbsp;afterwards.&lt;/p&gt;
&lt;p&gt;Roughly speaking, generating 300 maps takes an hour or so, I guess that depends on the map complexity and hardware&amp;nbsp;though.&lt;/p&gt;
&lt;h3&gt;Adding textual&amp;nbsp;content&lt;/h3&gt;
&lt;p&gt;&lt;span class="caps"&gt;SVG&lt;/span&gt; output is just plain old &lt;span class="caps"&gt;XML&lt;/span&gt; that you can edit by hand or by script. A simple Python script, part of map post-processing, loads &lt;span class="caps"&gt;SVG&lt;/span&gt; from the database and adds it to the left pane of each&amp;nbsp;map.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;
      &lt;span class="n"&gt;ji&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="n"&gt;kod_pb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="n"&gt;concat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;&amp;lt;g fill=&amp;quot;none&amp;quot; stroke=&amp;quot;#000000&amp;quot; stroke-opacity=&amp;quot;1&amp;quot; stroke-width=&amp;quot;1&amp;quot;&lt;/span&gt;
&lt;span class="s1"&gt;                  stroke-linecap=&amp;quot;square&amp;quot; stroke-linejoin=&amp;quot;bevel&amp;quot; transform=&amp;quot;matrix(1.18081,0,0,1.18081,270.0,550.0)&amp;quot;&lt;/span&gt;
&lt;span class="s1"&gt;                  font-family=&amp;quot;Droid Sans&amp;quot; font-size=&amp;quot;35&amp;quot; font-style=&amp;quot;normal&amp;quot;&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;kultura&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vymery&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vymery_hodnoty&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;vcs_titul&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vcs_brk&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vcs_brs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vcs_chmel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;vcs_zvv&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vcs_zv&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vcs_ovv&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vcs_ov&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vcs_cur&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vcs_bip&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;lfa&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lfa_h1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lfa_h2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lfa_h3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;lfa_h4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lfa_h5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lfa_oa&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lfa_ob&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lfa_s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;natura&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;aeo_eafrd_text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dv_aeo_eafrd_a1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;dv_aeo_eafrd_a2o&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dv_aeo_eafrd_a2v&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dv_aeo_eafrd_b1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;dv_aeo_eafrd_b2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dv_aeo_eafrd_b3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dv_aeo_eafrd_b4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;dv_aeo_eafrd_b5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dv_aeo_eafrd_b6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dv_aeo_eafrd_b7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;dv_aeo_eafrd_b8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dv_aeo_eafrd_b9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dv_aeo_eafrd_c1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;dv_aeo_eafrd_c3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;aeko_text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dv_aeko_a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dv_aeko_b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dv_aeko_c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;dv_aeko_d1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dv_aeko_d2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dv_aeko_d3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dv_aeko_d4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dv_aeko_d5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;dv_aeko_d6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dv_aeko_d7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dv_aeko_d8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dv_aeko_d9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dv_aeko_d10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;dv_aeko_e&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dv_aeko_f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ez&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dzes_text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rep&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;obi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;seop&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;meop&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pbz&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dzes7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;&amp;lt;/g&amp;gt;&amp;#39;&lt;/span&gt;
      &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;popis&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="p"&gt;(...);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Each column from the previous query is a result of &lt;code&gt;SELECT&lt;/code&gt; similar to the one&amp;nbsp;below.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;concat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;lt;text fill=&amp;quot;#000000&amp;quot; fill-opacity=&amp;quot;1&amp;quot; stroke=&amp;quot;none&amp;quot;&amp;gt;BrK: &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dv_brk&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39; ha / &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;MV_BRK&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39; ha;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;kod_dpz&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;lt;/text&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;vcs_brk&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;transform="matrix(1.18081,0,0,1.18081,270.0,550.0)&lt;/code&gt; part puts the text on the right spot. Great finding about &lt;span class="caps"&gt;SVG&lt;/span&gt; is that it places each &lt;code&gt;&amp;lt;text&amp;gt;&lt;/code&gt; element on the new line, so you don&amp;#8217;t need to deal with calculating the position in your&amp;nbsp;script.&lt;/p&gt;
&lt;p&gt;Scale adjustment is done with a dirty lambda&amp;nbsp;function.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;gt;(\d{1,3}\.\d{3,5})&amp;lt;/text&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;gt;    &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)))))&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;/text&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;old_map&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;&lt;span class="caps"&gt;SVG&lt;/span&gt; to &lt;span class="caps"&gt;JPEG&lt;/span&gt;&amp;nbsp;conversion&lt;/h3&gt;
&lt;p&gt;We deliver maps as &lt;span class="caps"&gt;JPEG&lt;/span&gt; files with 150 &lt;span class="caps"&gt;DPI&lt;/span&gt; on A4 paper format. &lt;a href="http://www.imagemagick.org/script/index.php"&gt;ImageMagick&lt;/a&gt; converts the formats with a simple shell&amp;nbsp;command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;convert -density &lt;span class="m"&gt;150&lt;/span&gt; -resize 1753x1240 input.svg output.jpg
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I created pretty efficient semi-automated workflow using several open source technologies that saves me a lot of work. Although &lt;span class="caps"&gt;QGIS&lt;/span&gt; has some minor pet peeves (scale with decimal places, not showing the entire feature, not substituting variables at times), it definitely makes boring map creation quite amusing. The more I work with big data / on big tasks, the more I find Linux a&amp;nbsp;must-have.&lt;/p&gt;
&lt;p&gt;The whole process was done with &lt;span class="caps"&gt;QGIS&lt;/span&gt; 2.10, PostGIS 2.1, PostgreSQL 9.3, Python 2.7, ImageMagick&amp;nbsp;6.7.&lt;/p&gt;</content><category term="qgis"></category><category term="postgis"></category><category term="python"></category><category term="svg"></category><category term="linux"></category></entry><entry><title>Clip Raster With Vector Using GDAL</title><link href="https://www.zimmi.cz/posts/2015/clip-raster-with-vector-using-gdal/" rel="alternate"></link><published>2015-07-21T07:51:00+02:00</published><updated>2015-07-21T07:51:00+02:00</updated><author><name>Michal Zimmermann</name></author><id>tag:www.zimmi.cz,2015-07-21:/posts/2015/clip-raster-with-vector-using-gdal/</id><summary type="html">&lt;p&gt;Recently I needed to clip several raster files with polygonal layer of municipalities. A solution to this task is pretty straightforward using &lt;a href="http://gdal.org/"&gt;&lt;span class="caps"&gt;GDAL&lt;/span&gt;&lt;/a&gt; and a bit of Bash and &lt;span class="caps"&gt;QGIS&lt;/span&gt; thrown&amp;nbsp;in.&lt;/p&gt;
&lt;p&gt;The necessary steps&amp;nbsp;are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Put each polygon to a separate file. This can be done easily with &lt;code&gt;Vector …&lt;/code&gt;&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;Recently I needed to clip several raster files with polygonal layer of municipalities. A solution to this task is pretty straightforward using &lt;a href="http://gdal.org/"&gt;&lt;span class="caps"&gt;GDAL&lt;/span&gt;&lt;/a&gt; and a bit of Bash and &lt;span class="caps"&gt;QGIS&lt;/span&gt; thrown&amp;nbsp;in.&lt;/p&gt;
&lt;p&gt;The necessary steps&amp;nbsp;are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Put each polygon to a separate file. This can be done easily with &lt;code&gt;Vector - Data Management Tools - Split Vector Layer&lt;/code&gt; in &lt;span class="caps"&gt;QGIS&lt;/span&gt;. The solution below assumes that each shapefile has the same basename as the raster&amp;nbsp;file.&lt;/li&gt;
&lt;li&gt;These polygons are stored in the &lt;code&gt;obce&lt;/code&gt; subfolder relative to the folder with&amp;nbsp;rasters.&lt;/li&gt;
&lt;li&gt;An &lt;code&gt;output&lt;/code&gt; folder exists that is used for&amp;#8230; output,&amp;nbsp;yes.&lt;/li&gt;
&lt;li&gt;Rasters are saved with output alpha band for nodata (&lt;code&gt;-dstalpha&lt;/code&gt; flag).&lt;/li&gt;
&lt;li&gt;The script takes one argument - raster&amp;nbsp;name.&lt;/li&gt;
&lt;li&gt;Profit!&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env bash&lt;/span&gt;

&lt;span class="nv"&gt;OBEC&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;
&lt;span class="nv"&gt;BASE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;basename &lt;span class="nv"&gt;$OBEC&lt;/span&gt; _jpeg.tif&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$BASE&lt;/span&gt;
&lt;span class="nv"&gt;EXTENT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;ogrinfo -so obce/&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;BASE&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;.shp &lt;span class="nv"&gt;$BASE&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; grep Extent &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; sed &lt;span class="s1"&gt;&amp;#39;s/Extent: //g&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sed &lt;span class="s1"&gt;&amp;#39;s/(//g&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sed &lt;span class="s1"&gt;&amp;#39;s/)//g&amp;#39;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; sed &lt;span class="s1"&gt;&amp;#39;s/ - /, /g&amp;#39;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;EXTENT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$EXTENT&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; awk -F &lt;span class="s1"&gt;&amp;#39;,&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{print $1 &amp;quot; &amp;quot; $4 &amp;quot; &amp;quot; $3 &amp;quot; &amp;quot; $2}&amp;#39;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
gdal_translate -projwin &lt;span class="nv"&gt;$EXTENT&lt;/span&gt; -of GTiff &lt;span class="nv"&gt;$OBEC&lt;/span&gt; output/&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;BASE&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;.tif
gdalwarp -dstalpha -s_srs &lt;span class="s1"&gt;&amp;#39;EPSG:5514&amp;#39;&lt;/span&gt; -t_srs &lt;span class="s1"&gt;&amp;#39;EPSG:5514&amp;#39;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    -co &lt;span class="nv"&gt;COMPRESS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;JPEG &lt;span class="se"&gt;\&lt;/span&gt;
    -co &lt;span class="nv"&gt;TILED&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;YES -&lt;span class="se"&gt;\&lt;/span&gt;
    of GTiff &lt;span class="se"&gt;\&lt;/span&gt;
    -cutline obce/&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;BASE&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;.shp &lt;span class="se"&gt;\&lt;/span&gt;
    output/&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;BASE&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;.tif output/&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;BASE&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;.final.tif
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that if &lt;code&gt;gdalwarp&lt;/code&gt; doesn&amp;#8217;t recognize an &lt;span class="caps"&gt;EPSG&lt;/span&gt; code (which is the case for my country national grid), you might pass it as a &lt;span class="caps"&gt;PROJ&lt;/span&gt;.4&amp;nbsp;string.&lt;/p&gt;
&lt;p&gt;According to the point 5 in the above list, the script needs to be run in a&amp;nbsp;loop:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; f in *_jpeg.tif&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;do&lt;/span&gt; the_script_above.sh &lt;span class="nv"&gt;$f&lt;/span&gt;
&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="linux"></category><category term="gdal"></category></entry><entry><title>Filtering points by distance in PostGIS</title><link href="https://www.zimmi.cz/posts/2015/filtering-points-by-distance-in-postgis/" rel="alternate"></link><published>2015-07-21T07:51:00+02:00</published><updated>2015-07-21T07:51:00+02:00</updated><author><name>Michal Zimmermann</name></author><id>tag:www.zimmi.cz,2015-07-21:/posts/2015/filtering-points-by-distance-in-postgis/</id><summary type="html">&lt;p&gt;Filtering really big (millions of rows) point datasets by distance might get catchy when solved with wrong PostGIS functions. Without spatial indexes PostGIS would take ages to finish such&amp;nbsp;task.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://gis.stackexchange.com/questions/148184/why-the-execution-of-a-query-is-very-slow-using-postgis"&gt;Someone over StackExchange asked&lt;/a&gt; why the next query had been running for 15 hours (!) with no&amp;nbsp;result:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gid …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Filtering really big (millions of rows) point datasets by distance might get catchy when solved with wrong PostGIS functions. Without spatial indexes PostGIS would take ages to finish such&amp;nbsp;task.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://gis.stackexchange.com/questions/148184/why-the-execution-of-a-query-is-very-slow-using-postgis"&gt;Someone over StackExchange asked&lt;/a&gt; why the next query had been running for 15 hours (!) with no&amp;nbsp;result:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;ST_Distance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;geom&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;geom&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt;
    &lt;span class="n"&gt;shp1&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;shp2&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;span class="k"&gt;WHERE&lt;/span&gt;
    &lt;span class="n"&gt;ST_Intersects&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;ST_Difference&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;ST_Buffer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;geom&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="n"&gt;ST_Buffer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;geom&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;geom&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;AND&lt;/span&gt;
    &lt;span class="k"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;400&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The answer is quite simple: because it was using wrong functions. Let&amp;#8217;s&amp;nbsp;see:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;ST_Distance()&lt;/code&gt; does not use spatial index, it&amp;#8217;s a simple mathematical calculation, it&amp;#8217;s expensive and it can be replaced by spatial operator for point&amp;nbsp;datasets.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ST_Buffer()&lt;/code&gt; will definitely take time to build polygons around points. And it&amp;#8217;s being run&amp;nbsp;twice!&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ST_Difference()&lt;/code&gt; needs more time to compare the buffers and return just the portion of space they don&amp;#8217;t share. Isn&amp;#8217;t it a huge waste to create buffers and then throw them&amp;nbsp;away?&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ST_Intersects()&lt;/code&gt; finally checks whether the point should be included in the&amp;nbsp;result.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;That was a great challenge to test my knowledge of how PostGIS works and here&amp;#8217;s my shot at&amp;nbsp;it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="k"&gt;SELECT&lt;/span&gt;
        &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;geom&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;geom&lt;/span&gt; &lt;span class="n"&gt;distance&lt;/span&gt;
    &lt;span class="k"&gt;FROM&lt;/span&gt;
        &lt;span class="n"&gt;shp1&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;shp2&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
    &lt;span class="k"&gt;WHERE&lt;/span&gt;
        &lt;span class="k"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;400&lt;/span&gt; &lt;span class="k"&gt;AND&lt;/span&gt;
        &lt;span class="n"&gt;ST_DWithin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;geom&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;geom&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;sq&lt;/span&gt;
&lt;span class="k"&gt;WHERE&lt;/span&gt;
    &lt;span class="n"&gt;distance&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;I use &lt;a href="http://postgis.net/docs/geometry_distance_centroid.html"&gt;&lt;code&gt;&amp;lt;-&amp;gt;&lt;/code&gt;&lt;/a&gt;, a.k.a geometry distance centroid instead of &lt;code&gt;ST_Distance()&lt;/code&gt;. It takes advantage of spatial indexes, thus it&amp;#8217;s fast. And it&amp;#8217;s perfectly fine to use it with point dataset, because the centroid of a bounding box of a point is? That point, exactly. &lt;strong&gt;Spatial indexes have to be built&amp;nbsp;beforehand.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Buffers are not necessary to check whether a geometry lies in a certain distance from another one. That&amp;#8217;s what &lt;code&gt;ST_Dwithin()&lt;/code&gt; was made for. With the inner &lt;code&gt;WHERE&lt;/code&gt; clause I get all the points lying at most 2,000 meters from the current, having the absolute value difference bigger than 400. &lt;code&gt;ST_Dwithin()&lt;/code&gt; will make use of any spatial index available, unlike &lt;code&gt;ST_Distance()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The outer &lt;code&gt;WHERE&lt;/code&gt; clause throws away all the points closer than 500 meters. Remember, we already got only those not further than 2,000 meters from the previous&amp;nbsp;step.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It took PostGIS 1060545,590 ms (~ 17 minutes) on my Quad-Core Intel® Core™ i5-4210M &lt;span class="caps"&gt;CPU&lt;/span&gt; @ 2.60GHz, 4 &lt;span class="caps"&gt;GB&lt;/span&gt; &lt;span class="caps"&gt;RAM&lt;/span&gt;, 500 &lt;span class="caps"&gt;GB&lt;/span&gt; &lt;span class="caps"&gt;SSD&lt;/span&gt; hard drive, PostgreSQL 9.3 and PostGIS 2.1 with two point datasets having 4M and 300K rows,&amp;nbsp;respectively.&lt;/p&gt;</content><category term="postgis"></category></entry><entry><title>QGIS Tips For Collaborative Mapping</title><link href="https://www.zimmi.cz/posts/2015/qgis-tips-for-collaborative-mapping/" rel="alternate"></link><published>2015-07-21T07:51:00+02:00</published><updated>2015-07-21T07:51:00+02:00</updated><author><name>Michal Zimmermann</name></author><id>tag:www.zimmi.cz,2015-07-21:/posts/2015/qgis-tips-for-collaborative-mapping/</id><summary type="html">&lt;p&gt;Right now I&amp;#8217;m setting up a project aimed at crop evaluation over ortophotos, &lt;span class="caps"&gt;HR&lt;/span&gt; and &lt;span class="caps"&gt;VHR&lt;/span&gt; imagery. All the steps of evaluation will be done in &lt;span class="caps"&gt;QGIS&lt;/span&gt; with PostGIS used for data storage and&amp;nbsp;post-processing.&lt;/p&gt;
&lt;p&gt;In the initial phase, fifteen &lt;span class="caps"&gt;GIS&lt;/span&gt; operators will be using &lt;span class="caps"&gt;QGIS&lt;/span&gt; to reshape geometries …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Right now I&amp;#8217;m setting up a project aimed at crop evaluation over ortophotos, &lt;span class="caps"&gt;HR&lt;/span&gt; and &lt;span class="caps"&gt;VHR&lt;/span&gt; imagery. All the steps of evaluation will be done in &lt;span class="caps"&gt;QGIS&lt;/span&gt; with PostGIS used for data storage and&amp;nbsp;post-processing.&lt;/p&gt;
&lt;p&gt;In the initial phase, fifteen &lt;span class="caps"&gt;GIS&lt;/span&gt; operators will be using &lt;span class="caps"&gt;QGIS&lt;/span&gt; to reshape geometries and fill attribute data accordingly. Fifteen are not so many, but it is enough to be a possible source of errors. Luckily, there are many things you can do with &lt;span class="caps"&gt;QGIS&lt;/span&gt; to prevent people from making&amp;nbsp;mistakes.&lt;/p&gt;
&lt;h2&gt;&lt;span class="caps"&gt;QGIS&lt;/span&gt; project&amp;nbsp;file&lt;/h2&gt;
&lt;p&gt;&lt;span class="caps"&gt;QGIS&lt;/span&gt; project, the .qgs file, is a pure &lt;span class="caps"&gt;XML&lt;/span&gt; and, unlike &lt;span class="caps"&gt;ESRI&lt;/span&gt;&amp;#8217;s .mxd, can be edited with any text editor. That&amp;#8217;s great advantage when you need to prepare one project for many different operators. My project has to load some database layers that should be different for different operators that have different database&amp;nbsp;accounts.&lt;/p&gt;
&lt;p&gt;How do you do that? It&amp;#8217;s enough to create a project using your own credentials and then replace them with &lt;code&gt;USERNAME&lt;/code&gt; and &lt;code&gt;PASSWORD&lt;/code&gt; strings as seen below. What happens when the user loads the&amp;nbsp;project?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;datasource&amp;gt;&lt;/span&gt;dbname=&amp;#39;database&amp;#39; host=host port=5432 user=&amp;#39;USERNAME&amp;#39; password=&amp;#39;PASSWORD&amp;#39; sslmode=require key=&amp;#39;qgis_id&amp;#39; srid=5514 type=POLYGON table=&amp;quot;schema&amp;quot;.&amp;quot;table&amp;quot; (wkb_geometry) sql=&lt;span class="nt"&gt;&amp;lt;/datasource&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A popup window will be shown asking him/her to handle bad layers, as &lt;span class="caps"&gt;QGIS&lt;/span&gt; will not be able to connect to the layer. When he/she fills in right credentials (just once), the layer will be loaded. Don&amp;#8217;t forget to &lt;strong&gt;use a table name that doesn&amp;#8217;t exist&lt;/strong&gt;, &lt;span class="caps"&gt;QGIS&lt;/span&gt; will use the credentials stored with PostGIS connection otherwise and won&amp;#8217;t ask for them. &lt;em&gt;I don&amp;#8217;t like this&amp;nbsp;behaviour.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Using this multiple times for each user-specific layer is a great time&amp;nbsp;saver.&lt;/p&gt;
&lt;h2&gt;Adjust attribute table to fit your&amp;nbsp;needs&lt;/h2&gt;
&lt;p&gt;&lt;span class="caps"&gt;QGIS&lt;/span&gt; attribute table has so many settings you probably don&amp;#8217;t use on daily basis and yet they might be invaluable in such project. All of them are available from layer properties under the Fields&amp;nbsp;tab.&lt;/p&gt;
&lt;p class='text-center'&gt;&lt;img data-echo="/posts/assets/qgis-tips-for-collaborative-mapping/hidden.png" width=50% class="img-responsive centered"&gt;&lt;/p&gt;

&lt;p&gt;Sadly, our PostGIS layers are very wide in terms of column count. Not all of the columns are to be edited or even seen by operators, so it might be a good idea to hide them by setting their Edit Widget to Hidden. Those that should be seen, but not edited, might be set as not editable by unchecking that&amp;nbsp;option.&lt;/p&gt;
&lt;p&gt;Lots of our attributes use enumerations provided by our project partner as &lt;span class="caps"&gt;CSV&lt;/span&gt; files. We use them in &lt;span class="caps"&gt;QGIS&lt;/span&gt; as value maps, so operators don&amp;#8217;t have to type them manually - we both make their work easier and eliminate mistakes they&amp;nbsp;made.&lt;/p&gt;
&lt;p class='text-center'&gt;&lt;img data-echo="/posts/assets/qgis-tips-for-collaborative-mapping/valuemap.png" width=50% class="img-responsive centered"&gt;&lt;/p&gt;

&lt;p&gt;Note &lt;span class="caps"&gt;QGIS&lt;/span&gt; swallows the first row of the given &lt;span class="caps"&gt;CSV&lt;/span&gt; file as if it was a header. Don&amp;#8217;t forget about this when creating your own enumerations. Once set, operators will see a friendly combo box instead of a hostile blank input in the attribute&amp;nbsp;table.&lt;/p&gt;
&lt;p&gt;These are just small adjustments that can make a big difference in your &lt;span class="caps"&gt;QGIS&lt;/span&gt;&amp;nbsp;workflow.&lt;/p&gt;</content><category term="qgis"></category></entry><entry><title>SSH GRASS Processing Status Check</title><link href="https://www.zimmi.cz/posts/2015/ssh-grass-processing-status-check/" rel="alternate"></link><published>2015-07-21T07:51:00+02:00</published><updated>2015-07-21T07:51:00+02:00</updated><author><name>Michal Zimmermann</name></author><id>tag:www.zimmi.cz,2015-07-21:/posts/2015/ssh-grass-processing-status-check/</id><summary type="html">&lt;p&gt;I&amp;#8217;ve been running some &lt;span class="caps"&gt;GRASS&lt;/span&gt;/PostGIS computations on a remote server that were taking hours to finish. Once in a while I checked for their state by issuing &lt;code&gt;tail log_XX.log&lt;/code&gt; from my laptop to see if they were ready yet. It suddenly became pretty annoying to check five …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I&amp;#8217;ve been running some &lt;span class="caps"&gt;GRASS&lt;/span&gt;/PostGIS computations on a remote server that were taking hours to finish. Once in a while I checked for their state by issuing &lt;code&gt;tail log_XX.log&lt;/code&gt; from my laptop to see if they were ready yet. It suddenly became pretty annoying to check five different logs every ten&amp;nbsp;minutes.&lt;/p&gt;
&lt;p&gt;Instead of waiting and checking the logs, I thought it would be great to automate this. And it would be awesome if checking was fun. So I wrote a simple routine that takes log number as an argument (every process logs to a separate logfile) and checks it every minute until it says &lt;em&gt;done&lt;/em&gt;. Right after that &lt;code&gt;notify-send&lt;/code&gt; gives me a neat popup and Queen starts playing their &lt;em&gt;We are the champions&lt;/em&gt; thanks to &lt;code&gt;mpg123&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env bash&lt;/span&gt;
&lt;span class="nv"&gt;item&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt; true&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;############ &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;item&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; ############&amp;quot;&lt;/span&gt;
    &lt;span class="nv"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;ssh user@remote.server &lt;span class="s2"&gt;&amp;quot;tail -n 30 path/to/my/log_&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;item&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.log&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="nv"&gt;$x&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; *&lt;span class="s2"&gt;&amp;quot;done&amp;quot;&lt;/span&gt;* &lt;span class="o"&gt;]]&lt;/span&gt;
        &lt;span class="k"&gt;then&lt;/span&gt;
            notify-send -u critical &lt;span class="s2"&gt;&amp;quot;Finally &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;item&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
            mpg123 -n &lt;span class="m"&gt;250&lt;/span&gt; ~/Music/queen-we_are_the_champions.mp3
            &lt;span class="nb"&gt;exit&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Not yet&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;fi&lt;/span&gt;
    sleep &lt;span class="m"&gt;60&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;What seemed to be really frustrating makes me happy right now. Unless Freddie starts singing in the middle of the&amp;nbsp;night.&lt;/p&gt;</content><category term="bash"></category><category term="linux"></category></entry><entry><title>Animating SVG Maps With SMIL</title><link href="https://www.zimmi.cz/posts/2015/animating-svg-maps-with-smil/" rel="alternate"></link><published>2015-04-29T18:24:00+02:00</published><updated>2015-04-29T18:24:00+02:00</updated><author><name>Michal Zimmermann</name></author><id>tag:www.zimmi.cz,2015-04-29:/posts/2015/animating-svg-maps-with-smil/</id><summary type="html">&lt;p&gt;Using &lt;span class="caps"&gt;SVG&lt;/span&gt; to build web maps have both pros and cons and to be honest I don&amp;#8217;t know any &lt;em&gt;serious&lt;/em&gt; map/&lt;span class="caps"&gt;GIS&lt;/span&gt; project built on top of &lt;span class="caps"&gt;SVG&lt;/span&gt;. However, as a part of my job at university, I was forced to use both &lt;span class="caps"&gt;SVG&lt;/span&gt; and &lt;span class="caps"&gt;SMIL&lt;/span&gt; to produce animated …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Using &lt;span class="caps"&gt;SVG&lt;/span&gt; to build web maps have both pros and cons and to be honest I don&amp;#8217;t know any &lt;em&gt;serious&lt;/em&gt; map/&lt;span class="caps"&gt;GIS&lt;/span&gt; project built on top of &lt;span class="caps"&gt;SVG&lt;/span&gt;. However, as a part of my job at university, I was forced to use both &lt;span class="caps"&gt;SVG&lt;/span&gt; and &lt;span class="caps"&gt;SMIL&lt;/span&gt; to produce animated web map (see the small version below or the big one at &lt;a href="https://zimmicz.github.io/svg-smil-airplanes/map.svg"&gt;GitHub&lt;/a&gt;) and I&amp;#8217;d like to share my&amp;nbsp;findings.&lt;/p&gt;
&lt;p&gt;&lt;object width="400" data="https://zimmicz.github.io/svg-smil-airplanes/map.svg" type="image/svg+xml"&gt;&lt;/object&gt;&lt;/p&gt;
&lt;h2&gt;Data&amp;nbsp;preprocessing&lt;/h2&gt;
&lt;p&gt;I chose &lt;a href="http://www.naturalearthdata.com/"&gt;Natural Earth dataset&lt;/a&gt; both for basemap and thematic&amp;nbsp;layer:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;countries polygon layer for&amp;nbsp;basemap&lt;/li&gt;
&lt;li&gt;airports point layer for thematic&amp;nbsp;layer&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I decided that animation should go like&amp;nbsp;this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Load basemap and Vaclav Havel airport (&lt;span class="caps"&gt;PRG&lt;/span&gt;).&lt;/li&gt;
&lt;li&gt;Animate destinations one by one. They are revealed in order of their distance from &lt;span class="caps"&gt;PRG&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;Animate&amp;nbsp;airways.&lt;/li&gt;
&lt;li&gt;Once airways are animated, animate airplanes along their path from &lt;span class="caps"&gt;PRG&lt;/span&gt; to their destination in order of their time of&amp;nbsp;departure.&lt;/li&gt;
&lt;li&gt;Profit.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;My goal was to create an animation of all departures from Vaclav Havel airport during one day. These data can be obtained at &lt;a href="http://www.flightstats.com/"&gt;FlightStats&lt;/a&gt;, I didn&amp;#8217;t find a way make this process automatic though. &lt;a href="http://openflights.org/"&gt;OpenFlights&lt;/a&gt; might be better source&amp;nbsp;then.&lt;/p&gt;
&lt;h2&gt;&lt;span class="caps"&gt;SVG&lt;/span&gt;&amp;nbsp;creation&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://kartograph.org/"&gt;Kartograph&lt;/a&gt; is a great tool both for &lt;span class="caps"&gt;SVG&lt;/span&gt; generation and scripting. What a pity it&amp;#8217;s probably a dead project according to the last commit date. After installing Python part of library used to create &lt;span class="caps"&gt;SVG&lt;/span&gt; files out of vector geometries, it can be run with something like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;kartograph --output map.svg --pretty-print --style style.css config.json
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Pretty self-explanatory, let&amp;#8217;s have a look at config&amp;nbsp;file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;layers&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;countries&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;src&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ne_50m_admin_0_countries/ne_50m_admin_0_countries.shp&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;attributes&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;airports&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;src&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ne_10m_airports/ne_10m_airports_prg.shp&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;attributes&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;abbrev&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;travels&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;src&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ne_10m_airports/travels.shp&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;attributes&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;time&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;distance&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;grid&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;special&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;graticule&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;latitudes&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;longitudes&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;proj&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;satellite&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;lon0&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;lat0&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;48.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;dist&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;45&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;up&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;bounds&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;mode&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;bbox&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;data&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;180&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;180&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;padding&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;export&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;round&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;width&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;ratio&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It is possible to adjust map settings in many different ways. The most&amp;nbsp;important/interesting:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Choose what attributes you want to have exported from source file with &lt;code&gt;attributes&lt;/code&gt; key for every layer. They&amp;#8217;ll be available as &lt;code&gt;data-&lt;/code&gt; attribute of &lt;span class="caps"&gt;SVG&lt;/span&gt;&amp;nbsp;elements.&lt;/li&gt;
&lt;li&gt;It comes with Grid generation packed in! Really great. Sea generation works for some projections&amp;nbsp;only.&lt;/li&gt;
&lt;li&gt;Set the projections you want to use with additional&amp;nbsp;settings.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bounds&lt;/code&gt; settings should - according to the docs - use layer extent as well, I couldn&amp;#8217;t make it work though. Use &lt;code&gt;[-180, -90, 180, 90]&lt;/code&gt; as a workaround to get the whole world. Don&amp;#8217;t forget to set &lt;code&gt;padding&lt;/code&gt;, so your map doesn&amp;#8217;t get clipped on&amp;nbsp;edges.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;export&lt;/code&gt;ing coordinates rounded to one decimal place makes your &lt;span class="caps"&gt;SVG&lt;/span&gt; a lot&amp;nbsp;smaller.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can change &lt;span class="caps"&gt;SVG&lt;/span&gt; look with simple &lt;span class="caps"&gt;CSS&lt;/span&gt;, just be sure to use layer names as &lt;span class="caps"&gt;CSS&lt;/span&gt;&amp;nbsp;ids:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="nn"&gt;airports&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#CC0000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;fill-opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;stroke&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#660000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;stroke-opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="nn"&gt;countries&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#e6deb4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;stroke&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#a59f81&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="nn"&gt;grid&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;stroke&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#d0d0d0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;stroke-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;.3&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="nn"&gt;travels&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;stroke&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#1f78b4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;stroke-opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;stroke-dasharray&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Data adjustment &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt;&amp;nbsp;animation&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;&lt;span class="caps"&gt;SMIL&lt;/span&gt;&lt;/strong&gt; is a &lt;span class="caps"&gt;XML&lt;/span&gt; based language for multimedia representation. It comes ready for timing, animation, visual transitions etc. I guess it might be considered easier to read for a web development beginner. Once you start using it, you immediately realize it suffers from the same disease like &lt;span class="caps"&gt;XML&lt;/span&gt; does: it is so&amp;nbsp;wordy!&lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s get back to my example. To animate airports one by one, let&amp;#8217;s give them unique ids, so they look something&amp;nbsp;like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;circle&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;brs&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;stroke-opacity=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;0&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;fill-opacity=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;0&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;cx=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;476.597304864&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;cy=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;539.487783171&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;data-abbrev=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;BRS&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;data-name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Bristol Int&amp;#39;l&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;r=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;3&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That&amp;#8217;s something you do by hand as kartograph doesn&amp;#8217;t give ids to &lt;span class="caps"&gt;SVG&lt;/span&gt; elements. Once you&amp;#8217;re done with that, you can run &lt;span class="caps"&gt;SMIL&lt;/span&gt; animation. If you look closer at the final map, you&amp;#8217;ll notice there are three properties animated for each airport: fill opacity, stroke opacity and radius. Each property needs to use separate &lt;span class="caps"&gt;SMIL&lt;/span&gt; &lt;code&gt;&amp;lt;animate /&amp;gt;&lt;/code&gt;, which might look like the one&amp;nbsp;below:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;animate&lt;/span&gt; &lt;span class="na"&gt;attributeName=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;fill-opacity&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;kos_ani_fo&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;from=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;0&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;to=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;begin=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;osr_ani.end&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;dur=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;0.25s&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;fill=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;freeze&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;xlink:href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;#kos&amp;quot;&lt;/span&gt;
&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;animate&lt;/span&gt; &lt;span class="na"&gt;attributeName=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;stroke-opacity&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;kos_ani_so&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;from=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;0&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;to=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;begin=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;osr_ani.end&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;dur=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;0.25s&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;fill=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;freeze&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;xlink:href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;#kos&amp;quot;&lt;/span&gt;
&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;animate&lt;/span&gt; &lt;span class="na"&gt;attributeName=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;r&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;kos_ani_r&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;from=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;10px&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;to=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;3px&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;begin=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;osr_ani.end&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;dur=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;0.25s&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;xlink:href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;#kos&amp;quot;&lt;/span&gt;
&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I guess you get the idea how long this would take for more airports. Make sure to notice that &lt;span class="caps"&gt;SMIL&lt;/span&gt; can start animation based on another animation&amp;#8217;s end (&lt;code&gt;osr_ani.end&lt;/code&gt;) - that&amp;#8217;s pretty&amp;nbsp;neat.&lt;/p&gt;
&lt;p&gt;Airways animation works almost the same. First, add unique id to each&amp;nbsp;airway:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;path&lt;/span&gt; &lt;span class="na"&gt;d=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;M550.9,562.9L568.0,495.0 &amp;quot;&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;travel-arn&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Second, start animation after all the airports are visible on the map. Notice the initial definition of &lt;code&gt;d&lt;/code&gt; attribute - it&amp;#8217;s a line with zero&amp;nbsp;length.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;animate&lt;/span&gt; &lt;span class="na"&gt;attributeName=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;d&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;path_ani&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;from=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;M550.9,562.9L550.9,562.9&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;to=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;M550.9,562.9L568.0,495.0&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;begin=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;icn_ani_r.end&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;dur=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;3s&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;xlink:href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;#travel-arn&amp;quot;&lt;/span&gt;
&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Once airways animation has finished, let airplanes fly around the globe with a simple JavaScript&amp;nbsp;function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;/**&lt;/span&gt;
&lt;span class="c"&gt; * @param  number coef  scale radius by number of flights to the given destination&lt;/span&gt;
&lt;span class="c"&gt; * @param  string flight_id&lt;/span&gt;
&lt;span class="c"&gt; */&lt;/span&gt;
&lt;span class="nt"&gt;var&lt;/span&gt; &lt;span class="nt"&gt;circle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;function&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;coef&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;flight_id&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;timeshift&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;var&lt;/span&gt; &lt;span class="err"&gt;svgns&lt;/span&gt; &lt;span class="err"&gt;=&lt;/span&gt; &lt;span class="err"&gt;&amp;quot;&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;www&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;w3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;svg&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;;&lt;/span&gt;
&lt;span class="s2"&gt;    var svgDocument =document;&lt;/span&gt;
&lt;span class="s2"&gt;    var motion = svgDocument.createElementNS(svgns,&amp;quot;&lt;/span&gt;&lt;span class="n"&gt;animateMotion&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;);&lt;/span&gt;
&lt;span class="s2"&gt;    var animation = svgDocument.createElementNS(svgns,&amp;quot;&lt;/span&gt;&lt;span class="n"&gt;animate&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;);&lt;/span&gt;
&lt;span class="s2"&gt;    var shape  = svgDocument.createElementNS(svgns, &amp;quot;&lt;/span&gt;&lt;span class="kc"&gt;circle&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;);&lt;/span&gt;
&lt;span class="s2"&gt;    var time = 15 + timeshift;&lt;/span&gt;
&lt;span class="s2"&gt;    var dur = document.getElementById(flight_id).getAttributeNS(null, &amp;quot;&lt;/span&gt;&lt;span class="n"&gt;data-dist&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;)/100;&lt;/span&gt;
&lt;span class="s2"&gt;    motion.setAttribute(&amp;quot;&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;, time + &amp;quot;&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;);&lt;/span&gt;
&lt;span class="s2"&gt;    motion.setAttribute(&amp;quot;&lt;/span&gt;&lt;span class="n"&gt;dur&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;, dur + &amp;quot;&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;);&lt;/span&gt;
&lt;span class="s2"&gt;    motion.setAttribute(&amp;quot;&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;, document.getElementById(flight_id).getAttributeNS(null, &amp;quot;&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;));&lt;/span&gt;
&lt;span class="s2"&gt;    motion.setAttribute(&amp;quot;&lt;/span&gt;&lt;span class="n"&gt;xlink&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;href&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;, &amp;quot;&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; + flight_id);&lt;/span&gt;
&lt;span class="s2"&gt;    motion.setAttribute(&amp;quot;&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;, flight_id + &amp;quot;&lt;/span&gt;&lt;span class="n"&gt;_motion&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;);&lt;/span&gt;

&lt;span class="s2"&gt;    animation.setAttribute(&amp;quot;&lt;/span&gt;&lt;span class="n"&gt;attributeName&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;, &amp;quot;&lt;/span&gt;&lt;span class="k"&gt;opacity&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;);&lt;/span&gt;
&lt;span class="s2"&gt;    animation.setAttribute(&amp;quot;&lt;/span&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;, &amp;quot;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;);&lt;/span&gt;
&lt;span class="s2"&gt;    animation.setAttribute(&amp;quot;&lt;/span&gt;&lt;span class="kc"&gt;to&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;, &amp;quot;&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;);&lt;/span&gt;
&lt;span class="s2"&gt;    animation.setAttribute(&amp;quot;&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;, time + dur + &amp;quot;&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;);&lt;/span&gt;
&lt;span class="s2"&gt;    animation.setAttribute(&amp;quot;&lt;/span&gt;&lt;span class="n"&gt;dur&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;, &amp;quot;&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="kt"&gt;s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;);&lt;/span&gt;
&lt;span class="s2"&gt;    animation.setAttribute(&amp;quot;&lt;/span&gt;&lt;span class="kc"&gt;fill&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;, &amp;quot;&lt;/span&gt;&lt;span class="n"&gt;freeze&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;);&lt;/span&gt;


&lt;span class="s2"&gt;    shape.setAttributeNS(null, &amp;quot;&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;,  1*coef);&lt;/span&gt;
&lt;span class="s2"&gt;    shape.setAttributeNS(null, &amp;quot;&lt;/span&gt;&lt;span class="kc"&gt;fill&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;, &amp;quot;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="n"&gt;f78b4&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;);&lt;/span&gt;
&lt;span class="s2"&gt;    shape.setAttributeNS(null, &amp;quot;&lt;/span&gt;&lt;span class="n"&gt;stroke&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;, &amp;quot;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="n"&gt;f78b4&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;);&lt;/span&gt;
&lt;span class="s2"&gt;    shape.setAttribute(&amp;quot;&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;, &amp;quot;&lt;/span&gt;&lt;span class="n"&gt;airplane-&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; + flight_id);&lt;/span&gt;
&lt;span class="s2"&gt;    shape.appendChild(motion);&lt;/span&gt;
&lt;span class="s2"&gt;    shape.appendChild(animation);&lt;/span&gt;

&lt;span class="s2"&gt;    document.getElementById(&amp;quot;&lt;/span&gt;&lt;span class="n"&gt;airplanes&lt;/span&gt;&lt;span class="err"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;span class="caps"&gt;SMIL&lt;/span&gt; with &lt;span class="caps"&gt;SVG&lt;/span&gt; seems to be interesting option for web map animation, a bit lengthy though. Syncing animations can easily become pain in the ass (&lt;a href="https://stackoverflow.com/questions/29897355/svg-smil-animatemotion-only-triggers-once/"&gt;see StackOverflow thread&lt;/a&gt;). Never call your function &lt;code&gt;animate&lt;/code&gt; - there is namesake function defined in &lt;a href="https://w3c.github.io/web-animations/"&gt;Web Animations &lt;span class="caps"&gt;API&lt;/span&gt;&lt;/a&gt; that makes animation crash in Chrome. &lt;code&gt;&amp;lt;animateMotion /&amp;gt;&lt;/code&gt; is a great tool to animate elements along&amp;nbsp;path.&lt;/p&gt;</content><category term="svg"></category><category term="smil"></category></entry><entry><title>GRASS: Big Buffers Made Easy</title><link href="https://www.zimmi.cz/posts/2015/grass-big-buffers-made-easy/" rel="alternate"></link><published>2015-04-20T21:06:00+02:00</published><updated>2015-04-20T21:06:00+02:00</updated><author><name>Michal Zimmermann</name></author><id>tag:www.zimmi.cz,2015-04-20:/posts/2015/grass-big-buffers-made-easy/</id><summary type="html">&lt;p&gt;Recently I&amp;#8217;ve written about &lt;a href="/2015/postgis-buffers-intersections-differences-and-collections/"&gt;struggling with fairly complex geometries in PostGIS&lt;/a&gt;. Lesson learned from the last time was to use more smaller geometries instead of several really huge. You can obtain the small ones from the big by &lt;a href="/2015/postgis-rectangular-grid-creation/"&gt;cutting it with a grid&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A supervisor of a project I …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Recently I&amp;#8217;ve written about &lt;a href="/2015/postgis-buffers-intersections-differences-and-collections/"&gt;struggling with fairly complex geometries in PostGIS&lt;/a&gt;. Lesson learned from the last time was to use more smaller geometries instead of several really huge. You can obtain the small ones from the big by &lt;a href="/2015/postgis-rectangular-grid-creation/"&gt;cutting it with a grid&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A supervisor of a project I&amp;#8217;ve been working on came up with a task that totally buried the previous process in a blink of an eye: &lt;strong&gt;Give me the buffer (diffed with original geometries) that is smoothed on the outer bounds so there are no edges shorter than 10 cm.&lt;/strong&gt; I sighed. Then, I cursed. Then, I gave it a try with PostGIS. Achieving this goal involves these&amp;nbsp;steps:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Dissolve intersecting&amp;nbsp;buffers&lt;/li&gt;
&lt;li&gt;Run some kind of generalization algorithm that is not defined in&amp;nbsp;PostGIS&lt;/li&gt;
&lt;li&gt;Diff original&amp;nbsp;geometries&lt;/li&gt;
&lt;li&gt;Cut buffer with grid so it works &lt;del&gt;faster&lt;/del&gt; not so slow for the next&amp;nbsp;steps&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Two of those four are rather problematic with PostGIS: line smoothing and diffing the original geometries (I didn&amp;#8217;t get to the last one, so it might be 3 of 4 as&amp;nbsp;well).&lt;/p&gt;
&lt;h2&gt;Hello, I&amp;#8217;m &lt;span class="caps"&gt;GRASS&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;I haven&amp;#8217;t used &lt;span class="caps"&gt;GRASS&lt;/span&gt; for ages and even back then I didn&amp;#8217;t get to know it much, but it saved the day for me this&amp;nbsp;time.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;grass -text path/to/mapset -c

v.in.ogr &lt;span class="nv"&gt;input&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;PG:host=localhost dbname=db user=postgres password=postgres&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;output&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;ilot_050 &lt;span class="nv"&gt;layer&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;ilot_2015_050 &lt;span class="nv"&gt;snap&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;-1 --overwrite
&lt;span class="c1"&gt;# turn the snapping off, I don&amp;#39;t want the input changed in any way, even though it is not topologically valid&lt;/span&gt;
v.in.ogr &lt;span class="nv"&gt;input&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;PG:host=localhost dbname=db user=postgres password=postgres&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;output&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;lollipops_050 &lt;span class="nv"&gt;layer&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;lollipops.lollipops_2015_050_tmp &lt;span class="nv"&gt;snap&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;-1 --overwrite
v.in.ogr &lt;span class="nv"&gt;input&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;PG:host=localhost dbname=db user=postgres password=postgres&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;output&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;holes_050 &lt;span class="nv"&gt;layer&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;phase_3.holes_050 &lt;span class="nv"&gt;snap&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;-1 --overwrite
v.db.addcolumn &lt;span class="nv"&gt;map&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;ilot_050 &lt;span class="nv"&gt;columns&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;id_0 int&amp;quot;&lt;/span&gt;
v.db.update &lt;span class="nv"&gt;map&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;ilot_050 &lt;span class="nv"&gt;column&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;id_0 &lt;span class="nv"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;

&lt;span class="c1"&gt;# dissolve didn&amp;#39;t work without a column specified, dunno why&lt;/span&gt;
v.dissolve &lt;span class="nv"&gt;input&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;ilot_050 &lt;span class="nv"&gt;column&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;id_0 &lt;span class="nv"&gt;output&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;ilot_050_dissolve --overwrite
v.buffer &lt;span class="nv"&gt;input&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;ilot_050_dissolve &lt;span class="nv"&gt;output&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;ilot_050_buffer &lt;span class="nv"&gt;distance&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;20&lt;/span&gt; --overwrite

&lt;span class="c1"&gt;# v.out and v.in routine used just because I didn&amp;#39;t get the way attributes work in GRASS, would do it differently next time&lt;/span&gt;
v.out.ogr &lt;span class="nv"&gt;input&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;ilot_050_buffer &lt;span class="nv"&gt;output&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;ilot_050_buffer &lt;span class="nv"&gt;format&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;ESRI_Shapefile --overwrite
v.in.ogr &lt;span class="nv"&gt;input&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;ilot_050_buffer &lt;span class="nv"&gt;output&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;ilot_050_buffer &lt;span class="nv"&gt;snap&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;-1 --overwrite
v.overlay &lt;span class="nv"&gt;ainput&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;ilot_050_buffer &lt;span class="nv"&gt;binput&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;holes_050 &lt;span class="nv"&gt;operator&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;or &lt;span class="nv"&gt;output&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;combined_050_01 &lt;span class="nv"&gt;snap&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;-1 --overwrite

&lt;span class="c1"&gt;# tried v.patch to combine the three layers, it gave some strange results in the final overlay&lt;/span&gt;
v.overlay &lt;span class="nv"&gt;ainput&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;combined_050_01 &lt;span class="nv"&gt;binput&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;lollipops_050 &lt;span class="nv"&gt;operator&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;or &lt;span class="nv"&gt;output&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;combined_050_02 &lt;span class="nv"&gt;snap&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;-1 --overwrite
v.out.ogr &lt;span class="nv"&gt;input&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;combined_050_02 &lt;span class="nv"&gt;output&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;combined_050 &lt;span class="nv"&gt;format&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;ESRI_Shapefile --overwrite
v.in.ogr &lt;span class="nv"&gt;input&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;combined_050 &lt;span class="nv"&gt;output&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;combined_050_in &lt;span class="nv"&gt;snap&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;-1 --overwrite
v.db.addcolumn &lt;span class="nv"&gt;map&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;combined_050_in &lt;span class="nv"&gt;columns&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;id_1 int&amp;quot;&lt;/span&gt;
v.db.update &lt;span class="nv"&gt;map&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;combined_050_in &lt;span class="nv"&gt;column&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;id_1 &lt;span class="nv"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
v.dissolve &lt;span class="nv"&gt;input&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;combined_050_in &lt;span class="nv"&gt;column&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;id_1 &lt;span class="nv"&gt;output&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;combined_050_dissolve --overwrite

&lt;span class="c1"&gt;# get rid of &amp;lt; 10cm edges&lt;/span&gt;
v.generalize &lt;span class="nv"&gt;input&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;combined_050_dissolve &lt;span class="nv"&gt;output&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;combined_050_gen &lt;span class="nv"&gt;method&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;reduction &lt;span class="nv"&gt;threshold&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.1 --overwrite
v.out.ogr &lt;span class="nv"&gt;input&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;combined_050_gen &lt;span class="nv"&gt;output&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;combined_050_gen &lt;span class="nv"&gt;format&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;ESRI_Shapefile --overwrite
v.in.ogr &lt;span class="nv"&gt;input&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;combined_050_gen &lt;span class="nv"&gt;output&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;combined_050_gen &lt;span class="nv"&gt;snap&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;-1 --overwrite
v.overlay &lt;span class="nv"&gt;ainput&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;combined_050_gen &lt;span class="nv"&gt;binput&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;ilot_050 &lt;span class="nv"&gt;operator&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;not &lt;span class="nv"&gt;snap&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1e-05 --overwrite &lt;span class="nv"&gt;output&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;ilot_050_diff
v.out.postgis &lt;span class="nv"&gt;input&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;ilot_050_diff &lt;span class="nv"&gt;output&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;PG:dbname=db user=postgres password=postgres&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;output_layer&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;onf3.buffer_050_diff &lt;span class="nv"&gt;options&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;GEOMETRY_NAME=wkb_geometry,SRID=2154&amp;quot;&lt;/span&gt; --overwrite
v.in.ogr &lt;span class="nv"&gt;input&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;PG:host=localhost dbname=ign user=postgres password=postgres&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;output&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;buffer_050 &lt;span class="nv"&gt;layer&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;onf3.buffer_050_diff &lt;span class="nv"&gt;snap&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;-1 --overwrite
v.in.ogr &lt;span class="nv"&gt;input&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;PG:host=localhost dbname=ign user=postgres password=postgres&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;output&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;grid &lt;span class="nv"&gt;layer&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;grid &lt;span class="nv"&gt;snap&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;-1 --overwrite
v.db.connect -d &lt;span class="nv"&gt;map&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;buffer_050

&lt;span class="c1"&gt;# instead of v.out and v.in routine&lt;/span&gt;
db.connect &lt;span class="nv"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;sqlite &lt;span class="nv"&gt;database&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;$GISDBASE/$LOCATION_NAME/$MAPSET/sqlite.db&amp;#39;&lt;/span&gt;
v.db.addtable &lt;span class="nv"&gt;map&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;buffer_050
v.overlay &lt;span class="nv"&gt;ainput&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;buffer_050 &lt;span class="nv"&gt;binput&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;grid &lt;span class="nv"&gt;operator&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;and &lt;span class="nv"&gt;output&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;buffer_050_grid &lt;span class="nv"&gt;snap&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;-1 --overwrite
v.out.postgis &lt;span class="nv"&gt;input&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;buffer_050_grid &lt;span class="nv"&gt;output&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;PG:dbname=ign user=postgres password=postgres&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;output_layer&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;onf3.buffer_050_diff_grid &lt;span class="nv"&gt;options&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;GEOMETRY_NAME=wkb_geometry,SRID=2154&amp;quot;&lt;/span&gt; --overwrite
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;It is damn fast&lt;/strong&gt; compared to PostGIS. It can be automated. It can be parametrized. It is robust. It is&amp;nbsp;great!&lt;/p&gt;
&lt;h2&gt;Lesson&amp;nbsp;learned&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;You cannot smooth lines by deleting edges shorter than &lt;code&gt;n&lt;/code&gt; in PostGIS. At least I haven&amp;#8217;t found the way to do so without defining your own procedure. You can with &lt;span class="caps"&gt;GRASS&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;GRASS&lt;/span&gt; reduction algorithm always keep first and last node untouched. Thus, if they&amp;#8217;re closer than &lt;code&gt;n&lt;/code&gt;, they&amp;#8217;ll stay even if you&amp;#8217;d like to have them&amp;nbsp;deleted.&lt;/li&gt;
&lt;li&gt;Getting to grips with &lt;span class="caps"&gt;GRASS&lt;/span&gt; attribute data is rather hard after using shapefiles all your &lt;span class="caps"&gt;GIS&lt;/span&gt;&amp;nbsp;life.&lt;/li&gt;
&lt;li&gt;It is great to exploit synergy of different &lt;span class="caps"&gt;GIS&lt;/span&gt; tools used for what they&amp;#8217;re best&amp;nbsp;at.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The more I work with big data, the more I get used to not seeing them. That&amp;#8217;s kind of a twist after crafting maps at&amp;nbsp;university.&lt;/p&gt;</content><category term="grass"></category></entry><entry><title>PostGIS: Finding Biggest Land Users Nearby</title><link href="https://www.zimmi.cz/posts/2015/postgis-finding-biggest-land-users-nearby/" rel="alternate"></link><published>2015-04-03T10:29:00+02:00</published><updated>2015-04-03T10:29:00+02:00</updated><author><name>Michal Zimmermann</name></author><id>tag:www.zimmi.cz,2015-04-03:/posts/2015/postgis-finding-biggest-land-users-nearby/</id><summary type="html">&lt;p&gt;At &lt;a href="http://clevermaps.cz"&gt;CleverMaps&lt;/a&gt; we heavily rely on the cadastre of real estate, which is probably the biggest data source in my country. Using their excellent knowledge of this data set, my teammates often supply me with all kinds of weird&amp;nbsp;challenges.&lt;/p&gt;
&lt;h2&gt;Give me the biggest land users&amp;nbsp;nearby&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Find the biggest …&lt;/em&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;At &lt;a href="http://clevermaps.cz"&gt;CleverMaps&lt;/a&gt; we heavily rely on the cadastre of real estate, which is probably the biggest data source in my country. Using their excellent knowledge of this data set, my teammates often supply me with all kinds of weird&amp;nbsp;challenges.&lt;/p&gt;
&lt;h2&gt;Give me the biggest land users&amp;nbsp;nearby&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Find the biggest land users in surrounding cadastral communities for each cadastral community (~ 13K)&lt;/em&gt; being the latest task, here&amp;#8217;s the query I tackled it&amp;nbsp;with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;WITH users_ AS (
    SELECT
        cad_code,
        id,
        zipcode,
        city,
        concat_ws(&amp;#39; &amp;#39;,street, concat_ws(&amp;#39;/&amp;#39;, house_number, street_number)) as street,
        name,
        &amp;#39;Users with more than 10 ha&amp;#39;::text note,
        SUM(acreage) area
        FROM land_blocks -- being a table with info about all the agricultural land blocks
        JOIN users u ON id_uz = id
        GROUP BY cad_code, u.id
        HAVING SUM(acreage) &amp;gt; 10
),
ints AS (
    SELECT
        ku.cad_code as community,
        ku2.cad_code as surrounding,
        ku2.cad_name
    FROM cadastral_community ku
    JOIN cadastral_community ku2
        ON ST_Intersects(ku.geom, ku2.geom)
    WHERE ku.cad_code &amp;lt;&amp;gt; ku2.cad_code
)
SELECT
    DISTINCT ON (surrounding, cad_name, u.zipcode, u.city, u.street, u.name)
    surrounding,
    cad_name,
    u.zipcode,
    u.city,
    u.street,
    u.name,
    u.note,
    u.area
FROM
    users_ u
JOIN ints
    ON cad_code = community;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Few things to&amp;nbsp;note:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;concat_ws()&lt;/code&gt; is a great function for joining values that might be &lt;code&gt;NULL&lt;/code&gt;. If such a value is found, it is skipped and the function continues with the next one (if any). Thus, you&amp;#8217;ll never get a string ending with a trailing slash (&lt;code&gt;Street name 55/&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;With &lt;code&gt;users_&lt;/code&gt; &lt;span class="caps"&gt;CTE&lt;/span&gt; I get a list of owners having more than 10 hectares of land for each cadastral community. This gives me the inverse result of what I want (if I know the biggest owners in the cadastral community, I know these are the ones that should be listed for surrounding c.&amp;nbsp;communities).&lt;/li&gt;
&lt;li&gt;This &lt;em&gt;putting-it-all-together&lt;/em&gt; step is done with &lt;code&gt;ints&lt;/code&gt; &lt;span class="caps"&gt;CTE&lt;/span&gt; that outputs the list of surrounding c. communities for each of&amp;nbsp;them.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DISTINCT ON&lt;/code&gt; cleans up the list so the same owners don&amp;#8217;t appear more than once for any given c.&amp;nbsp;community.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Writing this makes me realize the list should be probably sorted by area so only the occurence with the biggest value is kept for each c. community. Simple &lt;code&gt;ORDER BY&lt;/code&gt; should deal with this just fine. Or even more sophisticated, using &lt;code&gt;GROUP BY&lt;/code&gt; to output the total acreage in all surrounding c.&amp;nbsp;communities.&lt;/p&gt;</content><category term="postgresql"></category><category term="postgis"></category></entry><entry><title>PostGIS: Count Line Self-Intersections</title><link href="https://www.zimmi.cz/posts/2015/postgis-count-line-self-intersections/" rel="alternate"></link><published>2015-03-30T09:12:00+02:00</published><updated>2015-03-30T09:12:00+02:00</updated><author><name>Michal Zimmermann</name></author><id>tag:www.zimmi.cz,2015-03-30:/posts/2015/postgis-count-line-self-intersections/</id><summary type="html">&lt;p&gt;&lt;a href="https://gis.stackexchange.com/questions/107927/counting-self-intersections-of-linestring-using-postgis/140674#140674"&gt;Is there a way of using PostgreSQL + PostGIS for finding the number of self intersections in a linestring?&lt;/a&gt; was a question that made me think of this problem. I came up with a solution that takes just a few lines of&amp;nbsp;code.&lt;/p&gt;
&lt;p&gt;Assume the following&amp;nbsp;geometries:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;CREATE TABLE test2 (
    id …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://gis.stackexchange.com/questions/107927/counting-self-intersections-of-linestring-using-postgis/140674#140674"&gt;Is there a way of using PostgreSQL + PostGIS for finding the number of self intersections in a linestring?&lt;/a&gt; was a question that made me think of this problem. I came up with a solution that takes just a few lines of&amp;nbsp;code.&lt;/p&gt;
&lt;p&gt;Assume the following&amp;nbsp;geometries:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;CREATE TABLE test2 (
    id integer NOT NULL,
    wkb_geometry geometry(LineString,5514)
);
COPY test2 (id, wkb_geometry) FROM stdin;
1   01020000208A15000004000000CCDC7845E339EEBFF2003B4A8A08E1BFE4154DAB7C31DCBF24C2042773E3E53F2287BA2CC591E43F604749BFE3B2E2BF2AE9770A11B8F0BF9C91435D56C0C63F
2   01020000208A1500000600000050212BF9E63EC03F1FA046FD69F1EA3F504D44212915EA3F74A99EDF44E3F33F2CE2805DFAB1F33F805D24B1B189DC3F9834DE5938C1F53FB56F1FBF8AAFEC3F24D0C85B4666EA3FF311B0D8D75BE93F306EAA073894D23FA841B27E3404F33F
\.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img data-echo="/posts/assets/postgis-count-line-self-intersections/lines.png" title="Self-intersecting lines" class="img-responsive centered"&gt;&lt;/p&gt;
&lt;p&gt;Note that those geometries are valid while not being simple, thus, &lt;code&gt;ST_IsValidReason()&lt;/code&gt; wouldn&amp;#8217;t help much. What if we compared it to their single counterparts? Those would have had vertices at intersections. Once you know the original number of vertices and the number of simple geometry vertices, it is fairly easy to subtract those&amp;nbsp;two.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;WITH noded AS (
SELECT id, COUNT(id)
FROM (
    SELECT DISTINCT (ST_DumpPoints(ST_Node(wkb_geometry))).geom, id
    FROM test
) tmp  group by id
),
test AS (
    SELECT id, COUNT(id)
        FROM (
            SELECT DISTINCT (ST_DumpPoints(wkb_geometry)).geom, id
            FROM test
        ) tmp  group by id
)

SELECT noded.id, noded.count - test.count cnt FROM noded JOIN test USING (id);
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This query gives you geometry id and the difference in number of vertices between the original and simple geometry. Note the &lt;code&gt;DISTINCT&lt;/code&gt; in the &lt;code&gt;noded&lt;/code&gt; &lt;span class="caps"&gt;CTE&lt;/span&gt; - with &lt;code&gt;ST_Node()&lt;/code&gt; you get &lt;code&gt;one vertex x number of intersecting lines&lt;/code&gt; for each intersection. &lt;code&gt;DISTINCT&lt;/code&gt; gives you just one of&amp;nbsp;them.&lt;/p&gt;
&lt;p&gt;The query result on my &lt;code&gt;test&lt;/code&gt; table:
&lt;table&gt;
    &lt;tr&gt;
        &lt;th&gt;id&lt;/th&gt;
        &lt;th&gt;cnt&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;1&lt;/td&gt;
        &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;2&lt;/td&gt;
        &lt;td&gt;2&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;&lt;/p&gt;</content><category term="postgresql"></category><category term="postgis"></category></entry><entry><title>PostGIS: Rectangular Grid Creation</title><link href="https://www.zimmi.cz/posts/2015/postgis-rectangular-grid-creation/" rel="alternate"></link><published>2015-03-24T17:47:00+01:00</published><updated>2015-03-24T17:47:00+01:00</updated><author><name>Michal Zimmermann</name></author><id>tag:www.zimmi.cz,2015-03-24:/posts/2015/postgis-rectangular-grid-creation/</id><summary type="html">&lt;p&gt;Creating a rectangular grid to cover a given extent with same sized cells is one of the basic &lt;span class="caps"&gt;GIS&lt;/span&gt; tasks I&amp;#8217;ve had to solve several times so far. I used &lt;span class="caps"&gt;QGIS&lt;/span&gt; or some Python to give me a bunch of &lt;code&gt;INSERT&lt;/code&gt; statements to run in PostGIS database, now I …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Creating a rectangular grid to cover a given extent with same sized cells is one of the basic &lt;span class="caps"&gt;GIS&lt;/span&gt; tasks I&amp;#8217;ve had to solve several times so far. I used &lt;span class="caps"&gt;QGIS&lt;/span&gt; or some Python to give me a bunch of &lt;code&gt;INSERT&lt;/code&gt; statements to run in PostGIS database, now I&amp;#8217;ve come with a final solution at&amp;nbsp;last.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;CREATE OR REPLACE FUNCTION cm_grid(
    blx float8, -- bottom left x coordinate
    bly float8, -- bottom left y coordinate
    trx float8, -- top right x coordinate
    try float8, -- top right y coordinate
    xsize float8, -- cell width
    ysize float8, -- cell height
    srid integer DEFAULT 5514,
    OUT col varchar,
    OUT &amp;quot;row&amp;quot; varchar,
    OUT geom geometry
) RETURNS SETOF record AS
$$
DECLARE
    width float8; -- total area width
    height float8; -- total area height
    cols integer;
    rows integer;
BEGIN
    width  := @($1 - $3); -- absolute value
    height := @($2 - $4); -- absolute value
    cols   := ceil(width / xsize);
    rows   := ceil(height / ysize);
    RETURN QUERY
        SELECT
            cast(
                lpad((i)::varchar,
                CASE WHEN
                    char_length(rows::varchar) &amp;gt; char_length(cols::varchar)
                        THEN  char_length(rows::varchar)
                        ELSE char_length(cols::varchar)
                END,
                &amp;#39;0&amp;#39;)
                AS varchar
            ) AS row,
            cast(
                lpad((j)::varchar,
                CASE WHEN
                    char_length(rows::varchar) &amp;gt; char_length(cols::varchar)
                        THEN  char_length(rows::varchar)
                        ELSE char_length(cols::varchar)
                END,
                &amp;#39;0&amp;#39;) AS varchar
            ) AS col,
            ST_SetSRID(
                ST_GeomFromText(
                    &amp;#39;POLYGON((&amp;#39; ||
                        array_to_string(
                            ARRAY[i * xsize + blx, j * ysize + bly],
                            &amp;#39; &amp;#39;
                        ) || &amp;#39;,&amp;#39; ||
                        array_to_string(
                            ARRAY[i * xsize + blx, (j+1) * ysize + bly],
                            &amp;#39; &amp;#39;
                        ) || &amp;#39;,&amp;#39; ||
                        array_to_string(
                            ARRAY[(i+1) * xsize + blx, (j+1) * ysize + bly],
                            &amp;#39; &amp;#39;
                        ) || &amp;#39;,&amp;#39; ||
                        array_to_string(
                            ARRAY[(i+1) * xsize + blx, j * ysize + bly],
                            &amp;#39; &amp;#39;
                        ) || &amp;#39;,&amp;#39; ||
                        array_to_string(
                            ARRAY[i * xsize + blx, j * ysize + bly],
                            &amp;#39; &amp;#39;
                        ) || &amp;#39;
                    ))&amp;#39;
                )
            , srid) AS geom
        FROM
            generate_series(0, cols) AS i,
            generate_series(0, rows) AS j;
END;
$$
LANGUAGE plpgsql;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And you call it like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;CREATE TABLE grid AS
SELECT *
FROM cm_grid(-675593.69, -1057711.19, -672254.69, -1054849.19, 333.47, 333.47);
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Few&amp;nbsp;notes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;it takes bounding box coordinates (bottom left, top right) for an&amp;nbsp;extent,&lt;/li&gt;
&lt;li&gt;followed by cell width and&amp;nbsp;height,&lt;/li&gt;
&lt;li&gt;and optional &lt;span class="caps"&gt;SRID&lt;/span&gt; (defaults to 5514 which is Czech national&amp;nbsp;grid),&lt;/li&gt;
&lt;li&gt;each cell is indexed with &lt;code&gt;row&lt;/code&gt; and &lt;code&gt;col&lt;/code&gt; number&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The messy &lt;code&gt;CASE&lt;/code&gt; statement makes sure both &lt;code&gt;row&lt;/code&gt; and &lt;code&gt;col&lt;/code&gt; are of the same length. I used &lt;code&gt;array_to_string&lt;/code&gt; for better readability. It might not be the fastest way, didn&amp;#8217;t do any&amp;nbsp;benchmarks.&lt;/p&gt;</content><category term="postgresql"></category><category term="postgis"></category></entry><entry><title>PostGIS: Buffers, Intersections, Differences And Collections</title><link href="https://www.zimmi.cz/posts/2015/postgis-buffers-intersections-differences-and-collections/" rel="alternate"></link><published>2015-03-19T19:27:00+01:00</published><updated>2015-03-19T19:27:00+01:00</updated><author><name>Michal Zimmermann</name></author><id>tag:www.zimmi.cz,2015-03-19:/posts/2015/postgis-buffers-intersections-differences-and-collections/</id><summary type="html">&lt;p&gt;Being part of &lt;a href="http://clevermaps.cz"&gt;CleverMaps&lt;/a&gt; means doing lot of nasty work with PostGIS. Recently, I&amp;#8217;ve been given a following task that needed to be done for a really big project dealing with agricultural&amp;nbsp;parcels:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;given a polygonal shapefile of agricultural parcels, create 20m wide buffers around all of&amp;nbsp;them,&lt;/li&gt;
&lt;li&gt;extract …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Being part of &lt;a href="http://clevermaps.cz"&gt;CleverMaps&lt;/a&gt; means doing lot of nasty work with PostGIS. Recently, I&amp;#8217;ve been given a following task that needed to be done for a really big project dealing with agricultural&amp;nbsp;parcels:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;given a polygonal shapefile of agricultural parcels, create 20m wide buffers around all of&amp;nbsp;them,&lt;/li&gt;
&lt;li&gt;extract holes from these&amp;nbsp;parcels,&lt;/li&gt;
&lt;li&gt;clip buffers so they don&amp;#8217;t overlap with other&amp;nbsp;parcels,&lt;/li&gt;
&lt;li&gt;get rid of overlaps between nearby parcels (e.g. dissolve&amp;nbsp;them),&lt;/li&gt;
&lt;li&gt;create output combined from holes and&amp;nbsp;buffers,&lt;/li&gt;
&lt;li&gt;the output must not contain features having more than ~1,000,000&amp;nbsp;vertices&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This process is going to be run ~20&amp;times; on layers with ~40,000-70,000&amp;nbsp;polygons.&lt;/p&gt;
&lt;h2&gt;Input&amp;nbsp;data&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;polygonal layer of agricultural&amp;nbsp;parcels&lt;/li&gt;
&lt;li&gt;rectangular grid (7.5 &amp;times; 7.5 km) for cutting the&amp;nbsp;output&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;First&amp;nbsp;try&lt;/h2&gt;
&lt;p&gt;My initial effort was to union all the buffers and then clip them with a rectangular grid. Long story short: &lt;strong&gt;Don&amp;#8217;t do that. Never. Ever. I mean&amp;nbsp;it.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;It works fine until you end up with one huge multipolygon having like ~2,000,000 vertices. But then you need to split it somehow so you meet the 1,000,000 limit rule (see list above). Spatial index doesn&amp;#8217;t help you much in such cases, so that really huge polygon is being cut by every rectangle it intersects and it takes hours and hours. It&amp;#8217;s just a no&amp;nbsp;go.&lt;/p&gt;
&lt;h2&gt;The other way&amp;nbsp;round&lt;/h2&gt;
&lt;p&gt;Let&amp;#8217;s put it the other way round. First, split buffers by rectangular grid, doing union on each cell&amp;nbsp;separately.&lt;/p&gt;
&lt;h3&gt;Import&lt;/h3&gt;
&lt;p&gt;Using the swiss knife of &lt;span class="caps"&gt;GIS&lt;/span&gt; to import the&amp;nbsp;data:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;export SHAPE_ENCODING=&amp;quot;ISO-8859-1&amp;quot;
ogr2ogr -f PostgreSQL PG:&amp;quot;dbname=db user=postgres&amp;quot; parcels.shp -lco ENCODING=UTF-8 -t_srs &amp;quot;EPSG:2154&amp;quot;
ogr2ogr -f PostgreSQL PG:&amp;quot;dbname=db user=postgres&amp;quot; grid.shp -lco ENCODING=UTF-8 -t_srs &amp;quot;EPSG:2154&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;PostGIS&amp;nbsp;processing&lt;/h3&gt;
&lt;p&gt;Recently I stumbled upon a psql &lt;code&gt;\set&lt;/code&gt; command. Launching several queries on the same table, it might be useful to define it&amp;#8217;s name with &lt;code&gt;\set table tablename&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;\set table &amp;#39;parcels&amp;#39;
-- prepare separate table for holes (inner rings)
DROP TABLE IF EXISTS holes;
CREATE TABLE holes (
id serial,
ilot_id varchar,
wkb_geometry geometry(&amp;#39;Polygon&amp;#39;, 2154),
path integer);
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I found the following query an easy way to get all the rings from geometries having more than one&amp;nbsp;ring:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;INSERT INTO holes (ilot_id, wkb_geometry, path) (
SELECT id,
    (ST_DumpRings(wkb_geometry)).geom::geometry(&amp;#39;Polygon&amp;#39;, 2154) as wkb_geometry,
    unnest((ST_DumpRings(wkb_geometry)).path) as path
FROM :table
WHERE ST_NRings(wkb_geometry) &amp;gt; 1
);
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here&amp;#8217;s a little trick. Doing some checks I found out that some of the polygons had two rings without having any inner ring, both of them being the same. I guess this comes from some kind of human error. This query thus deletes all rings with &lt;code&gt;path = 0&lt;/code&gt; (exterior rings). At the same time, it deals with that &lt;em&gt;invalid&lt;/em&gt; polygons by checking their spatial relationship to&amp;nbsp;parcels.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;DELETE FROM holes
    WHERE path = 0
    OR id IN (
        SELECT holes.id
        FROM holes
        JOIN :table ON
            ST_Within(
                ST_Buffer(holes.wkb_geometry,-1),
                :table.wkb_geometry
            )
        AND holes.wkb_geometry &amp;amp;&amp;amp; :table.wkb_geometry
);
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To my surprise, it is possible that parcel has a hole with another parcel being in that hole. Argh. Find those and get rid of&amp;nbsp;them.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;DROP TABLE IF EXISTS ints;
CREATE TABLE ints AS
    SELECT holes.*
    FROM holes
    JOIN :table ON ST_Intersects(holes.wkb_geometry, :table.wkb_geometry)
    AND ST_Relate(holes.wkb_geometry, :table.wkb_geometry, &amp;#39;2********&amp;#39;);
DELETE FROM holes
WHERE id IN (SELECT id FROM ints);
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I still need to get the difference between the hole geometry and the parcel that resides inside it - this difference is the actual hole I&amp;#8217;m looking&amp;nbsp;for.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;DROP TABLE IF EXISTS diff_ints;
CREATE TABLE diff_ints AS
    SELECT
        ints.id,
        ST_Difference(
            ints.wkb_geometry,
            ST_Collect(:table.wkb_geometry)
        ) wkb_geometry
    FROM ints, :table
    WHERE ST_Within(:table.wkb_geometry, ints.wkb_geometry)
    GROUP BY ints.wkb_geometry, ints.id;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And I&amp;#8217;m done with holes. Get back to&amp;nbsp;buffers.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;DROP TABLE IF EXISTS buffer;
CREATE TABLE buffer AS
    SELECT id, ST_Buffer(wkb_geometry, 20) wkb_geometry
    FROM :table;
CREATE INDEX buffer_gist_idx ON buffer USING gist(wkb_geometry);
ALTER TABLE buffer ADD PRIMARY KEY(id);
VACUUM ANALYZE buffer;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Combine all the parts&amp;nbsp;together.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;DROP&lt;/span&gt; &lt;span class="nt"&gt;TABLE&lt;/span&gt; &lt;span class="nt"&gt;IF&lt;/span&gt; &lt;span class="nt"&gt;EXISTS&lt;/span&gt; &lt;span class="nt"&gt;diff&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;CREATE&lt;/span&gt; &lt;span class="nt"&gt;TABLE&lt;/span&gt; &lt;span class="nt"&gt;diff&lt;/span&gt; &lt;span class="nt"&gt;AS&lt;/span&gt;
    &lt;span class="nt"&gt;SELECT&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;id&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;ST_Difference&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;wkb_geometry&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;ST_Union&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;ST_MakeValid&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;wkb_geometry&lt;/span&gt;&lt;span class="o"&gt;)))&lt;/span&gt; &lt;span class="nt"&gt;as&lt;/span&gt; &lt;span class="nt"&gt;wkb_geometry&lt;/span&gt;
    &lt;span class="nt"&gt;FROM&lt;/span&gt; &lt;span class="nt"&gt;buffer&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nd"&gt;table&lt;/span&gt; &lt;span class="nt"&gt;b&lt;/span&gt;
    &lt;span class="nt"&gt;WHERE&lt;/span&gt; &lt;span class="nt"&gt;ST_Intersects&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;wkb_geometry&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;wkb_geometry&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="nt"&gt;GROUP&lt;/span&gt; &lt;span class="nt"&gt;BY&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;id&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;wkb_geometry&lt;/span&gt;
    &lt;span class="nt"&gt;UNION&lt;/span&gt;
    &lt;span class="nt"&gt;SELECT&lt;/span&gt; &lt;span class="nt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nd"&gt;varchar&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;wkb_geometry&lt;/span&gt; &lt;span class="nt"&gt;FROM&lt;/span&gt; &lt;span class="nt"&gt;holes&lt;/span&gt;
    &lt;span class="nt"&gt;UNION&lt;/span&gt;
    &lt;span class="nt"&gt;SELECT&lt;/span&gt; &lt;span class="nt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nd"&gt;varchar&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;wkb_geometry&lt;/span&gt; &lt;span class="nt"&gt;FROM&lt;/span&gt; &lt;span class="nt"&gt;diff_ints&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;CREATE&lt;/span&gt; &lt;span class="nt"&gt;INDEX&lt;/span&gt; &lt;span class="nt"&gt;diff_gist_idx&lt;/span&gt; &lt;span class="nt"&gt;ON&lt;/span&gt; &lt;span class="nt"&gt;diff&lt;/span&gt; &lt;span class="nt"&gt;USING&lt;/span&gt; &lt;span class="nt"&gt;gist&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;wkb_geometry&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="nt"&gt;VACUUM&lt;/span&gt; &lt;span class="nt"&gt;ANALYZE&lt;/span&gt; &lt;span class="nt"&gt;diff&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Collect the geometries in every cell, simplify them a little, snap them to 3 decimal numbers, make them valid and dump them to simple features. This query takes ~300,000 ms which is orders of magnitude faster than my initial&amp;nbsp;attempt.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;DROP TABLE IF EXISTS uni;
CREATE TABLE uni AS
SELECT
    g.ogc_fid AS grid_id,
    (ST_Dump(
        ST_MakeValid(
            ST_SnapToGrid(
                ST_SimplifyPreserveTopology(
                    ST_CollectionExtract(
                        ST_Buffer(
                            ST_Collect(
                                ST_Intersection(a.wkb_geometry, g.wkb_geometry)
                            )
                        , 0)
                    , 3)
                , 0.1)
            , 0.001)
        )
    )).geom as wkb_geometry
FROM diff a, grid g
WHERE ST_Intersects(a.wkb_geometry, g.wkb_geometry)
GROUP BY g.ogc_fid;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;After running the query it is reasonable to check the results. I&amp;#8217;m only interested in polygonal geometries, &lt;code&gt;ST_GeometryType()&lt;/code&gt; would tell me of any other geometry type. Invalid geometries are not&amp;nbsp;allowed.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;SELECT DISTINCT ST_GeometryType(wkb_geometry) FROM uni;
SELECT COUNT(1) FROM uni WHERE NOT ST_IsValid(wkb_geometry);
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Add primary key on serial column as a last &lt;span class="caps"&gt;SQL&lt;/span&gt;&amp;nbsp;step.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ALTER TABLE uni ADD COLUMN id serial;
ALTER TABLE uni ADD PRIMARY KEY(id);
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Export&lt;/h3&gt;
&lt;p&gt;And spit it out as a&amp;nbsp;shapefile.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ogr2ogr -f &amp;quot;ESRI Shapefile&amp;quot; output.shp PG:&amp;quot;dbname=ign user=postgres&amp;quot; uni -s_srs &amp;quot;EPSG:2154&amp;quot; -t_srs &amp;quot;EPSG:2154&amp;quot; -lco ENCODING=UTF-8
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Lesson&amp;nbsp;learned&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;More of little seems to be faster than less of&amp;nbsp;bigger.&lt;/li&gt;
&lt;li&gt;Never stop learning and trying different&amp;nbsp;approaches.&lt;/li&gt;
&lt;li&gt;Although using &lt;code&gt;CTE&lt;/code&gt; might be tempting, creating separate tables for separate steps of the whole process is much more comfortable for&amp;nbsp;debugging.&lt;/li&gt;
&lt;/ul&gt;</content><category term="postgis"></category><category term="postgresql"></category></entry><entry><title>WMS Download For Future Offline Use</title><link href="https://www.zimmi.cz/posts/2015/wms-download-for-future-offline-use/" rel="alternate"></link><published>2015-03-15T18:10:00+01:00</published><updated>2015-03-15T18:10:00+01:00</updated><author><name>Michal Zimmermann</name></author><id>tag:www.zimmi.cz,2015-03-15:/posts/2015/wms-download-for-future-offline-use/</id><summary type="html">&lt;p&gt;Using &lt;span class="caps"&gt;WMS&lt;/span&gt; in real time might easily become pain in the ass due to low connection speed or slow server response. Downloading images beforehand seems to be a reasonable choice both to avoid any slowdowns and to improve user experience when working with &lt;span class="caps"&gt;WMS&lt;/span&gt;&amp;nbsp;layers.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://geopython.github.io/OWSLib/"&gt;OWSLib&lt;/a&gt; is a great tool …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Using &lt;span class="caps"&gt;WMS&lt;/span&gt; in real time might easily become pain in the ass due to low connection speed or slow server response. Downloading images beforehand seems to be a reasonable choice both to avoid any slowdowns and to improve user experience when working with &lt;span class="caps"&gt;WMS&lt;/span&gt;&amp;nbsp;layers.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://geopython.github.io/OWSLib/"&gt;OWSLib&lt;/a&gt; is a great tool to help you get images from &lt;span class="caps"&gt;WMS&lt;/span&gt; server. Code and some comments&amp;nbsp;follow.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;math&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;owslib.wms&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;WebMapService&lt;/span&gt;

&lt;span class="n"&gt;BOTTOM_LEFT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;679363&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1120688&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;TOP_RIGHT&lt;/span&gt;   &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;565171&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1042703&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;SRS_WIDTH&lt;/span&gt;   &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fabs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;639084&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;638825&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# tile width in units of crs =&amp;gt; 259 m&lt;/span&gt;
&lt;span class="n"&gt;SRS_HEIGHT&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fabs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1070426&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1070273&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# tile height in units of crs =&amp;gt; 153 m&lt;/span&gt;
&lt;span class="n"&gt;PX_WIDTH&lt;/span&gt;    &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;977&lt;/span&gt;
&lt;span class="n"&gt;PX_HEIGHT&lt;/span&gt;   &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;578&lt;/span&gt;

&lt;span class="n"&gt;FORMAT&lt;/span&gt;      &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;image/png&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;LAYERS&lt;/span&gt;      &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;KN&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;RST_PK&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;SIZE&lt;/span&gt;        &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PX_WIDTH&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PX_HEIGHT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;SRS&lt;/span&gt;         &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;EPSG:5514&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;STYLES&lt;/span&gt;      &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;default&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;default&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;TRANSPARENT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

&lt;span class="n"&gt;DIRECTORY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;tiles/&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;SLEEP&lt;/span&gt;     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# seconds&lt;/span&gt;

&lt;span class="n"&gt;dx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fabs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BOTTOM_LEFT&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;TOP_RIGHT&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;# area width in units of crs&lt;/span&gt;
&lt;span class="n"&gt;dy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fabs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BOTTOM_LEFT&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;TOP_RIGHT&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;# area height in units of crs&lt;/span&gt;

&lt;span class="n"&gt;cols&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ceil&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dx&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;SRS_WIDTH&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;rows&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ceil&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dy&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;SRS_HEIGHT&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

&lt;span class="n"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;world_file.pngw&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;wld_template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;tmpl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;wld_template&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;wms&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;WebMapService&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;http://services.cuzk.cz/wms/wms.asp&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;1.1.1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DIRECTORY&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
        &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mkdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DIRECTORY&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cols&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DIRECTORY&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/kn_&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;_&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;.png&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
            &lt;span class="k"&gt;continue&lt;/span&gt;

        &lt;span class="n"&gt;bbox&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;SRS_WIDTH&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;BOTTOM_LEFT&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;SRS_HEIGHT&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;BOTTOM_LEFT&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;SRS_WIDTH&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;BOTTOM_LEFT&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;SRS_HEIGHT&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;BOTTOM_LEFT&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;img&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;wms&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getmap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;layers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;LAYERS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;styles&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;STYLES&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;srs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;SRS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;bbox&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;bbox&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;SIZE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;FORMAT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;transparent&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;TRANSPARENT&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DIRECTORY&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/kn_&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;_&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;.png&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;wb&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;png&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;png&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;img&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DIRECTORY&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/kn_&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;_&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;.pngw&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;wld_file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;wld_file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tmpl&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;wld_file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;SRS_WIDTH&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;BOTTOM_LEFT&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
            &lt;span class="n"&gt;wld_file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;SRS_HEIGHT&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;BOTTOM_LEFT&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;

        &lt;span class="n"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39; out of &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rows&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;cols&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SLEEP&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;First, always make sure &lt;strong&gt;you are not violating terms of use&lt;/strong&gt; defined by service provider. If you are not, here are the necessary&amp;nbsp;steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Define your area of interest with bottom left and top right&amp;nbsp;coordinates.&lt;/li&gt;
&lt;li&gt;Calculate width of single image both in pixels and units of &lt;span class="caps"&gt;CRS&lt;/span&gt; to get the rightsized image. Note that there may be image size restrictions defined by provider (2048 &amp;times; 2048 px is usually the biggest you can&amp;nbsp;get).&lt;/li&gt;
&lt;li&gt;Define template &lt;a href="https://en.wikipedia.org/wiki/World_file"&gt;world file&lt;/a&gt; for referencing images. OWSLib doesn&amp;#8217;t provide world files to saved images, these have to be created by you. I recommend to use a template file for creating real world&amp;nbsp;files.&lt;/li&gt;
&lt;li&gt;Be nice! Don&amp;#8217;t overload the service. I use &lt;code&gt;time.sleep()&lt;/code&gt; for&amp;nbsp;this.&lt;/li&gt;
&lt;li&gt;Profit.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The trouble with &lt;span class="caps"&gt;WMS&lt;/span&gt; is that you can&amp;#8217;t set an arbitrary scale you want to obtain images in (e.g. 1:1 000). It&amp;#8217;s fairly easy to get all values needed to imitate this behavior&amp;nbsp;though.&lt;/p&gt;
&lt;p&gt;Using &lt;a href="http://qgis.org"&gt;&lt;span class="caps"&gt;QGIS&lt;/span&gt;&lt;/a&gt; you&amp;nbsp;can:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Get bounding box of area you&amp;#8217;re interested&amp;nbsp;in.&lt;/li&gt;
&lt;li&gt;Save current view as an image (together with the world file!) and use it as a specimen for your own world&amp;nbsp;files.&lt;/li&gt;
&lt;li&gt;Derive image width (&lt;span class="caps"&gt;CRS&lt;/span&gt;, pixels) from the saved image, thus getting the same zoom level you were using in &lt;span class="caps"&gt;QGIS&lt;/span&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Code given is not bulletproof, it will fail on any network error. However, if you restart it after such a crash, it checks for existing files and starts with the first missing, so you don&amp;#8217;t have to download all the tiles&amp;nbsp;again.&lt;/p&gt;</content><category term="ogc"></category><category term="python"></category><category term="wms"></category></entry><entry><title>Hosting Website On Openshift</title><link href="https://www.zimmi.cz/posts/2015/hosting-website-on-openshift/" rel="alternate"></link><published>2015-02-23T14:25:00+01:00</published><updated>2015-02-23T14:25:00+01:00</updated><author><name>Michal Zimmermann</name></author><id>tag:www.zimmi.cz,2015-02-23:/posts/2015/hosting-website-on-openshift/</id><summary type="html">&lt;p&gt;I decided to migrate &lt;a href="http://www.zimmi.cz"&gt;my web&lt;/a&gt; to &lt;a href="http://openshift.com"&gt;OpenShift&lt;/a&gt;. It was a bit frustrating but I got it working&amp;nbsp;eventually.&lt;/p&gt;
&lt;h2&gt;Things to know before taking the&amp;nbsp;leap&lt;/h2&gt;
&lt;p&gt;Some domain providers don&amp;#8217;t support &lt;span class="caps"&gt;CNAME&lt;/span&gt; changes for root domains (zimmi.cz in my case). This means you can&amp;#8217;t simply tell your …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I decided to migrate &lt;a href="http://www.zimmi.cz"&gt;my web&lt;/a&gt; to &lt;a href="http://openshift.com"&gt;OpenShift&lt;/a&gt;. It was a bit frustrating but I got it working&amp;nbsp;eventually.&lt;/p&gt;
&lt;h2&gt;Things to know before taking the&amp;nbsp;leap&lt;/h2&gt;
&lt;p&gt;Some domain providers don&amp;#8217;t support &lt;span class="caps"&gt;CNAME&lt;/span&gt; changes for root domains (zimmi.cz in my case). This means you can&amp;#8217;t simply tell your domain to serve content from OpenShift address. But what you can do is to tell your &lt;code&gt;www&lt;/code&gt; subdomain to do&amp;nbsp;so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;www.zimmi.cz CNAME hp-zimmi.rhcloud.com
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Which is great until you realize you&amp;#8217;ve just created two different websites. That&amp;#8217;s where &lt;a href="http://wwwizer.com/"&gt;wwwizer&lt;/a&gt; lends you a hand and lets you redirect your naked domain to your &lt;code&gt;www&lt;/code&gt; domain:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;zimmi.cz A 174.129.25.170
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now everything works fine and you have your &lt;code&gt;www.domain.tld&lt;/code&gt; up and&amp;nbsp;running.&lt;/p&gt;
&lt;h2&gt;OpenShift&amp;nbsp;subdomains&lt;/h2&gt;
&lt;p&gt;I wasn&amp;#8217;t successful creating a subdomain on the same application where I run my domain. This can be easily solved by creating another application and pointing &lt;span class="caps"&gt;DNS&lt;/span&gt; to&amp;nbsp;it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;posts.zimmi.cz A 174.179.25.170
www.posts.zimmi.cz CNAME posts-zimmi.rhcloud.com
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Just don&amp;#8217;t forget to handle both naked and &lt;code&gt;www&lt;/code&gt; version. When Google reindexes new URLs (http://www.zimmi.cz/posts instead of http://posts.zimmi.cz) subdomain application might be&amp;nbsp;deleted.&lt;/p&gt;</content><category term="openshift"></category></entry><entry><title>PostGIS Case Study: Vozejkmap Open Data (Part II)</title><link href="https://www.zimmi.cz/posts/2015/postgis-case-study-vozejkmap-open-data-part-ii/" rel="alternate"></link><published>2015-02-21T20:54:00+01:00</published><updated>2015-02-21T20:54:00+01:00</updated><author><name>Michal Zimmermann</name></author><id>tag:www.zimmi.cz,2015-02-21:/posts/2015/postgis-case-study-vozejkmap-open-data-part-ii/</id><summary type="html">&lt;p&gt;&lt;a href="{{ pcposturl(2014, 12, 02, 'postgis-case-study-vozejkmap-open-data-part-i') }}"&gt;In the first part of my little case study&lt;/a&gt; I downloaded &lt;a href="http://vozejkmap.cz"&gt;vozejkmap.cz&lt;/a&gt; dataset and imported it into the PostGIS database. Having spatial data safely stored the time comes to get it onto the map. Libraries used&amp;nbsp;are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://leafletjs.com"&gt;Leaflet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/lvoogdt/Leaflet.awesome-markers"&gt;Leaflet.awesome-markers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Leaflet/Leaflet.markercluster"&gt;Leaflet.markercluster&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I teach cartography visualization classes this semester …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="{{ pcposturl(2014, 12, 02, 'postgis-case-study-vozejkmap-open-data-part-i') }}"&gt;In the first part of my little case study&lt;/a&gt; I downloaded &lt;a href="http://vozejkmap.cz"&gt;vozejkmap.cz&lt;/a&gt; dataset and imported it into the PostGIS database. Having spatial data safely stored the time comes to get it onto the map. Libraries used&amp;nbsp;are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://leafletjs.com"&gt;Leaflet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/lvoogdt/Leaflet.awesome-markers"&gt;Leaflet.awesome-markers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Leaflet/Leaflet.markercluster"&gt;Leaflet.markercluster&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I teach cartography visualization classes this semester and this map should serve well as an example of what can be done with online&amp;nbsp;maps.&lt;/p&gt;
&lt;h2&gt;Retrieving data from the PostGIS&amp;nbsp;database&lt;/h2&gt;
&lt;p&gt;Our goal is to build the whole map as a static &lt;span class="caps"&gt;HTML&lt;/span&gt; page without any backend logic. Thus, data needs to be extracted from the database into the format readable with Leaflet - &lt;a href="http://geojson.org/"&gt;GeoJSON&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;That&amp;#8217;s fairly easy with the &lt;a href="http://www.postgresonline.com/journal/archives/267-Creating-GeoJSON-Feature-Collections-with-JSON-and-PostGIS-functions.html"&gt;postgresonline.com tutorial&lt;/a&gt;. It took me quite a time to find out what the following query does. Splitting it into smaller chunks helped a&amp;nbsp;lot.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;SELECT row_to_json(fc)
FROM (
SELECT &amp;#39;FeatureCollection&amp;#39; AS type,
    array_to_json(array_agg(f)) AS features
    FROM (SELECT &amp;#39;Feature&amp;#39; AS type,
        ST_AsGeoJSON(lg.geom)::json As geometry,
        row_to_json((SELECT l FROM (SELECT id, title, location_type, description, author_name, attr1, attr2, attr3) AS l
  )) AS properties
FROM vozejkmap AS lg ) AS f )  AS fc \g /path/to/file.json;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To get all rows with &lt;code&gt;type&lt;/code&gt;, &lt;code&gt;geometry&lt;/code&gt; and &lt;code&gt;properties&lt;/code&gt; columns (these are the ones defined in GeoJSON specification, see the link above), run&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;SELECT &amp;#39;Feature&amp;#39; AS type,
            ST_AsGeoJSON(lg.geom)::json As geometry,
            row_to_json((SELECT l FROM (SELECT id, title, location_type, description, author_name, attr1, attr2, attr3) AS l
      )) AS properties
    FROM vozejkmap AS lg
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;array_agg()&lt;/code&gt; squashes all the rows into an array while &lt;code&gt;array_to_json()&lt;/code&gt; returns the array as &lt;span class="caps"&gt;JSON&lt;/span&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;SELECT &amp;#39;FeatureCollection&amp;#39; AS type,
    array_to_json(array_agg(f)) AS features
    FROM (SELECT &amp;#39;Feature&amp;#39; AS type,
        ST_AsGeoJSON(lg.geom)::json As geometry,
        row_to_json((SELECT l FROM (SELECT id, title, location_type, description, author_name, attr1, attr2, attr3) AS l
  )) AS properties
FROM vozejkmap AS lg ) AS f
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In the last step (the whole code as shown above) &lt;code&gt;row_to_json&lt;/code&gt; returns the result as &lt;span class="caps"&gt;JSON&lt;/span&gt;.&lt;/p&gt;
&lt;h3&gt;Caveats&lt;/h3&gt;
&lt;p&gt;If you run this code from the psql console, be sure&amp;nbsp;you&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;set &lt;em&gt;show only row&lt;/em&gt; to true with &lt;code&gt;\t&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;set &lt;em&gt;expanded output&lt;/em&gt; to false with &lt;code&gt;\x off&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you don&amp;#8217;t, you&amp;#8217;ll have lots of hyphens and column names saved to the json&amp;nbsp;file.&lt;/p&gt;
&lt;h2&gt;Leaflet&amp;nbsp;map&lt;/h2&gt;
&lt;p&gt;Map JavaScript is rather simple with ~30 lines of code (not taking styles into account). Thanks to the great plugins it is easy to show ~7,600 points on the map real&amp;nbsp;quick.&lt;/p&gt;
&lt;p&gt;I didn&amp;#8217;t do much customization apart from styling markers and binding&amp;nbsp;popups.&lt;/p&gt;
&lt;p&gt;&lt;img data-echo="/posts/assets/postgis-case-study-vozejkmap-open-data-part-ii/map.png" title="vozejkmap.cz data map" class="img-responsive centered"&gt;&lt;/p&gt;
&lt;h2&gt;What&amp;#8217;s&amp;nbsp;next&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="http://turfjs.org"&gt;Turf&lt;/a&gt; which means I need to think of what could be fun to do with this&amp;nbsp;data&lt;/li&gt;
&lt;li&gt;Layers&amp;nbsp;switching&lt;/li&gt;
&lt;li&gt;Map key (by extending&amp;nbsp;L.Control)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The code is still &lt;a href="https://github.com/zimmicz/vozejkmap-to-postgis"&gt;available at my GitHub&lt;/a&gt;.&lt;/p&gt;</content><category term="postgresql"></category><category term="postgis"></category></entry><entry><title>Using PostgreSQL To Update Outdated Map Links</title><link href="https://www.zimmi.cz/posts/2015/using-postgresql-to-update-outdated-map-links/" rel="alternate"></link><published>2015-02-16T18:38:00+01:00</published><updated>2015-02-16T18:38:00+01:00</updated><author><name>Michal Zimmermann</name></author><id>tag:www.zimmi.cz,2015-02-16:/posts/2015/using-postgresql-to-update-outdated-map-links/</id><summary type="html">&lt;p&gt;&lt;a href="http://www.edpp.cz/pdb_mapa-povodnoveho-planu-mesta/"&gt;We&amp;#8217;ve rolled out&lt;/a&gt; completely new map &lt;span class="caps"&gt;GUI&lt;/span&gt; at &lt;a href="http://edpp.cz"&gt;edpp.cz&lt;/a&gt; built on top of &lt;a href="http://ol3js.org"&gt;OpenLayers 3&lt;/a&gt;. It looks great and has lots of functions both for &lt;span class="caps"&gt;BFU&lt;/span&gt; and power users. The only pitfall that came with moving away from OpenLayers 2 were remarkable differences in zoom levels between the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="http://www.edpp.cz/pdb_mapa-povodnoveho-planu-mesta/"&gt;We&amp;#8217;ve rolled out&lt;/a&gt; completely new map &lt;span class="caps"&gt;GUI&lt;/span&gt; at &lt;a href="http://edpp.cz"&gt;edpp.cz&lt;/a&gt; built on top of &lt;a href="http://ol3js.org"&gt;OpenLayers 3&lt;/a&gt;. It looks great and has lots of functions both for &lt;span class="caps"&gt;BFU&lt;/span&gt; and power users. The only pitfall that came with moving away from OpenLayers 2 were remarkable differences in zoom levels between the old map and the new&amp;nbsp;one.&lt;/p&gt;
&lt;p&gt;Each of our maps is defined by our admins (center, zoom level, layers) at the map creation. Lots of links calling different views of map are created as well. They take form of &lt;code&gt;http://edpp.cz/some-map?0=0&amp;amp;1=0...zoom=5&lt;/code&gt;. That &lt;code&gt;zoom=&amp;lt;Number&amp;gt;&lt;/code&gt; started causing troubles immediately after the map switch. No way my workmates would update them one by one as there were ~4,500 of them. Sounds like a task for little bit of regular expressions and some &lt;span class="caps"&gt;SQL&lt;/span&gt;&amp;nbsp;updates.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;UPDATE table
    SET column = regexp_replace(column, &amp;#39;zoom=\d&amp;#39;, &amp;#39;zoom=&amp;#39; || subquery.zoom, &amp;#39;g&amp;#39;)
    FROM (
        SELECT regexp_replace(
            substring(column from &amp;#39;zoom=\d&amp;#39;),
            &amp;#39;zoom=(\d)&amp;#39;,
            &amp;#39;\1&amp;#39;,
            &amp;#39;g&amp;#39;)::integer + 2 AS zoom, guid
        FROM table) AS subquery
    WHERE column ~ &amp;#39;zoom=\d&amp;#39;
        AND table.guid = subquery.guid
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That&amp;#8217;s what I&amp;#8217;ve come up with. It basically extracts the zoom level from the link, adds number two to its value and writes it back to the&amp;nbsp;string.&lt;/p&gt;</content><category term="postgresql"></category><category term="regex"></category></entry><entry><title>Leaflet With Custom CRS (EPSG:5514)</title><link href="https://www.zimmi.cz/posts/2015/leaflet-with-custom-crs-epsg5514/" rel="alternate"></link><published>2015-01-15T19:46:00+01:00</published><updated>2015-01-15T19:46:00+01:00</updated><author><name>Michal Zimmermann</name></author><id>tag:www.zimmi.cz,2015-01-15:/posts/2015/leaflet-with-custom-crs-epsg5514/</id><summary type="html">&lt;p&gt;If you ever find yourself in need to use custom projection with Leaflet, feel free to start with this example of &lt;a href="https://github.com/zimmicz/leaflet-custom-crs-jtsk"&gt;Czech national coordinate system&lt;/a&gt;. All you need is &lt;a href="http://leafletjs.com"&gt;Leaflet&lt;/a&gt;, &lt;a href="http://proj4js.org/"&gt;proj4.js&lt;/a&gt; and &lt;a href="https://github.com/kartena/Proj4Leaflet"&gt;proj4 for Leaflet plugin&lt;/a&gt;. I&amp;#8217;m still not sure how &lt;code&gt;origin&lt;/code&gt; coordinates work&amp;nbsp;though.&lt;/p&gt;</summary><content type="html">&lt;p&gt;If you ever find yourself in need to use custom projection with Leaflet, feel free to start with this example of &lt;a href="https://github.com/zimmicz/leaflet-custom-crs-jtsk"&gt;Czech national coordinate system&lt;/a&gt;. All you need is &lt;a href="http://leafletjs.com"&gt;Leaflet&lt;/a&gt;, &lt;a href="http://proj4js.org/"&gt;proj4.js&lt;/a&gt; and &lt;a href="https://github.com/kartena/Proj4Leaflet"&gt;proj4 for Leaflet plugin&lt;/a&gt;. I&amp;#8217;m still not sure how &lt;code&gt;origin&lt;/code&gt; coordinates work&amp;nbsp;though.&lt;/p&gt;</content><category term="javascript"></category><category term="leaflet"></category></entry><entry><title>PostGIS Case Study: VozejkMap Open Data (Part I)</title><link href="https://www.zimmi.cz/posts/2014/postgis-case-study-vozejkmap-open-data-part-i/" rel="alternate"></link><published>2014-12-02T17:59:00+01:00</published><updated>2014-12-02T17:59:00+01:00</updated><author><name>Michal Zimmermann</name></author><id>tag:www.zimmi.cz,2014-12-02:/posts/2014/postgis-case-study-vozejkmap-open-data-part-i/</id><summary type="html">&lt;p&gt;&lt;a href="http://www.vozejkmap.cz"&gt;VozejkMap.cz&lt;/a&gt; is a Czech &lt;strong&gt;open data&lt;/strong&gt; iniatitive that collects data about wheelchair accessible places, e.g. pubs, toilets, cafes etc. As part of being open, they offer a &lt;a href="http://www.vozejkmap.cz/opendata/"&gt;&lt;span class="caps"&gt;JSON&lt;/span&gt; data download&lt;/a&gt;. &lt;span class="caps"&gt;JSON&lt;/span&gt; is a great text format, not so great spatial format (leaving GeoJSON aside) though. Anyway, nothing that …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="http://www.vozejkmap.cz"&gt;VozejkMap.cz&lt;/a&gt; is a Czech &lt;strong&gt;open data&lt;/strong&gt; iniatitive that collects data about wheelchair accessible places, e.g. pubs, toilets, cafes etc. As part of being open, they offer a &lt;a href="http://www.vozejkmap.cz/opendata/"&gt;&lt;span class="caps"&gt;JSON&lt;/span&gt; data download&lt;/a&gt;. &lt;span class="caps"&gt;JSON&lt;/span&gt; is a great text format, not so great spatial format (leaving GeoJSON aside) though. Anyway, nothing that &lt;a href="http://posts.zimmi.cz/tag/postgis/"&gt;PostGIS&lt;/a&gt; wouldn&amp;#8217;t be able to take care&amp;nbsp;of.&lt;/p&gt;
&lt;h3&gt;Let&amp;#8217;s get some&amp;nbsp;data&lt;/h3&gt;
&lt;p&gt;Using curl or wget, let&amp;#8217;s download the &lt;span class="caps"&gt;JSON&lt;/span&gt;&amp;nbsp;file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wget -O /tmp/locations.json http://www.vozejkmap.cz/opendata/locations.json
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We need to split them into rows to load each point into one&amp;nbsp;row:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sed -i &amp;#39;s/\},{/\n},{/g&amp;#39; /tmp/locations.json
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you peep into the file, you&amp;#8217;ll see lots of unicode characters we don&amp;#8217;t want to have in our pretty little table. Here&amp;#8217;s how we get rid of&amp;nbsp;them:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;echo -en &amp;quot;$(cat /tmp/locations.json)&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Let&amp;#8217;s load the&amp;nbsp;data&lt;/h3&gt;
&lt;p&gt;Let&amp;#8217;s just be nice and leave the public schema&amp;nbsp;clean.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;CREATE SCHEMA vozejkmap;
SET search_path=vozejkmap, public;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Load the&amp;nbsp;data:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;CREATE TABLE vozejkmap_raw(id SERIAL PRIMARY KEY, raw text);
COPY vozejkmap_raw(raw) FROM &amp;#39;/tmp/locations.json&amp;#39; DELIMITERS &amp;#39;#&amp;#39; ESCAPE &amp;#39;\&amp;#39; CSV;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A few&amp;nbsp;notes:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;I&amp;#8217;m using &lt;code&gt;/tmp&lt;/code&gt; folder to avoid any permission-denied issues when opening the file from &lt;code&gt;psql&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;By setting &lt;code&gt;DELIMITERS&lt;/code&gt; to &lt;code&gt;#&lt;/code&gt; we tell PostgreSQL to load whole data into one column, because it is safe to assume there is no such character in our&amp;nbsp;data.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ESCAPE&lt;/code&gt; needs to be set because there is one trailing quote in the&amp;nbsp;dataset.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Let&amp;#8217;s get dirty with spatial&amp;nbsp;data&lt;/h3&gt;
&lt;p&gt;Great, now what? We loaded all the data into one column. That is not very useful, is it? How about splitting them into separate columns with this query? Shall we call it a &lt;code&gt;split_part&lt;/code&gt; hell?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;CREATE TABLE vozejkmap AS
SELECT
    id,
    trim(
        split_part(
            split_part(
                raw, &amp;#39;title:&amp;#39;, 2
            ),
            &amp;#39;,location_type:&amp;#39;, 1
        )
    ) AS title,

    trim(
        split_part(
            split_part(
                raw, &amp;#39;location_type:&amp;#39;, 2
            ),
            &amp;#39;,description:&amp;#39;, 1
        )
    )::integer AS location_type,

    trim(
        split_part(
            split_part(
                raw, &amp;#39;description:&amp;#39;, 2
            ),
            &amp;#39;,lat:&amp;#39;, 1
        )
    ) AS description,

    cast( trim(
        split_part(
            split_part(
                raw, &amp;#39;lat:&amp;#39;, 2
            ),
            &amp;#39;,lng:&amp;#39;, 1
        )
    ) AS double precision) AS lat,

    cast( trim(
        split_part(
            split_part(
                raw, &amp;#39;lng:&amp;#39;, 2
            ),
            &amp;#39;,attr1:&amp;#39;, 1
        )
    )  AS double precision) AS lng,

    trim(
        split_part(
            split_part(
                raw, &amp;#39;attr1:&amp;#39;, 2
            ),
            &amp;#39;,attr2:&amp;#39;, 1
        )
    )::integer AS attr1,

    trim(
        split_part(
            split_part(
                raw, &amp;#39;attr2:&amp;#39;, 2
            ),
            &amp;#39;,attr3:&amp;#39;, 1
        )
    ) AS attr2,

    trim(
        split_part(
            split_part(
                raw, &amp;#39;attr3:&amp;#39;, 2
            ),
            &amp;#39;,author_name:&amp;#39;, 1
        )
    ) AS attr3,

    trim(
        split_part(
            split_part(
                raw, &amp;#39;author_name:&amp;#39;, 2
            ),
            &amp;#39;,}:&amp;#39;, 1
        )
    ) AS author_name

FROM vozejkmap_raw;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It just splits the &lt;span class="caps"&gt;JSON&lt;/span&gt; data and creates table out of it according to the &lt;a href="http://www.vozejkmap.cz/opendata/"&gt;VozejkMap.cz data specification&lt;/a&gt;. Before going on we should create a table with location types to join their numeric codes to real&amp;nbsp;names:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;CREATE TABLE location_type (
    id integer PRIMARY KEY,
    description varchar(255)
);

INSERT INTO location_type VALUES(1, &amp;#39;Kultura&amp;#39;);
INSERT INTO location_type VALUES(2, &amp;#39;Sport&amp;#39;);
INSERT INTO location_type VALUES(3, &amp;#39;Instituce&amp;#39;);
INSERT INTO location_type VALUES(4, &amp;#39;Jídlo a pití&amp;#39;);
INSERT INTO location_type VALUES(5, &amp;#39;Ubytování&amp;#39;);
INSERT INTO location_type VALUES(6, &amp;#39;Lékaři, lékárny&amp;#39;);
INSERT INTO location_type VALUES(7, &amp;#39;Jiné&amp;#39;);
INSERT INTO location_type VALUES(8, &amp;#39;Doprava&amp;#39;);
INSERT INTO location_type VALUES(9, &amp;#39;Veřejné WC&amp;#39;);
INSERT INTO location_type VALUES(10, &amp;#39;Benzínka&amp;#39;);
INSERT INTO location_type VALUES(11, &amp;#39;Obchod&amp;#39;);
INSERT INTO location_type VALUES(12, &amp;#39;Banka, bankomat&amp;#39;);
INSERT INTO location_type VALUES(13, &amp;#39;Parkoviště&amp;#39;);
INSERT INTO location_type VALUES(14, &amp;#39;Prodejní a servisní místa Škoda Auto&amp;#39;);
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Let&amp;#8217;s build some geometry column, constraints and indexes. And don&amp;#8217;t forget to get rid of all the mess (the &lt;code&gt;vozejkmap_raw&lt;/code&gt; table).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;DROP TABLE vozejkmap_raw;
ALTER TABLE vozejkmap ADD PRIMARY KEY(id);
-- 4326 geometry is not very useful for measurements, I might get to that next time
ALTER TABLE vozejkmap ADD COLUMN geom geometry(point, 4326);
ALTER TABLE vozejkmap ADD CONSTRAINT loctype_fk FOREIGN KEY(location_type); REFERENCES location_type(id);

UPDATE vozejkmap SET geom = ST_SetSRID(ST_MakePoint(lng, lat), 4326);
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;And here we are, ready to use our spatial&amp;nbsp;data!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Feel free to &lt;a href="https://github.com/zimmicz/vozejkmap-to-postgis"&gt;grab the code&lt;/a&gt; at&amp;nbsp;GitHub.&lt;/p&gt;</content><category term="postgresql"></category><category term="postgis"></category></entry><entry><title>PostGIS Spatial Indexing With ST_Intersects</title><link href="https://www.zimmi.cz/posts/2014/postgis-spatial-indexing-with-st_intersects/" rel="alternate"></link><published>2014-11-23T10:05:00+01:00</published><updated>2014-11-23T10:05:00+01:00</updated><author><name>Michal Zimmermann</name></author><id>tag:www.zimmi.cz,2014-11-23:/posts/2014/postgis-spatial-indexing-with-st_intersects/</id><summary type="html">&lt;p&gt;&lt;a href="http://postgis.net/docs/ST_Intersects.html"&gt;PostGIS docs&lt;/a&gt; clearly states that:
    &amp;gt; This function call will automatically include a bounding box comparison that will make use of any indexes that are available on the&amp;nbsp;geometries.&lt;/p&gt;
&lt;p&gt;That means (or at least I think so) that you shouldn&amp;#8217;t bother with using &lt;a href="http://postgis.net/docs/reference.html#Operators"&gt;operators&lt;/a&gt; before calling this&amp;nbsp;function.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://slides.com/michalzimmermann"&gt;I was …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="http://postgis.net/docs/ST_Intersects.html"&gt;PostGIS docs&lt;/a&gt; clearly states that:
    &amp;gt; This function call will automatically include a bounding box comparison that will make use of any indexes that are available on the&amp;nbsp;geometries.&lt;/p&gt;
&lt;p&gt;That means (or at least I think so) that you shouldn&amp;#8217;t bother with using &lt;a href="http://postgis.net/docs/reference.html#Operators"&gt;operators&lt;/a&gt; before calling this&amp;nbsp;function.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://slides.com/michalzimmermann"&gt;I was preparing&lt;/a&gt; my second lecture on PostGIS and I was experimenting a bit and came up with an interesting thing on this&amp;nbsp;matter:&lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s have two &lt;span class="caps"&gt;SQL&lt;/span&gt; relations, &lt;code&gt;roads&lt;/code&gt; and &lt;code&gt;regions&lt;/code&gt;. I would like to retrieve every road that intersects a certain region. Spatial indexes were built beforehand on both&amp;nbsp;tables.&lt;/p&gt;
&lt;p&gt;First&amp;nbsp;try:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;EXPLAIN ANALYZE SELECT roads.* FROM roads
JOIN regions ON ST_Intersects(roads.geom, regions.geom)
WHERE regions.&amp;quot;NAZEV&amp;quot; = &amp;#39;Jihomoravský&amp;#39;;`
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And here comes the&amp;nbsp;result:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Nested Loop  (cost=4.85..324.26 rows=249 width=214) (actual time=45.102..5101.472 rows=74253 loops=1)
-&amp;gt;  Seq Scan on regions  (cost=0.00..12.62 rows=1 width=32) (actual time=0.015..0.018 rows=1 loops=1)
     Filter: ((&amp;quot;NAZEV&amp;quot;)::text = &amp;#39;Jihomoravský&amp;#39;::text)
     Rows Removed by Filter: 13
-&amp;gt;  Bitmap Heap Scan on roads  (cost=4.85..311.38 rows=25 width=214) (actual time=45.079..4931.495 rows=74253 loops=1)
     Recheck Cond: (geom &amp;amp;&amp;amp; regions.geom)
     Rows Removed by Index Recheck: 154841
     Filter: _st_intersects(geom, regions.geom)
     Rows Removed by Filter: 71212
     -&amp;gt;  Bitmap Index Scan on roads_idx  (cost=0.00..4.85 rows=75 width=0) (actual time=40.142..40.142 rows=145465 loops=1)
           Index Cond: (geom &amp;amp;&amp;amp; regions.geom)
Total runtime: 5181.459 ms
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I was pretty satisfied with the result, I kept digging deeper&amp;nbsp;though.&lt;/p&gt;
&lt;p&gt;Second&amp;nbsp;try:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;EXPLAIN ANALYZE SELECT roads.* FROM roads
JOIN regions ON roads.geom &amp;amp;&amp;amp; regions.geom
WHERE regions.&amp;quot;NAZEV&amp;quot; = &amp;#39;Jihomoravský&amp;#39; AND ST_Intersects(roads.geom, regions.geom);
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And the&amp;nbsp;result:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Nested Loop  (cost=0.29..21.19 rows=1 width=214) (actual time=3.041..3850.302 rows=74253 loops=1)
-&amp;gt;  Seq Scan on regions  (cost=0.00..12.62 rows=1 width=32) (actual time=0.021..0.024 rows=1 loops=1)
     Filter: ((&amp;quot;NAZEV&amp;quot;)::text = &amp;#39;Jihomoravský&amp;#39;::text)
     Rows Removed by Filter: 13
-&amp;gt;  Index Scan using roads_idx on roads  (cost=0.29..8.55 rows=1 width=214) (actual time=2.938..3681.432 rows=74253 loops=1)
     Index Cond: ((geom &amp;amp;&amp;amp; regions.geom) AND (geom &amp;amp;&amp;amp; regions.geom))
     Filter: _st_intersects(geom, regions.geom)
     Rows Removed by Filter: 71212
Total runtime: 3930.270 ms
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now there&amp;#8217;s a significant difference between total runtimes of both queries and - more important - also a difference between their query plans. The latter is like &lt;strong&gt;20 % faster&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m puzzled about this behavior and would appreciate any thoughts on this. Reach me at &lt;a href="http://twitter.com/zimmicz"&gt;Twitter&lt;/a&gt;, &lt;a href="https://www.linkedin.com/pub/michal-zimmermann/29/8/b30"&gt;LinkedIn&lt;/a&gt; or e-mail&amp;nbsp;(zimmicz[at]gmail.com).&lt;/p&gt;</content><category term="postgis"></category></entry><entry><title>Bash: Prepend To Filename</title><link href="https://www.zimmi.cz/posts/2014/bash-prepend-to-filename/" rel="alternate"></link><published>2014-11-01T13:11:00+01:00</published><updated>2014-11-01T13:11:00+01:00</updated><author><name>Michal Zimmermann</name></author><id>tag:www.zimmi.cz,2014-11-01:/posts/2014/bash-prepend-to-filename/</id><summary type="html">&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;for f in *; do mv &amp;quot;$f&amp;quot; &amp;quot;prepend_$f&amp;quot;; done
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Whenever you need to prepend anything to your&amp;nbsp;files.&lt;/p&gt;</summary><content type="html">&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;for f in *; do mv &amp;quot;$f&amp;quot; &amp;quot;prepend_$f&amp;quot;; done
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Whenever you need to prepend anything to your&amp;nbsp;files.&lt;/p&gt;</content><category term="linux"></category><category term="bash"></category></entry><entry><title>Migrating Geoserver And Checking For Missing Data</title><link href="https://www.zimmi.cz/posts/2014/migrating-geoserver-and-checking-for-missing-data/" rel="alternate"></link><published>2014-10-29T16:25:00+01:00</published><updated>2014-10-29T16:25:00+01:00</updated><author><name>Michal Zimmermann</name></author><id>tag:www.zimmi.cz,2014-10-29:/posts/2014/migrating-geoserver-and-checking-for-missing-data/</id><summary type="html">&lt;p&gt;I&amp;#8217;ve upgraded a handful of Geoserver installations and it has never been flawless. If you&amp;#8217;re lucky you end up with just &lt;em&gt;some&lt;/em&gt; layers missing, if you&amp;#8217;re not, you&amp;#8217;ll miss a bunch of them (together with layergroups, some stores, workspaces might screw up&amp;nbsp;etc.).&lt;/p&gt;
&lt;p&gt;But how do …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I&amp;#8217;ve upgraded a handful of Geoserver installations and it has never been flawless. If you&amp;#8217;re lucky you end up with just &lt;em&gt;some&lt;/em&gt; layers missing, if you&amp;#8217;re not, you&amp;#8217;ll miss a bunch of them (together with layergroups, some stores, workspaces might screw up&amp;nbsp;etc.).&lt;/p&gt;
&lt;p&gt;But how do you check for missing data before switching to the newer version? Thanks to the &lt;a href="http://docs.geoserver.org/stable/en/user/rest/api/index.html"&gt;&lt;span class="caps"&gt;REST&lt;/span&gt; &lt;span class="caps"&gt;API&lt;/span&gt; implemented within Geoserver&lt;/a&gt;, it&amp;#8217;s rather&amp;nbsp;easy.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;bs4&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;requests.auth&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;HTTPBasicAuth&lt;/span&gt;

&lt;span class="n"&gt;req&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;http://example.com/geoserver/rest/layers&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;auth&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;HTTPBasicAuth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;username&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;password&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="n"&gt;html&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="n"&gt;href&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_text&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;

&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;list.txt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;href&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We needed to migrate ~ 17,000 layers last week, and yes, we could have just shut the door and spend couple of nights checking one after another, if we were the dumbest &lt;span class="caps"&gt;GIS&lt;/span&gt; company&amp;nbsp;ever.&lt;/p&gt;
&lt;p&gt;As I wanted to make it a bit easier I wrote the simple Python script (see above) that just authenticates against Geoserver and downloads the list of layers. I actually had to do that twice - both old and new instance. A &lt;a href="https://www.diffchecker.com/"&gt;simple file comparison&lt;/a&gt; followed and I got a list of missing layers in less than two&amp;nbsp;minutes.&lt;/p&gt;
&lt;p&gt;If you do the same to workspaces, stores and layergroups, your chances of not losing some data after the switch are pretty&amp;nbsp;high.&lt;/p&gt;
&lt;p&gt;I guess it&amp;#8217;s reasonable to check your maps by hand as well, but this gives you the picture of the current state of your data real&amp;nbsp;quick.&lt;/p&gt;</content><category term="geoserver"></category><category term="python"></category></entry><entry><title>ogr2ogr UNIX x Windows</title><link href="https://www.zimmi.cz/posts/2014/ogr2ogr-unix-x-windows/" rel="alternate"></link><published>2014-09-23T20:03:00+02:00</published><updated>2014-09-23T20:03:00+02:00</updated><author><name>Michal Zimmermann</name></author><id>tag:www.zimmi.cz,2014-09-23:/posts/2014/ogr2ogr-unix-x-windows/</id><summary type="html">&lt;p&gt;&lt;span class="caps"&gt;GDAL&lt;/span&gt; with its ogr2ogr, ogrinfo and many more is one of the best open source tools to do anything to your spatial data. It is a&amp;nbsp;command line tool, which sort of determines it to be used with &lt;span class="caps"&gt;UNIX&lt;/span&gt; systems, but you might bump into a Windows guy trying to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;span class="caps"&gt;GDAL&lt;/span&gt; with its ogr2ogr, ogrinfo and many more is one of the best open source tools to do anything to your spatial data. It is a&amp;nbsp;command line tool, which sort of determines it to be used with &lt;span class="caps"&gt;UNIX&lt;/span&gt; systems, but you might bump into a Windows guy trying to use it as well once in a&amp;nbsp;while.&lt;/p&gt;
&lt;p&gt;Be careful, it behaves differently on different &lt;span class="caps"&gt;OS&lt;/span&gt;. Let&amp;#8217;s say you do something like this on &lt;span class="caps"&gt;UNIX&lt;/span&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ogr2ogr -f GeoJSON -where &amp;quot;attribute IN (&amp;#39;value1&amp;#39;, &amp;#39;value2&amp;#39;)&amp;quot; output.json input.json
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;What you &lt;abbr title="But you might get expected result as well"&gt;might get is a big nothing&lt;/abbr&gt;. Executed on Windows it gives you the result you&amp;#8217;ve expected. &lt;em&gt;Aargh&lt;/em&gt;, what is that supposed to&amp;nbsp;mean?&lt;/p&gt;
&lt;p&gt;Well, that&amp;#8217;s the ogr2ogr&amp;#8217;s way to tell you: &lt;em&gt;Hello there, you need to switch single quotes for double quotes and vice versa, you dumb!&lt;/em&gt; I don&amp;#8217;t know why and I find it really annoying. Just in case you get stuck with ogr2ogr (or probably any other command line tool), try&amp;nbsp;this.&lt;/p&gt;</content><category term="spatial"></category><category term="linux"></category></entry><entry><title>Notify When Average of 10 Subsequent Numbers Is Bigger Than Given Value</title><link href="https://www.zimmi.cz/posts/2014/notify-when-average-of-10-subsequent-numbers-is-bigger-than-given-value/" rel="alternate"></link><published>2014-09-21T17:38:00+02:00</published><updated>2014-09-21T17:38:00+02:00</updated><author><name>Michal Zimmermann</name></author><id>tag:www.zimmi.cz,2014-09-21:/posts/2014/notify-when-average-of-10-subsequent-numbers-is-bigger-than-given-value/</id><summary type="html">&lt;p&gt;I found an &lt;a href="http://stackoverflow.com/questions/25952380/php-find-a-maximum-average-for-10-subsequent-numbers-in-a-list-of-50-random-numb"&gt;interesting question&lt;/a&gt; at StackOverflow asking for help finding solution to what I have already mentioned in the title, with &lt;span class="caps"&gt;PHP&lt;/span&gt;. I gave it a try before reading answers and came up with the following&amp;nbsp;code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$avg  = // value we are looking for
$size = count($numbers);

for ($i = 0 …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;I found an &lt;a href="http://stackoverflow.com/questions/25952380/php-find-a-maximum-average-for-10-subsequent-numbers-in-a-list-of-50-random-numb"&gt;interesting question&lt;/a&gt; at StackOverflow asking for help finding solution to what I have already mentioned in the title, with &lt;span class="caps"&gt;PHP&lt;/span&gt;. I gave it a try before reading answers and came up with the following&amp;nbsp;code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$avg  = // value we are looking for
$size = count($numbers);

for ($i = 0; $i &amp;lt; $size; $i += 1) {
    if ($i + 9 &amp;lt; 51) {
        $val += $numbers[$i];
        for ($j = $i + 1; $j &amp;lt; 10 + $i; $j += 1) {
            $val += $numbers[$j];
        }
        if ($val / 10 &amp;gt;= $avg) { // hit
            // do something
        }
        $val = 0;
    }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That was the first that I could think of. And it worked. The answer given by Dave Chen was much more elegant than my solution (although I think it does something a bit different, but that&amp;#8217;s not the point&amp;nbsp;here):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$number = 10; //numbers in a set
$max = 0;
$index = 0;

$size = sizeof($numbers) - $number;
for ($i = 0; $i &amp;lt; $size; $i++) {
    $tmp = array_sum(array_slice($numbers, $i, $number)) / $number;
    if ($tmp &amp;gt; $max) {
        $max = $tmp;
        $index = $i;
    }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I made a simple benchmark with &lt;a href="http://php.net/manual/en/function.microtime.php"&gt;&lt;code&gt;microtime()&lt;/code&gt;&lt;/a&gt; and found out that my solution (ran 100k times) took about ~12.3 seconds while Dave&amp;#8217;s took only ~7.4 seconds to finish. That makes his code almost twice faster than&amp;nbsp;mine.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Lesson learned: do not stop&amp;nbsp;learning!&lt;/strong&gt;&lt;/p&gt;</content><category term="php"></category></entry><entry><title>PostgreSQL Remote Access</title><link href="https://www.zimmi.cz/posts/2014/postgresql-remote-access/" rel="alternate"></link><published>2014-09-17T17:04:00+02:00</published><updated>2014-09-17T17:04:00+02:00</updated><author><name>Michal Zimmermann</name></author><id>tag:www.zimmi.cz,2014-09-17:/posts/2014/postgresql-remote-access/</id><summary type="html">&lt;p&gt;PostgreSQL is set to listen only to connections coming from localhost by default. I guess that&amp;#8217;s fine as far as you don&amp;#8217;t need access to the database from anywhere else (like your work network). If you do, you need to log via &lt;span class="caps"&gt;SSH&lt;/span&gt; or use some online database …&lt;/p&gt;</summary><content type="html">&lt;p&gt;PostgreSQL is set to listen only to connections coming from localhost by default. I guess that&amp;#8217;s fine as far as you don&amp;#8217;t need access to the database from anywhere else (like your work network). If you do, you need to log via &lt;span class="caps"&gt;SSH&lt;/span&gt; or use some online database management tool (go for &lt;a href="http://adminer.org"&gt;Adminer&lt;/a&gt; and forget about anything called php[pg|my]admin). Or you can set it up to access connections from other&amp;nbsp;locations.&lt;/p&gt;
&lt;p&gt;You need&amp;nbsp;to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;set &lt;code&gt;listen_addresses&lt;/code&gt; to &lt;code&gt;*&lt;/code&gt; in your postgres.conf. That does not mean anyone can connect to your database, that means that the server will listen to connections coming from any available &lt;span class="caps"&gt;IP&lt;/span&gt;&amp;nbsp;interface.&lt;/li&gt;
&lt;li&gt;insert new entry into pg_hba.conf looking like this: &lt;code&gt;host database user xxx.xxx.xxx.xxx md5&lt;/code&gt;. Now we&amp;#8217;re saying we only want connections coming from &lt;span class="caps"&gt;IP&lt;/span&gt; &lt;code&gt;xxx.xxx.xxx.xxx&lt;/code&gt; accepted.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add rule allowing the database server access to iptables. Number 5 says it will be the fifth rule in the order. It must come before the final &lt;span class="caps"&gt;REJECT&lt;/span&gt; &lt;span class="caps"&gt;ALL&lt;/span&gt; rule if&amp;nbsp;present.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;iptables -I INPUT 5 -p tcp --dport 5432 -s xxx.xxx.xxx.xxx -j ACCEPT&lt;/code&gt;
4. Just to be sure noone else is able to connect, reject all on port&amp;nbsp;5432.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;iptables -I INPUT 6 -p tcp --dport 5432 -j REJECT&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You&amp;#8217;re set to remotely connect to your database&amp;nbsp;server.&lt;/p&gt;</content><category term="postgresql"></category><category term="linux"></category></entry><entry><title>Switch Latitude And Longitude With Regular Expression</title><link href="https://www.zimmi.cz/posts/2014/switch-latitude-and-longitude-with-regular-expression/" rel="alternate"></link><published>2014-09-14T17:21:00+02:00</published><updated>2014-09-14T17:21:00+02:00</updated><author><name>Michal Zimmermann</name></author><id>tag:www.zimmi.cz,2014-09-14:/posts/2014/switch-latitude-and-longitude-with-regular-expression/</id><summary type="html">&lt;p&gt;It happens that you receive a file with longitude and latitude just in the opposite order that you would like to have. It&amp;#8217;s fairly easy to switch those without loading it into Excel or Calc and doing &lt;code&gt;Ctrl + C&lt;/code&gt; and &lt;code&gt;Ctrl + V&lt;/code&gt; on&amp;nbsp;columns.&lt;/p&gt;
&lt;p&gt;If you have a file …&lt;/p&gt;</summary><content type="html">&lt;p&gt;It happens that you receive a file with longitude and latitude just in the opposite order that you would like to have. It&amp;#8217;s fairly easy to switch those without loading it into Excel or Calc and doing &lt;code&gt;Ctrl + C&lt;/code&gt; and &lt;code&gt;Ctrl + V&lt;/code&gt; on&amp;nbsp;columns.&lt;/p&gt;
&lt;p&gt;If you have a file with tabular data that looks like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; 50.52, 60.15
 70.96, 80.1
-55.23, 62.03
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can use Sublime Text to switch the&amp;nbsp;values:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Press &lt;code&gt;Ctrl + H&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Copy &lt;code&gt;(\-?\d+\.?\d+),?[\t ]*(\-?\d+\.?\d+)$&lt;/code&gt; to &lt;em&gt;Find What&lt;/em&gt;&amp;nbsp;input&lt;/li&gt;
&lt;li&gt;Copy &lt;code&gt;$2,$1&lt;/code&gt; to &lt;em&gt;Replace With&lt;/em&gt;&amp;nbsp;input&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Hit &lt;em&gt;Replace All&lt;/em&gt; button and you&amp;#8217;re&amp;nbsp;done.&lt;/p&gt;</content><category term="sublime"></category><category term="regex"></category></entry><entry><title>Connecting To Secured ArcGIS Server Layer With OpenLayers 3</title><link href="https://www.zimmi.cz/posts/2014/connecting-to-secured-arcgis-server-layer-with-openlayers-3/" rel="alternate"></link><published>2014-09-12T18:03:00+02:00</published><updated>2014-09-12T18:03:00+02:00</updated><author><name>Michal Zimmermann</name></author><id>tag:www.zimmi.cz,2014-09-12:/posts/2014/connecting-to-secured-arcgis-server-layer-with-openlayers-3/</id><summary type="html">&lt;p&gt;I was made to use ArcGIS Server with &lt;a href="http://openlayers.org"&gt;Openlayers 3&lt;/a&gt; just recently as one of the projects I&amp;#8217;ve been working on demands such different tools to work&amp;nbsp;together.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;tl;dr: I hate&amp;nbsp;Esri.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I found myself in need to access secured layers published via &lt;span class="caps"&gt;WMS&lt;/span&gt; on ArcGIS Server using …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I was made to use ArcGIS Server with &lt;a href="http://openlayers.org"&gt;Openlayers 3&lt;/a&gt; just recently as one of the projects I&amp;#8217;ve been working on demands such different tools to work&amp;nbsp;together.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;tl;dr: I hate&amp;nbsp;Esri.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I found myself in need to access secured layers published via &lt;span class="caps"&gt;WMS&lt;/span&gt; on ArcGIS Server using username and password I was given, so here&amp;#8217;s a little how-to for anyone who would have to do the&amp;nbsp;same.&lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s start with a simple ol.layer.Image and pretend this is the secured layer we&amp;#8217;re looking&amp;nbsp;for:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;var layer = new ol.layer.Image({
    extent: extent,
    source: new ol.source.ImageWMS(/** @type {olx.source.ImageWMSOptions} */ ({
        url: url,
        params: {
            &amp;#39;LAYERS&amp;#39;: &amp;#39;layer&amp;#39;,
            &amp;#39;CRS&amp;#39;: &amp;#39;EPSG:3857&amp;#39;,
        }
    }))
});
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We need to retrieve the token, so we define a&amp;nbsp;function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;retrieveToken&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;XMLHttpRequest&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;200&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;responseText&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;contents&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;contents&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// response contents is where the token is stored&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;get&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://server.address/arcgis/tokens/?request=getToken&amp;amp;username=username&amp;amp;password=password&amp;amp;expiration=60&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I pass a parameter called &lt;code&gt;callback&lt;/code&gt; - that&amp;#8217;s a very important step, otherwise you would not be able to retrieve the token when you actually need it (&lt;span class="caps"&gt;AJAX&lt;/span&gt; stands for asynchronous). Now you just pass the token to the layer params like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;retrieveToken(function(token) {
    layer.getSource().updateParams({
        token: token
    })
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;When you open Firebug and inspect Network tab, you should find &lt;code&gt;token&lt;/code&gt; &lt;span class="caps"&gt;URL&lt;/span&gt; parameter passed along with &lt;span class="caps"&gt;WMS&lt;/span&gt; &lt;code&gt;GetMap&lt;/code&gt; request.&lt;/p&gt;
&lt;p&gt;Few&amp;nbsp;sidenotes:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Although you might be logged in ArcGIS Server via web interface, you might need to pass the &lt;code&gt;token&lt;/code&gt;  &lt;span class="caps"&gt;URL&lt;/span&gt; param when trying to access Capabilities document. Don&amp;#8217;t know why&amp;nbsp;though.&lt;/li&gt;
&lt;li&gt;You should probably take care of calling the &lt;code&gt;retrieveToken()&lt;/code&gt; in shorter interval than the token expiration is set to. Otherwise you might end up with invalid&amp;nbsp;token.&lt;/li&gt;
&lt;li&gt;You need to hide the username and password from anonymous users (I guess that&amp;#8217;s only possible with server side implementation of selective JavaScript&amp;nbsp;loading).&lt;/li&gt;
&lt;/ol&gt;</content><category term="javascript"></category><category term="openlayers"></category><category term="ogc"></category></entry><entry><title>Blogging On Docker: Piecrust To The Rescue</title><link href="https://www.zimmi.cz/posts/2014/blogging-on-docker-piecrust-to-the-rescue/" rel="alternate"></link><published>2014-09-11T20:16:00+02:00</published><updated>2014-09-11T20:16:00+02:00</updated><author><name>Michal Zimmermann</name></author><id>tag:www.zimmi.cz,2014-09-11:/posts/2014/blogging-on-docker-piecrust-to-the-rescue/</id><summary type="html">&lt;p&gt;I love blogging. I hate blogging systems. I hate content management systems. I just want to blog. That&amp;#8217;s what &lt;a href="http://bolt80.com/piecrust/"&gt;PieCrust&lt;/a&gt; is all about - it lets you&amp;nbsp;blog.&lt;/p&gt;
&lt;p&gt;It is powerful static website generator perfect for my needs (and for yours as well?). Blogging with PieCrust is really a piece …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I love blogging. I hate blogging systems. I hate content management systems. I just want to blog. That&amp;#8217;s what &lt;a href="http://bolt80.com/piecrust/"&gt;PieCrust&lt;/a&gt; is all about - it lets you&amp;nbsp;blog.&lt;/p&gt;
&lt;p&gt;It is powerful static website generator perfect for my needs (and for yours as well?). Blogging with PieCrust is really a piece of&amp;nbsp;cake:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;prepare&amp;nbsp;post&lt;/li&gt;
&lt;li&gt;serve&amp;nbsp;site&lt;/li&gt;
&lt;li&gt;bake&amp;nbsp;site&lt;/li&gt;
&lt;li&gt;send it off to the&amp;nbsp;public&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I love having clean &lt;span class="caps"&gt;OS&lt;/span&gt;. That&amp;#8217;s what &lt;a href="http://docker.com"&gt;Docker&lt;/a&gt; is all about - for me. Running PieCrust on Docker is really easy, it does not clutter your &lt;span class="caps"&gt;PC&lt;/span&gt; and it just&amp;nbsp;works.&lt;/p&gt;
&lt;p&gt;If you ever want to use PieCrust on Docker, why don&amp;#8217;t you start with this code?
    &lt;span class="caps"&gt;FROM&lt;/span&gt;&amp;nbsp;centos:centos6&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;RUN&lt;/span&gt; &lt;span class="nt"&gt;rpm&lt;/span&gt; &lt;span class="nt"&gt;-Uvh&lt;/span&gt; &lt;span class="nt"&gt;http&lt;/span&gt;&lt;span class="o"&gt;://&lt;/span&gt;&lt;span class="nt"&gt;mirror&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;webtatic&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;yum&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;el6&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;latest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;rpm&lt;/span&gt;
&lt;span class="nt"&gt;RUN&lt;/span&gt; &lt;span class="nt"&gt;rpm&lt;/span&gt; &lt;span class="nt"&gt;-Uvh&lt;/span&gt; &lt;span class="nt"&gt;http&lt;/span&gt;&lt;span class="o"&gt;://&lt;/span&gt;&lt;span class="nt"&gt;download&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;fedoraproject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;org&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;pub&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;epel&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;6&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;x86_64&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;epel-release-6-8&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;noarch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;rpm&lt;/span&gt;
&lt;span class="nt"&gt;RUN&lt;/span&gt; &lt;span class="nt"&gt;rpm&lt;/span&gt; &lt;span class="nt"&gt;-Uvh&lt;/span&gt; &lt;span class="nt"&gt;http&lt;/span&gt;&lt;span class="o"&gt;://&lt;/span&gt;&lt;span class="nt"&gt;rpms&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;famillecollet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;enterprise&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;remi-release-6&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;rpm&lt;/span&gt;

&lt;span class="nt"&gt;RUN&lt;/span&gt; &lt;span class="nt"&gt;yum&lt;/span&gt; &lt;span class="nt"&gt;--enablerepo&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nt"&gt;remi&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;remi-php55&lt;/span&gt; &lt;span class="nt"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-y&lt;/span&gt; &lt;span class="nt"&gt;php&lt;/span&gt; &lt;span class="nt"&gt;php-mbstring&lt;/span&gt; &lt;span class="nt"&gt;php-opcache&lt;/span&gt; &lt;span class="nt"&gt;php-cli&lt;/span&gt; &lt;span class="nt"&gt;php-pear&lt;/span&gt; &lt;span class="nt"&gt;php-common&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nt"&gt;yum&lt;/span&gt; &lt;span class="nt"&gt;clean&lt;/span&gt; &lt;span class="nt"&gt;all&lt;/span&gt;
&lt;span class="nt"&gt;RUN&lt;/span&gt; &lt;span class="nt"&gt;php&lt;/span&gt; &lt;span class="nt"&gt;-r&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;readfile(&amp;#39;https://getcomposer.org/installer&amp;#39;);&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nt"&gt;php&lt;/span&gt;
&lt;span class="nt"&gt;RUN&lt;/span&gt; &lt;span class="nt"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;date.timezone = Europe/Prague&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;php&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ini&lt;/span&gt;
&lt;span class="nt"&gt;RUN&lt;/span&gt; &lt;span class="nt"&gt;mv&lt;/span&gt; &lt;span class="nt"&gt;composer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;phar&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;composer&lt;/span&gt;
&lt;span class="nt"&gt;RUN&lt;/span&gt; &lt;span class="nt"&gt;php&lt;/span&gt; &lt;span class="nt"&gt;-r&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;eval(&amp;#39;?&amp;gt;&amp;#39;.file_get_contents(&amp;#39;http://backend.bolt80.com/piecrust/install&amp;#39;));&amp;quot;&lt;/span&gt;
&lt;span class="nt"&gt;RUN&lt;/span&gt; &lt;span class="nt"&gt;mv&lt;/span&gt; &lt;span class="nt"&gt;piecrust&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;phar&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;chef&lt;/span&gt;

&lt;span class="nt"&gt;CMD&lt;/span&gt; &lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/bin/bash&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Running &lt;code&gt;sudo docker build --tag=piecrust .&lt;/code&gt; will result in having docker container ready to run. Just run &lt;code&gt;sudo docker run -it -p 8080:8080 -v /host_piecrust_path/:/container_path piecrust /bin/bash&lt;/code&gt; in terminal. While in container terminal, run &lt;code&gt;chef serve -n -p 8080 -a 0.0.0.0&lt;/code&gt; and visit &lt;a href="http://localhost:8080"&gt;http://localhost:8080&lt;/a&gt;. You should see your PieCrust site up and&amp;nbsp;running.&lt;/p&gt;
&lt;p&gt;The last command tells chef to serve your site on port 8080 (which should be free unless you&amp;#8217;re running Tomcat or something like that) and make it listen on every available network interface. If you used 127.0.0.1 instead, you would never reach your site from outside the&amp;nbsp;container.&lt;/p&gt;
&lt;p&gt;See?&amp;nbsp;Easy.&lt;/p&gt;</content><category term="docker"></category><category term="linux"></category></entry><entry><title>WMTS: Few Things I Want To Remember</title><link href="https://www.zimmi.cz/posts/2014/wmts-few-things-i-want-to-remember/" rel="alternate"></link><published>2014-09-10T20:36:00+02:00</published><updated>2014-09-10T20:36:00+02:00</updated><author><name>Michal Zimmermann</name></author><id>tag:www.zimmi.cz,2014-09-10:/posts/2014/wmts-few-things-i-want-to-remember/</id><summary type="html">&lt;ul&gt;
&lt;li&gt;Used to serve prepared rectangular tiles; this means you are limited by web server speed rather than map server&amp;nbsp;speed&lt;/li&gt;
&lt;li&gt;Several ways to retrieve tiles are defined: &lt;span class="caps"&gt;KVP&lt;/span&gt; and &lt;span class="caps"&gt;REST&lt;/span&gt; are mandatory, &lt;span class="caps"&gt;SOAP&lt;/span&gt; is&amp;nbsp;optional&lt;/li&gt;
&lt;li&gt;Does not allow layer combination; additional tile matrix would have to be&amp;nbsp;created&lt;/li&gt;
&lt;li&gt;GetCapabilities, GetTile …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;ul&gt;
&lt;li&gt;Used to serve prepared rectangular tiles; this means you are limited by web server speed rather than map server&amp;nbsp;speed&lt;/li&gt;
&lt;li&gt;Several ways to retrieve tiles are defined: &lt;span class="caps"&gt;KVP&lt;/span&gt; and &lt;span class="caps"&gt;REST&lt;/span&gt; are mandatory, &lt;span class="caps"&gt;SOAP&lt;/span&gt; is&amp;nbsp;optional&lt;/li&gt;
&lt;li&gt;Does not allow layer combination; additional tile matrix would have to be&amp;nbsp;created&lt;/li&gt;
&lt;li&gt;GetCapabilities, GetTile and GetFeatureInfo requests are&amp;nbsp;defined&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;tile&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;rectangular representation of&amp;nbsp;space&lt;/li&gt;
&lt;li&gt;defined by tile and row&amp;nbsp;indices&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;tile&amp;nbsp;matrix&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;set of tiles for a given&amp;nbsp;scale&lt;/li&gt;
&lt;li&gt;&lt;em&gt;defined with:&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;tile size derived from standardized pixel size (0.28 &amp;times; 0.28&amp;nbsp;mm)&lt;/li&gt;
&lt;li&gt;tile width and tile height&amp;nbsp;(px)&lt;/li&gt;
&lt;li&gt;left upper corner&amp;nbsp;coordinates&lt;/li&gt;
&lt;li&gt;matrix width and height as number of&amp;nbsp;tiles&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;tile matrix&amp;nbsp;set&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;set of tile matrices for different&amp;nbsp;scales&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Total count of tile&amp;nbsp;matrices&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;&lt;code&gt;nTileMatrices × nTiledStyles × nTiledFormats (if no dimensions are defined)&lt;/code&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;Total count of tiles in a tile&amp;nbsp;matrix&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;&lt;code&gt;matrixWidth × matrixHeight&lt;/code&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;Other&amp;nbsp;equations&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pixelSpan = scaleDenominator × 0.28 10&lt;sup&gt;3&lt;/sup&gt; / metersPerUnit(crs);&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tileSpanX = tileWidth × pixelSpan;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tileSpanY = tileHeight × pixelSpan;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tileMatrixMaxX = tileMatrixMinX + tileSpanX × matrixWidth;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tileMatrixMinY = tileMatrixMaxY - tileSpanY × matrixHeight;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-echo="/posts/assets/wmts-few-things-i-want-to-remember/wmts.png" title="WMTS tiling schema" class="img-responsive centered"&gt;&lt;/p&gt;</content><category term="ogc"></category><category term="wmts"></category></entry><entry><title>Degrees To Decimal With Javascript</title><link href="https://www.zimmi.cz/posts/2014/degrees-to-decimal-with-javascript/" rel="alternate"></link><published>2014-09-09T20:28:00+02:00</published><updated>2014-09-09T20:28:00+02:00</updated><author><name>Michal Zimmermann</name></author><id>tag:www.zimmi.cz,2014-09-09:/posts/2014/degrees-to-decimal-with-javascript/</id><summary type="html">&lt;p&gt;I have found a nice way to get decimal value from degrees of longitude and latitude&amp;nbsp;recently:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;coords&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;decimal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;output&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
        &lt;span class="nx"&gt;coords&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;coords&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;  &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// it might be &amp;lt;br&amp;gt; as well&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;coords&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;coords&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;j …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;I have found a nice way to get decimal value from degrees of longitude and latitude&amp;nbsp;recently:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;coords&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;decimal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;output&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
        &lt;span class="nx"&gt;coords&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;coords&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;  &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// it might be &amp;lt;br&amp;gt; as well&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;coords&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;coords&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;decimal&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;parseFloat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;decimal&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toFixed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="nx"&gt;decimal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;prompt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Souřadnice bodu&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;, &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;When you call &lt;code&gt;format("DD° MM' SS'  DD° MM' SS'");&lt;/code&gt; you&amp;#8217;ll get decimal value in return (or &lt;code&gt;prompt&lt;/code&gt; to be accurate). What I like the most about this solution is the usage of Math.pow(). I think it is a neat way to transform the values as you need to divide parts of latitude or longitude by 60&lt;sup&gt;0&lt;/sup&gt;, 60&lt;sup&gt;1&lt;/sup&gt; and 60&lt;sup&gt;2&lt;/sup&gt; respectively.&lt;/p&gt;
&lt;p&gt;There is definitely a googol of different solutions to this task, I just liked the simplicity of this&amp;nbsp;one.&lt;/p&gt;</content><category term="javascript"></category></entry><entry><title>Geoserver Printing With Mapfish</title><link href="https://www.zimmi.cz/posts/2014/geoserver-printing-with-mapfish/" rel="alternate"></link><published>2014-09-02T17:41:00+02:00</published><updated>2014-09-02T17:41:00+02:00</updated><author><name>Michal Zimmermann</name></author><id>tag:www.zimmi.cz,2014-09-02:/posts/2014/geoserver-printing-with-mapfish/</id><summary type="html">&lt;p&gt;Printing a web map requires a lot more than doing &lt;code&gt;Ctrl + P&lt;/code&gt;. &lt;a href="http://mapfish.org/"&gt;MapFish&lt;/a&gt; seems to be the best option to use with Geoserver, and it comes &lt;a href="http://docs.geoserver.org/stable/en/user/community/printing/"&gt;ready as an extension&lt;/a&gt;. If you installed the module properly, you should be seeing general info at &lt;a href="http://localhost:8080/geoserver/pdf/info.json"&gt;http://localhost:8080/geoserver/pdf/info.json …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Printing a web map requires a lot more than doing &lt;code&gt;Ctrl + P&lt;/code&gt;. &lt;a href="http://mapfish.org/"&gt;MapFish&lt;/a&gt; seems to be the best option to use with Geoserver, and it comes &lt;a href="http://docs.geoserver.org/stable/en/user/community/printing/"&gt;ready as an extension&lt;/a&gt;. If you installed the module properly, you should be seeing general info at &lt;a href="http://localhost:8080/geoserver/pdf/info.json"&gt;http://localhost:8080/geoserver/pdf/info.json&lt;/a&gt;. You&amp;#8217;ll find a &lt;code&gt;config.yaml&lt;/code&gt; in &lt;code&gt;data_dir/printing&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;MapFish lets you access three different&amp;nbsp;points:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;info.json&lt;/code&gt; that returns current config as defined in config.yaml&amp;nbsp;file&lt;/li&gt;
&lt;li&gt;&lt;code&gt;print.pdf&lt;/code&gt; that actually prints the map as defined in the &lt;code&gt;spec&lt;/code&gt; &lt;span class="caps"&gt;GET&lt;/span&gt;&amp;nbsp;argument&lt;/li&gt;
&lt;li&gt;&lt;code&gt;create.json&lt;/code&gt; that returns a &lt;span class="caps"&gt;JSON&lt;/span&gt; object with an &lt;span class="caps"&gt;URL&lt;/span&gt; of the printed&amp;nbsp;map&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Remember, if you&amp;#8217;re displaying a lot of layers in the map and all of them should be printed, you need to pass it as a &lt;span class="caps"&gt;POST&lt;/span&gt; argument when calling &lt;code&gt;print.pdf&lt;/code&gt; or &lt;code&gt;create.json&lt;/code&gt;, otherwise you&amp;#8217;ll be getting an error complaining about the &lt;span class="caps"&gt;GET&lt;/span&gt; request&amp;nbsp;length.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;config.yaml&lt;/code&gt; file is where you define settings for the print module. You definitely want to define &lt;code&gt;dpis&lt;/code&gt; (we&amp;#8217;re using 90, 200 and 300 &lt;span class="caps"&gt;DPI&lt;/span&gt;), &lt;code&gt;scales&lt;/code&gt; (they probably need to be hardcoded, I didn&amp;#8217;t succeed trying any arbitrary scale) and &lt;code&gt;layouts&lt;/code&gt; (we&amp;#8217;re using A4 to A0 both portrait and&amp;nbsp;landscape).&lt;/p&gt;

&lt;p&gt;However, defining the page size might get tricky as MapFish does not use standardized sizes defined in cm, in or any other unit. I&amp;#8217;ve experimenting and doing some maths and here&amp;#8217;s what I came up with for portrait&amp;nbsp;layouts.&lt;/p&gt;

&lt;table class="table-centered"&gt;
    &lt;tr&gt;
        &lt;th&gt;A0&lt;/th&gt;
        &lt;th&gt;A1&lt;/th&gt;
        &lt;th&gt;A2&lt;/th&gt;
        &lt;th&gt;A3&lt;/th&gt;
        &lt;th&gt;A4&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;2382&amp;times;3361&lt;/td&gt;
        &lt;td&gt;1683&amp;times;2380&lt;/td&gt;
        &lt;td&gt;1190&amp;times;1680&lt;/td&gt;
        &lt;td&gt;840&amp;times;1180&lt;/td&gt;
        &lt;td&gt;595&amp;times;832&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;&lt;em&gt;The bigger paper you use, the smaller &lt;span class="caps"&gt;DPI&lt;/span&gt; is available&lt;/em&gt;, that&amp;#8217;s what I found out messing around with MapFish settings. This means that we&amp;#8217;re using 200 &lt;span class="caps"&gt;DPI&lt;/span&gt; top for A2 layout and 90 &lt;span class="caps"&gt;DPI&lt;/span&gt; for A1 and A0 layout,&amp;nbsp;respectively.&lt;/p&gt;

&lt;p&gt;JQuery takes care of sending &lt;span class="caps"&gt;POST&lt;/span&gt; request and fetching the response. &lt;a href="http://www.edpp.cz/poli_mapa-povodnoveho-planu-mesta/"&gt;See it in action&lt;/a&gt; (Choose &lt;em&gt;Nástroje&lt;/em&gt; and &lt;em&gt;Tisknout&lt;/em&gt; for&amp;nbsp;printing).&lt;/p&gt;</content><category term="geoserver"></category></entry><entry><title>Analyzing Twitter Languages With Streaming API</title><link href="https://www.zimmi.cz/posts/2014/analyzing-twitter-languages-with-streaming-api/" rel="alternate"></link><published>2014-09-02T17:37:00+02:00</published><updated>2014-09-02T17:37:00+02:00</updated><author><name>Michal Zimmermann</name></author><id>tag:www.zimmi.cz,2014-09-02:/posts/2014/analyzing-twitter-languages-with-streaming-api/</id><summary type="html">&lt;p&gt;I am writing a diploma thesis focused on extracting spatial data from social networks. I have been working mainly with Twitter &lt;span class="caps"&gt;API&lt;/span&gt; and results I have got so far look really promising. This post was written as a reaction to many retweets I got when I shared one of my …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I am writing a diploma thesis focused on extracting spatial data from social networks. I have been working mainly with Twitter &lt;span class="caps"&gt;API&lt;/span&gt; and results I have got so far look really promising. This post was written as a reaction to many retweets I got when I shared one of my visualizations. It aims to make it clear how to connect to Twitter Streaming &lt;span class="caps"&gt;API&lt;/span&gt; using &lt;a href="http://nodejs.org/"&gt;node.js&lt;/a&gt;, &lt;a href="http://leafletjs.com/"&gt;Leaflet&lt;/a&gt; and &lt;a href="http://sqlite.org/"&gt;SQLite&lt;/a&gt; and retrieve tweets to analyze them&amp;nbsp;later.&lt;/p&gt;

&lt;p&gt;If you have any further questions after reading this paper, feel free to contact me via &lt;a href="https://twitter.com/zimmicz"&gt;Twitter&lt;/a&gt; or &lt;a href="mailto:zimmicz@gmail.com"&gt;e-mail&lt;/a&gt;. I must say right here &lt;strong&gt;that the code will be shared as well as the map&lt;/strong&gt;, but there are still some bugs/features I would like to&amp;nbsp;remove/add.&lt;/p&gt;

&lt;p&gt;&lt;small&gt;On a side note: I have been studying cartography and &lt;span class="caps"&gt;GIS&lt;/span&gt; for the last five years at Masaryk University in Brno, Czech Republic. I am mostly interested in ways computers can make data handling easier. I&amp;nbsp;like to code in Python.&lt;/small&gt;&lt;/p&gt;

&lt;h3&gt;Using Twitter Streaming &lt;span class="caps"&gt;API&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;As you probably know, Twitter offers three different&amp;nbsp;APIs:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span class="caps"&gt;REST&lt;/span&gt; &lt;span class="caps"&gt;API&lt;/span&gt; which is obviously RESTful. You can access almost every piece of information on Twitter with this one: tweets, users, places, retweets,&amp;nbsp;followers&amp;#8230;&lt;/li&gt;
&lt;li&gt;Search &lt;span class="caps"&gt;API&lt;/span&gt; used for getting search results. You can customize these by sending parameters with your&amp;nbsp;requests.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Streaming &lt;span class="caps"&gt;API&lt;/span&gt;&lt;/strong&gt; which I am going to tell you about. It is really different, as (again, obviously) it keeps streaming tweets from the time you connect to the server. This means, once the connection is made, it has to stay open as long as you want tweets coming to you. The important thing here is that you get real time tweets delivered to you via this &lt;abbr title="Twitter only delivers a sample of tweets, not the whole traffic."&gt;stream&lt;/abbr&gt;, which implies you cannot use this &lt;span class="caps"&gt;API&lt;/span&gt; to get tweets already&amp;nbsp;tweeted.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;To sum it up: You get a small sample of tweets in a real time as long as the connection to the server stays&amp;nbsp;open.&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;What you&amp;nbsp;need&lt;/h3&gt;

&lt;p&gt;To use any of the Twitter APIs, you need to authenticate you (or your app) against Twitter via OAuth protocol. To be able to do so, you need a Twitter account, because only then you can &lt;a href="https://dev.twitter.com/"&gt;create apps&lt;/a&gt;, obtain access tokens and get authenticated for &lt;span class="caps"&gt;API&lt;/span&gt;&amp;nbsp;use.&lt;/p&gt;

&lt;p&gt;And then, obviously, you need something to connect to server with. I chose &lt;strong&gt;node.js&lt;/strong&gt; because it seemed as a good tool to keep connection alive. I have also been interested in this technology for the couple of months but never really had a task to use it&amp;nbsp;for.&lt;/p&gt;

&lt;p&gt;The good thing about node.js is that it comes with lots of handy libraries. You get &lt;strong&gt;socket.io&lt;/strong&gt; for streaming, &lt;strong&gt;ntwitter&lt;/strong&gt; for using Twitter &lt;span class="caps"&gt;API&lt;/span&gt; and &lt;strong&gt;sqlite3&lt;/strong&gt; for working with SQLite&amp;nbsp;databases.&lt;/p&gt;

&lt;p&gt;You need something to store the data in also. As mentioned, I picked SQLite for this task. It is lightweight, does not need server nor configuration to run, just what I was looking for. Seems we are set to go,&amp;nbsp;right?&lt;/p&gt;

&lt;h3&gt;Filtering the&amp;nbsp;data&lt;/h3&gt;

&lt;p&gt;I guess none of you is interested in obtaining random tweets from around the world, neither was I. I live in the Czech republic and that is the area I want to get tweets from.&amp;nbsp;How?&lt;/p&gt;

&lt;p&gt;It is fairly simple, you tell Twitter with the &lt;code&gt;locations&lt;/code&gt; parameter of &lt;a href="https://dev.twitter.com/docs/api/1.1/post/statuses/filter"&gt;&lt;code&gt;statuses/filter&lt;/code&gt;&lt;/a&gt; resource. This parameter specifies a set of bounding boxes to&amp;nbsp;track.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;To sum it up: you connect to the server and tell it you just want to get tweets from the area you specified with the &lt;code&gt;locations&lt;/code&gt; parameter. The server understands and keeps you&amp;nbsp;posted.&lt;/strong&gt;&lt;/p&gt;

&lt;h4&gt;Is it that&amp;nbsp;simple?&lt;/h4&gt;

&lt;p&gt;No. Twitter decides whether to post you the tweet or not according to what the value of coordinates field is. It goes like&amp;nbsp;this:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;If the &lt;code&gt;coordinates&lt;/code&gt; field is not empty, it gets tested against the bounding box. If it matches, it is sent to the&amp;nbsp;stream.&lt;/li&gt;
&lt;li&gt;If the &lt;code&gt;coordinates&lt;/code&gt; field is empty, but the &lt;code&gt;place&lt;/code&gt; field is not, it is the &lt;code&gt;place&lt;/code&gt; field that gets checked. If if it by any extent intersects the bounding box, it is sent to the&amp;nbsp;stream.&lt;/li&gt;
&lt;li&gt;If both of the fields are empty, nothing is&amp;nbsp;sent.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I decided to throw away the tweets with the empty &lt;code&gt;coordinates&lt;/code&gt; field, because the accuracy of the value specified in the place field can be generally considered very low and insufficient for my purposes. You still need to account for position inaccuracies of users&amp;#8217; devices though, however that is not something that we can deal with. &lt;em&gt;Let us just assume that geotagged tweets are&amp;nbsp;accurate.&lt;/em&gt;&lt;/p&gt;

&lt;div class="text-center"&gt;&lt;img data-echo="/posts/assets/analyzing-twitter-languages-with-streaming-api/cr.png" width="50%" height="50%" title="Geotagged tweets" class="img-rounded"&gt;&lt;p&gt;&lt;strong&gt;Figure:&lt;/strong&gt; Twitter seems not to be very accurate when matching tweets against bounding&amp;nbsp;box.&lt;/p&gt;&lt;/div&gt;

&lt;p&gt;Although, as you can see in the picture, they are not. Or they are, but Twitter is not good at telling so. Besides that, none of the countries in the world is shaped like a rectangle and we would need to clip the data anyway. That is where SQLite comes in, because I have been saving incoming tweets right into the&amp;nbsp;database.&lt;/p&gt;

&lt;p&gt;If you use any &lt;span class="caps"&gt;GUI&lt;/span&gt; manager (sqlitebrowser for Linux is just fine), you can easily export your data to the &lt;span class="caps"&gt;CSV&lt;/span&gt; file, load it into &lt;span class="caps"&gt;QGIS&lt;/span&gt;, clip it with Natural Earth countries shapefile and save them to the GeoJSON file. It is just a matter of few JavaScript lines of code to put GeoJSON on a Leaflet&amp;nbsp;map.&lt;/p&gt;

&lt;h3&gt;Displaying the&amp;nbsp;data&lt;/h3&gt;

&lt;p&gt;Once a GeoJSON file is ready, it can be used for making an appealing viz to get a sense of what may be called &amp;#8220;nationalities spatial patterns&amp;#8221;. The &lt;code&gt;lang&lt;/code&gt; field (stored in the database, remember?) of every tweet is used to colour the marker accordingly. Its value represents a two-letter language code as specified in &lt;span class="caps"&gt;ISO&lt;/span&gt; 639-1&amp;nbsp;document.&lt;/p&gt;

&lt;p&gt;However, as those codes are guessed by Twitter&amp;#8217;s language algorithms, they are prone to error. There are actually three scenarios we might be&amp;nbsp;facing:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;User tweets in the same language as used in the Twitter&amp;nbsp;account.&lt;/li&gt;
&lt;li&gt;User tweets in his/her mother language, but has set different Twitter account&amp;nbsp;language.&lt;/li&gt;
&lt;li&gt;User does not tweet in his/her mother language, but has it set as a Twitter account&amp;nbsp;language.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We basically have to deal with 2) and 3), because 1) means we can be pretty sure what nationality the user is. Sadly though, I have not found an easy way to tell which one of these two we came across, thus which language settings should be prioritized. I made an arbitrary decision to prioritize the language the tweet was written in, based on assumption that &lt;strong&gt;the most of the users tweet in their mother language&lt;/strong&gt;. No matter what you do, the data is still going to be biased by automatically generated tweets, especially ones sent by Foursquare saying &amp;#8220;I&amp;#8217;m at @WhateverBarItIs (http://someurl.co)&amp;#8221;. It works fine for the strange languages like Russian and Arabic&amp;nbsp;though.&lt;/p&gt;

&lt;p&gt;From Jan 2 to Jan 4 this year 5,090 tweets were collected. Leaflet is becoming a little sluggish without clustering turned on displaying all of them. Plans are to let the collection run until Jan 7 and then put all the tweets on the map. I guess that might be around 10,000 geotagged tweets by that&amp;nbsp;time.&lt;/p&gt;

&lt;p&gt;I am definitely willing to share the &lt;abbr title="Do not expect much, it was my first time with node.js"&gt;code&lt;/abbr&gt; and the final viz. Meanwhile, you can have a look at the screenshot on picture [*]. I have already implemented nationality switch (legend items are clickable) and I would like to add a day/night switch to see whether there are any differences between the peoples&amp;#8217;&amp;nbsp;behaviour. &lt;/p&gt;

&lt;div class="text-center"&gt;&lt;img width="60%" height="60%" data-echo="/posts/assets/analyzing-twitter-languages-with-streaming-api/screenshot.png" title="Final geoviz using Leaflet" class="img-rounded"&gt;&lt;p&gt;&lt;strong&gt;Figure:&lt;/strong&gt; Final map screenshot. A legend is used to turn nationalities on and off. You are looking at Prague by the&amp;nbsp;way.&lt;/p&gt;&lt;/div&gt;

&lt;p&gt;Obviously the most tweets were sent from the most populated places, e.g. Prague, Brno,&amp;nbsp;Ostrava. &lt;/p&gt;</content><category term="javascript"></category><category term="leaflet"></category><category term="twitter"></category></entry><entry><title>Going 3D With Space Time Cube</title><link href="https://www.zimmi.cz/posts/2014/going-3d-with-space-time-cube/" rel="alternate"></link><published>2014-09-02T17:35:00+02:00</published><updated>2014-09-02T17:35:00+02:00</updated><author><name>Michal Zimmermann</name></author><id>tag:www.zimmi.cz,2014-09-02:/posts/2014/going-3d-with-space-time-cube/</id><summary type="html">&lt;p&gt;Seeing &lt;a href="http://anitagraser.com/2012/08/05/space-time-cubes-exploring-twitter-streams-3/"&gt;Anita&amp;#8217;s space-time cube&lt;/a&gt; back in 2013 was a moment of &lt;em&gt;woooow&lt;/em&gt; for me. I&amp;#8217;ve been interested in unusual ways of displaying data ever since I started studying &lt;span class="caps"&gt;GIS&lt;/span&gt; and this one was just great. &lt;em&gt;How the hell did she make it?!&lt;/em&gt;, I thought back&amp;nbsp;then.&lt;/p&gt;

&lt;p&gt;And I …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Seeing &lt;a href="http://anitagraser.com/2012/08/05/space-time-cubes-exploring-twitter-streams-3/"&gt;Anita&amp;#8217;s space-time cube&lt;/a&gt; back in 2013 was a moment of &lt;em&gt;woooow&lt;/em&gt; for me. I&amp;#8217;ve been interested in unusual ways of displaying data ever since I started studying &lt;span class="caps"&gt;GIS&lt;/span&gt; and this one was just great. &lt;em&gt;How the hell did she make it?!&lt;/em&gt;, I thought back&amp;nbsp;then.&lt;/p&gt;

&lt;p&gt;And I asked her, we had a little e-mail conversation and that was it. I got busy and had to postpone my attemps to create that viz until I dove into my diploma thesis. So&amp;hellip;here you&amp;nbsp;go.&lt;/p&gt;

&lt;h3&gt;Recipe&lt;/h3&gt;

&lt;p&gt;What you need&amp;nbsp;is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/jdf/processing.py"&gt;processing.py&lt;/a&gt;&lt;/strong&gt; which is a Python port of &lt;a href="http://processing.org/"&gt;processing&lt;/a&gt;&amp;nbsp;environment.&lt;/li&gt;
&lt;li&gt;A &lt;strong&gt;basemap&lt;/strong&gt; that fits the extent you are about to show in the viz. I recommend &lt;span class="caps"&gt;QGIS&lt;/span&gt; for obtaining an&amp;nbsp;image.&lt;/li&gt;
&lt;li&gt;A &lt;strong&gt;&lt;span class="caps"&gt;JSON&lt;/span&gt; file&lt;/strong&gt; with tweets you got via &lt;a href="/2014/analyzing-twitter-languages-with-streaming-api/"&gt;Twitter &lt;span class="caps"&gt;REST&lt;/span&gt; &lt;span class="caps"&gt;API&lt;/span&gt;&lt;/a&gt; (yes, the viz was made to display&amp;nbsp;tweets).&lt;/li&gt;
&lt;li&gt;A &lt;strong&gt;python script&lt;/strong&gt; I&amp;nbsp;wrote.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;How to make it&amp;nbsp;delicious&lt;/h3&gt;

&lt;p&gt;First things first, you need to add a &lt;code&gt;timestamp&lt;/code&gt; property to tweets you want to show (with the following Python code). &lt;code&gt;created_at&lt;/code&gt; param is a datetime string like &lt;code&gt;Sat Jun 22 21:30:42 +0000 2013&lt;/code&gt; of every tweet in a loop. As a result you get a number of seconds since&amp;nbsp;1.1.1970. &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def string_to_timestamp(created_at):
    """Return the timestamp from created_at object."""
    locale.setlocale(locale.LC_TIME, 'en_US.utf8')
    created_at = created_at.split(' ')
    created_at[1] = str(strptime(created_at[1], '%b').tm_mon)
    timestamp = strptime(' '.join(created_at[i] for i in [1,2,3,5]), '%m %d %H:%M:%S %Y') # returns Month Day Time Year
    return mktime(timestamp)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you probably guess, the &lt;code&gt;timestamp&lt;/code&gt; property is the one we&amp;#8217;re gonna display on the vertical axis. &lt;strong&gt;You definitely want the tweets to be sorted chronologically in your &lt;span class="caps"&gt;JSON&lt;/span&gt;&amp;nbsp;file!&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/usr/bin/python
# -*- coding: utf-8 -*-
#avconv -i frame-%04d.png -r 25 -b 65536k  video.mp4

from peasy import PeasyCam
import json

basemap = None
tweets = []
angle = 0

def setup():
    global basemap
    global tweets

    size(1010, 605, P3D)

    data = loadJSONArray('./tweets.json')
    count = data.size()

    last = data.getJSONObject(data.size()-1).getFloat('timestamp')
    first = data.getJSONObject(0).getFloat('timestamp')

    for i in range(0, count):
        lon = data.getJSONObject(i).getJSONObject('coordinates').getJSONArray('coordinates').getFloat(0)
        lat = data.getJSONObject(i).getJSONObject('coordinates').getJSONArray('coordinates').getFloat(1)
        time = data.getJSONObject(i).getFloat('timestamp')

        x = map(lon, -19.68624620368202116, 58.92453879754536672, 0, width)
        y = map(time, first, last, 0, 500)
        z = map(lat, 16.59971950210866964, 63.68835804244784526, 0, height)

        tweets.append({'x': x, 'y': y, 'z': z})

    basemap = loadImage('basemap.png')

    cam = PeasyCam(this,53,100,-25,700)
    cam.setMinimumDistance(1)
    cam.setMaximumDistance(1500)

def draw():
    global basemap
    global tweets
    global angle

    background(0)

    # Uncomment to rotate the cube
    """if angle &amp;lt; 360:
        rotateY(radians(angle))
        angle += 1
    else:
        angle = 360 - angle"""

    # box definition
    stroke(150,150,150)
    strokeWeight(.5)
    noFill()
    box(1010,500,605)


    # basemap definition
    translate(-505,250,-302.5)
    rotateX(HALF_PI)
    image(basemap,0,0)

    for i in range(0, len(tweets)):
        strokeWeight(.5)
        stroke(255,255,255)
        line(tweets[i].get('x'), height-tweets[i].get('z'), tweets[i].get('y'), tweets[i].get('x'), height-tweets[i].get('z'), 0)

        strokeWeight(5)
        stroke(255,0,0)
        point(tweets[i].get('x'), height-tweets[i].get('z'), tweets[i].get('y'))

        strokeWeight(2)
        stroke(255,255,255)
        point(tweets[i].get('x'), height-tweets[i].get('z'), 0)
        lrp = map(i, 0, len(tweets), 0, 1)
        frm = color(255,0,0)
        to = color(0,0,255)
        if i &amp;lt; len(tweets)-1:
            strokeWeight(1)
            stroke(lerpColor(frm,to,lrp))
            line(tweets[i].get('x'), height-tweets[i].get('z'), tweets[i].get('y'), tweets[i+1].get('x'), height-tweets[i+1].get('z'), tweets[i+1].get('y'))

    # Uncomment to capture the screens
    """if frameCount &amp;gt; 360:
        noLoop()
    else:
        saveFrame('screens/frame-####.png')"""
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You should be most interested in these&amp;nbsp;lines:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;x = map(lon, -19.68624620368202116, 58.92453879754536672, 0, width)
y = map(time, first, last, 0, 500)
z = map(lat, 16.59971950210866964, 63.68835804244784526, 0, height)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img data-echo="http://www.processing.org/tutorials/p3d/imgs/coordinatesystem.png" title="Processing coordinate system" class="img-rounded pull-left"&gt;They define how coordinates inside the cube should be computed. As you see, &lt;code&gt;x&lt;/code&gt; is the result of mapping longitudinal extent of our area to the width of cube, the same happens to &lt;code&gt;z&lt;/code&gt; and latitude, and to &lt;code&gt;y&lt;/code&gt; (but here we map time, not&amp;nbsp;coordinates).&lt;/p&gt;

&lt;p&gt;The bounding box used in those computations is the bounding box of the basemap. Interesting thing about Processing and its 3D environment is how it defines the beginning of the coordinate system. As you can see on the left, it might be slighty different from what you could expect. That&amp;#8217;s what you need to be careful&amp;nbsp;about.&lt;/p&gt;

&lt;h3&gt;How does it&amp;nbsp;look&lt;/h3&gt;

&lt;iframe width="420" height="315" src="//www.youtube.com/embed/4jl6-qOiSAE?rel=0" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</content><category term="python"></category><category term="twitter"></category></entry><entry><title>Leaflet Coordinates Control</title><link href="https://www.zimmi.cz/posts/2014/leaflet-coordinates-control/" rel="alternate"></link><published>2014-09-02T17:33:00+02:00</published><updated>2014-09-02T17:33:00+02:00</updated><author><name>Michal Zimmermann</name></author><id>tag:www.zimmi.cz,2014-09-02:/posts/2014/leaflet-coordinates-control/</id><summary type="html">&lt;p&gt;I&amp;#8217;ve made a &lt;a href="https://github.com/zimmicz/Leaflet-Coordinates-Control"&gt;simple Leaflet control&lt;/a&gt; that displays coordinates when user clicks the map. It is possible to copy them out by clicking the&amp;nbsp;control.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://zimmicz.github.io/Leaflet-Coordinates-Control/"&gt;See GitHub for&amp;nbsp;demo.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can find it in a &lt;a href="http://leafletjs.com/plugins"&gt;list of Leaflet plugins&lt;/a&gt; as well (Controls and Interaction section). My first contribution to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I&amp;#8217;ve made a &lt;a href="https://github.com/zimmicz/Leaflet-Coordinates-Control"&gt;simple Leaflet control&lt;/a&gt; that displays coordinates when user clicks the map. It is possible to copy them out by clicking the&amp;nbsp;control.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://zimmicz.github.io/Leaflet-Coordinates-Control/"&gt;See GitHub for&amp;nbsp;demo.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can find it in a &lt;a href="http://leafletjs.com/plugins"&gt;list of Leaflet plugins&lt;/a&gt; as well (Controls and Interaction section). My first contribution to the open source world&amp;nbsp;ever.&lt;/p&gt;</content><category term="leaflet"></category><category term="javascript"></category></entry><entry><title>Leaflet CHMI Radar Control</title><link href="https://www.zimmi.cz/posts/2014/leaflet-chmi-radar-control/" rel="alternate"></link><published>2014-09-01T18:09:00+02:00</published><updated>2014-09-01T18:09:00+02:00</updated><author><name>Michal Zimmermann</name></author><id>tag:www.zimmi.cz,2014-09-01:/posts/2014/leaflet-chmi-radar-control/</id><summary type="html">&lt;p&gt;I&amp;#8217;ve been in love with Leaflet ever since v0.4 was released. Well-documented, clean &lt;span class="caps"&gt;API&lt;/span&gt; included, beautiful controls and tons of plugins makes it my number one choice to create a web map. I wrote a Google Maps &lt;span class="caps"&gt;API&lt;/span&gt; app used at edpp.cz a year and a half …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I&amp;#8217;ve been in love with Leaflet ever since v0.4 was released. Well-documented, clean &lt;span class="caps"&gt;API&lt;/span&gt; included, beautiful controls and tons of plugins makes it my number one choice to create a web map. I wrote a Google Maps &lt;span class="caps"&gt;API&lt;/span&gt; app used at edpp.cz a year and a half ago and I&amp;#8217;ve been thinking of refactoring it since then. I don&amp;#8217;t think I even knew Leaflet existed back in those&amp;nbsp;days.&lt;/p&gt;
&lt;p&gt;I used to use Google Maps as my primary tool for web maps, it used to be the only choice back then. OpenLayers &lt;span class="caps"&gt;API&lt;/span&gt; documentation was one of the worst docs I have ever read (&lt;em&gt;alphabetic sorting, please!&lt;/em&gt;), thus making it a no-go for me. It looked ugly and was sort of overwhelmed with functions. Leaflet came out completely different and I decided to rewrite our main map app using this great open-source&amp;nbsp;library.&lt;/p&gt;

&lt;h3&gt;My first&amp;nbsp;control&lt;/h3&gt;

&lt;p&gt;&lt;img data-echo="/posts/assets/leaflet-chmi-radar-control/google_maps.png" title="Google maps layer control" class="left"&gt;Modularity is one of the things I like the most about Leaflet. I was struggling with creating checkboxes used to toggle layers in Google Maps app, it comes ready with Leaflet. Adding a control to the map is easy as piece of cake, you do &lt;a href="http://leafletjs.com/reference.html#icontrol"&gt;&lt;code&gt;L.Control.extend({)}&lt;/code&gt;&lt;/a&gt; and that&amp;#8217;s it (almost). Since the map displays animated radar images showing the precipitation that occurred during last three hours or so I thought it would be great implementing this as a control: a button used to toggle the animation on/off and displaying the time currently shown image was created&amp;nbsp;at.&lt;/p&gt;

&lt;p&gt;The image on the left side displays the old solution using Google Maps. It was using a lot of &lt;span class="caps"&gt;DOM&lt;/span&gt; manipulation, was quite hard to maintain and definitely not eye-candy. When the animation was turned on, another control popped up in the map&amp;#8217;s top left corner displaying the time the image was taken at. The animation toggle (&lt;em&gt;srážkový radar&lt;/em&gt;) was incorporated into the layer control. I decided to take it out and make it a separate feature of the&amp;nbsp;map.&lt;/p&gt;

&lt;p&gt;&lt;img data-echo="/posts/assets/leaflet-chmi-radar-control/control.png" title="Leaflet radar control" class="right"&gt;You can see the result in the image below. The control is a simple button with the radar icon displaying the time when active. It is only useful for the Czech Republic and is highly dependent on the image provider (&lt;abbr title="Czech Hydrometeorogical Institute"&gt;&lt;span class="caps"&gt;CHMI&lt;/span&gt;&lt;/abbr&gt;), which means that if the &lt;span class="caps"&gt;URL&lt;/span&gt; of the images was to be changed, the whole control would&amp;nbsp;break.&lt;/p&gt;

&lt;p&gt;You can&lt;a href="https://www.zimmi.cz/posts/assets/leaflet-chmi-radar-control/radarcontrol.zip"&gt; grab the code if you like&lt;/a&gt;. You add the control to the map as any other&amp;nbsp;control:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;radar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;L&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Control&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Radar&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;radar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can set the control visibility with &lt;code&gt;visible&lt;/code&gt; property passed into &lt;code&gt;options&lt;/code&gt; of the&amp;nbsp;control.&lt;/p&gt;</content><category term="leaflet"></category><category term="javascript"></category></entry></feed>