<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>Michal Zimmermann</title><link>https://www.zimmi.cz/posts/</link><description>Pieces of knowledge from the world of GIS.</description><lastBuildDate>Thu, 23 Nov 2017 19:00:00 +0100</lastBuildDate><item><title>QGIS Plugin Development: AttributeTransfer Plugin</title><link>https://www.zimmi.cz/posts/2017/qgis-plugin-development-attributetransfer-plugin/</link><description>&lt;p&gt;This part finally brings &lt;a href="https://github.com/zimmicz/qgis-attribute-transfer-plugin"&gt;the whole source code of the &lt;span class="caps"&gt;QGIS&lt;/span&gt; AttributeTransfer plugin&lt;/a&gt;.&lt;/p&gt;
&lt;div class="text-center"&gt;&lt;img data-echo="/posts/assets/qgis-plugin-development-attribute-transfer-plugin/qgis.gif"/&gt;&lt;/div&gt;

&lt;p&gt;The plugin itself resides in the &lt;a href="https://github.com/zimmicz/qgis-attribute-transfer-plugin/blob/master/attribute_transfer.py"&gt;&lt;code&gt;attribute_transfer.py&lt;/code&gt;&lt;/a&gt; file. When &lt;code&gt;run()&lt;/code&gt; method is invoked, the &lt;span class="caps"&gt;QT&lt;/span&gt; form pops up with combos prefilled with available vector layers that support attribute&amp;nbsp;editing.&lt;/p&gt;
&lt;p&gt;Source and target layer combos are mutually …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michal Zimmermann</dc:creator><pubDate>Thu, 23 Nov 2017 19:00:00 +0100</pubDate><guid isPermaLink="false">tag:www.zimmi.cz,2017-11-23:/posts/2017/qgis-plugin-development-attributetransfer-plugin/</guid><category>python</category><category>QGIS</category></item><item><title>QGIS Plugin Development: Creating GUI with Qt Designer</title><link>https://www.zimmi.cz/posts/2017/qgis-plugin-development-creating-gui-with-qt-designer/</link><description>&lt;p&gt;After fiddling with &lt;a href="https://www.zimmi.cz/posts/2017/qgis-plugin-development-using-python-console/"&gt;&lt;span class="caps"&gt;QGIS&lt;/span&gt; Python console&lt;/a&gt; and implementing &lt;a href="https://www.zimmi.cz/posts/2017/qgis-plugin-development-finding-nearest-neighbors/"&gt;nearest neighbor analysis&lt;/a&gt;, I&amp;#8217;m going to create a very simple &lt;span class="caps"&gt;GUI&lt;/span&gt; for the plugin at&amp;nbsp;last.&lt;/p&gt;
&lt;p&gt;While &lt;span class="caps"&gt;QGIS&lt;/span&gt; &lt;span class="caps"&gt;API&lt;/span&gt; docs took me few hours to grasp, the PyQGIS ecosystem knocked my socks off. Here comes the list of tools you should …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michal Zimmermann</dc:creator><pubDate>Thu, 16 Nov 2017 15:00:00 +0100</pubDate><guid isPermaLink="false">tag:www.zimmi.cz,2017-11-16:/posts/2017/qgis-plugin-development-creating-gui-with-qt-designer/</guid><category>python</category><category>QGIS</category></item><item><title>QGIS Plugin Development: Finding Nearest Neighbors</title><link>https://www.zimmi.cz/posts/2017/qgis-plugin-development-finding-nearest-neighbors/</link><description>&lt;p&gt;I described basics of vector layers manipulation in &lt;a href="https://www.zimmi.cz/posts/2017/qgis-plugin-development-using-python-console/"&gt;the previous part&lt;/a&gt; of the series. With my goal in mind (fully functional custom plugin capable of writing an attribute value from a source layer to a target layer based on a feature distance), I&amp;#8217;d like to discuss &lt;strong&gt;spatial indexing&lt;/strong&gt; and …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michal Zimmermann</dc:creator><pubDate>Thu, 09 Nov 2017 15:00:00 +0100</pubDate><guid isPermaLink="false">tag:www.zimmi.cz,2017-11-09:/posts/2017/qgis-plugin-development-finding-nearest-neighbors/</guid><category>python</category><category>QGIS</category></item><item><title>QGIS Plugin Development: Using Python Console</title><link>https://www.zimmi.cz/posts/2017/qgis-plugin-development-using-python-console/</link><description>&lt;p&gt;As mentioned in &lt;a href="https://www.zimmi.cz/posts/2017/qgis-plugin-development-getting-started/"&gt;previous part&lt;/a&gt; of the series, the &lt;span class="caps"&gt;QGIS&lt;/span&gt; Python console is an entry point to &lt;span class="caps"&gt;GIS&lt;/span&gt; workflow automation within &lt;span class="caps"&gt;QGIS&lt;/span&gt;. Remember there&amp;#8217;s an &lt;code&gt;iface&lt;/code&gt; object representing &lt;code&gt;qgis.gui.QgisInterface&lt;/code&gt; instance within the console that gives you access to the whole &lt;span class="caps"&gt;QGIS&lt;/span&gt; &lt;span class="caps"&gt;GUI&lt;/span&gt;. Let&amp;#8217;s see what we …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michal Zimmermann</dc:creator><pubDate>Thu, 02 Nov 2017 15:00:00 +0100</pubDate><guid isPermaLink="false">tag:www.zimmi.cz,2017-11-02:/posts/2017/qgis-plugin-development-using-python-console/</guid><category>python</category><category>QGIS</category></item><item><title>QGIS Plugin Development: Getting Started</title><link>https://www.zimmi.cz/posts/2017/qgis-plugin-development-getting-started/</link><description>&lt;p&gt;&lt;span class="caps"&gt;QGIS&lt;/span&gt; 2.1x is a brilliant tool for Python-based automation in form of custom scripts or even plugins. The first steps towards writing the custom code might be a bit difficult, as you need to grasp quite complex Python &lt;span class="caps"&gt;API&lt;/span&gt;. The &lt;em&gt;&lt;span class="caps"&gt;QGIS&lt;/span&gt; Plugin Development&lt;/em&gt; series (see the list of other …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michal Zimmermann</dc:creator><pubDate>Thu, 26 Oct 2017 15:00:00 +0200</pubDate><guid isPermaLink="false">tag:www.zimmi.cz,2017-10-26:/posts/2017/qgis-plugin-development-getting-started/</guid><category>python</category><category>QGIS</category></item><item><title>Serving Mapbox Vector Tiles with PostGIS, Nginx and Python Backend</title><link>https://www.zimmi.cz/posts/2017/serving-mapbox-vector-tiles-with-postgis-nginx-and-python-backend/</link><description>&lt;p&gt;&lt;a href="({filename}../2017/postgis-as-a-mapbox-vector-tiles-generator.md)"&gt;Since version 2.4.0, PostGIS can serve &lt;span class="caps"&gt;MVT&lt;/span&gt;&lt;/a&gt; data directly. &lt;span class="caps"&gt;MVT&lt;/span&gt; returning queries put heavy workload on the database though. On top of that, each of the query has to be run again every time a client demands the data. This leaves us with plenty of room to optimize …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michal Zimmermann</dc:creator><pubDate>Mon, 23 Oct 2017 16:00:00 +0200</pubDate><guid isPermaLink="false">tag:www.zimmi.cz,2017-10-23:/posts/2017/serving-mapbox-vector-tiles-with-postgis-nginx-and-python-backend/</guid><category>postgis</category><category>python</category></item><item><title>PostgreSQL Dollar Quoting inside Bash Heredoc</title><link>https://www.zimmi.cz/posts/2017/postgresql-dollar-quoting-inside-bash-heredoc/</link><description>&lt;p&gt;Yesterday I spent two very unpleasant hours debugging the weirdest &lt;span class="caps"&gt;SQL&lt;/span&gt; error I&amp;#8217;ve seen in my life, running the below query (simplified for this&amp;nbsp;post).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;psql&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;qAt&lt;/span&gt; &lt;span class="c1"&gt;--no-psqlrc &amp;lt;&amp;lt;BACKUP&lt;/span&gt;
&lt;span class="k"&gt;DO&lt;/span&gt;
&lt;span class="err"&gt;$$&lt;/span&gt;
&lt;span class="k"&gt;DECLARE&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="n"&gt;record&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;BEGIN&lt;/span&gt;
  &lt;span class="n"&gt;RAISE&lt;/span&gt; &lt;span class="n"&gt;INFO&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;%&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;info&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;END&lt;/span&gt;
&lt;span class="err"&gt;$$&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;BACKUP&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Running this in your terminal will result in a nasty …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michal Zimmermann</dc:creator><pubDate>Fri, 22 Sep 2017 20:30:00 +0200</pubDate><guid isPermaLink="false">tag:www.zimmi.cz,2017-09-22:/posts/2017/postgresql-dollar-quoting-inside-bash-heredoc/</guid><category>sql</category><category>postgresql</category><category>bash</category></item><item><title>PostgreSQL Development History Revealed with PostgreSQL</title><link>https://www.zimmi.cz/posts/2017/postgresql-development-history-revealed-with-postgresql/</link><description>&lt;p&gt;I spend a lot of time reading &lt;a href="https://www.postgresql.org/docs/manuals/"&gt;PostgreSQL docs&lt;/a&gt;. It occurred to me just a few weeks ago that those versioned manuals are great opportunity to get an insight into PostgreSQL development history. Using PostgreSQL, of&amp;nbsp;course.&lt;/p&gt;
&lt;h2&gt;&lt;span class="caps"&gt;TOP&lt;/span&gt; 5 functions with the most verbose docs in each&amp;nbsp;version&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;
    &lt;span class="k"&gt;version …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michal Zimmermann</dc:creator><pubDate>Wed, 09 Aug 2017 19:00:00 +0200</pubDate><guid isPermaLink="false">tag:www.zimmi.cz,2017-08-09:/posts/2017/postgresql-development-history-revealed-with-postgresql/</guid><category>postgresql</category><category>python</category></item><item><title>PostGIS as a Mapbox Vector Tiles generator</title><link>https://www.zimmi.cz/posts/2017/postgis-as-a-mapbox-vector-tiles-generator/</link><description>&lt;p&gt;&lt;a href="http://postgis.net/2017/08/05/postgis-2.4.0alpha/"&gt;PostGIS 2.4.0&lt;/a&gt; was released recently bringing the possibilities to generate &lt;strong&gt;Mapbox Vector Tiles&lt;/strong&gt; without any third party tools. I got a shot at it with Node.js and docker. Even if it&amp;#8217;s not as straightforward as solely using &lt;a href="https://postgis.net/docs/manual-dev/ST_AsMVT.html"&gt;ST_AsMVT&lt;/a&gt;, it still looks pretty&amp;nbsp;great.&lt;/p&gt;
&lt;h2&gt;Docker&amp;nbsp;container&lt;/h2&gt;
&lt;p&gt;There …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michal Zimmermann</dc:creator><pubDate>Sun, 06 Aug 2017 18:00:00 +0200</pubDate><guid isPermaLink="false">tag:www.zimmi.cz,2017-08-06:/posts/2017/postgis-as-a-mapbox-vector-tiles-generator/</guid><category>docker</category><category>postgis</category><category>javascript</category></item><item><title>Fighting Raster GeoPackage with GDAL</title><link>https://www.zimmi.cz/posts/2017/fighting-raster-geopackage-with-gdal/</link><description>&lt;p&gt;As I&amp;#8217;m still running Ubuntu 16.04 based Linux Mint, I have no access to &lt;span class="caps"&gt;GDAL&lt;/span&gt; 2.x repositories (except for ubuntugis, that I really don&amp;#8217;t like to use). Provided with a GeoPackage raster file recently, I had to find a way to load it into &lt;span class="caps"&gt;QGIS&lt;/span&gt;, somehow …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michal Zimmermann</dc:creator><pubDate>Wed, 19 Jul 2017 13:30:00 +0200</pubDate><guid isPermaLink="false">tag:www.zimmi.cz,2017-07-19:/posts/2017/fighting-raster-geopackage-with-gdal/</guid><category>bash</category><category>gdal</category></item><item><title>Mapping North America with QGIS: Tips and Tricks</title><link>https://www.zimmi.cz/posts/2017/mapping-north-america-with-qgis-tips-and-tricks</link><description>&lt;p&gt;Recently I&amp;#8217;ve bought a book called &lt;em&gt;Maps&lt;/em&gt; by Aleksandra Mizielinska and Daniel Mizielinski to my nephew. The book&amp;#8217;s absolutely wonderful and made me want to try crafting a map with similar looks. I don&amp;#8217;t do maps much at &lt;a href="https://clevermaps.cz"&gt;CleverMaps&lt;/a&gt;, so this was a great opportunity to find …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michal Zimmermann</dc:creator><pubDate>Sun, 21 May 2017 15:30:00 +0200</pubDate><guid isPermaLink="false">tag:www.zimmi.cz,2017-05-21:/posts/2017/mapping-north-america-with-qgis-tips-and-tricks</guid><category>qgis</category><category>visualization</category></item><item><title>Wifileaks Wi-Fi Networks Dataviz</title><link>https://www.zimmi.cz/posts/2017/wifileaks-wi-fi-networks-dataviz/</link><description>&lt;p&gt;&lt;a href="http://www.wifileaks.cz"&gt;Wifileaks&lt;/a&gt; is a project by Jakub Čížek aimed to map the Czech wi-fi networks with Android/iOS app. The data gathered by people using the app &lt;a href="http://download.wifileaks.cz/data/wifileaks_raw_170416.tar.gz"&gt;is available to download&lt;/a&gt; and features ~&amp;nbsp;90,000,000 records, each representing the position of the cellphone when connecting to the network. Just about …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michal Zimmermann</dc:creator><pubDate>Tue, 02 May 2017 18:30:00 +0200</pubDate><guid isPermaLink="false">tag:www.zimmi.cz,2017-05-02:/posts/2017/wifileaks-wi-fi-networks-dataviz/</guid><category>qgis</category><category>visualization</category></item><item><title>Routing with GRASS GIS: Catchment Area Calculation</title><link>https://www.zimmi.cz/posts/2017/routing-with-grass-gis-catchment-area-calculation/</link><description>&lt;p&gt;I got my hands on &lt;a href="https://www.zimmi.cz/posts/2017/routing-with-pgrouting-catchment-area-calculation/"&gt;pgRouting&lt;/a&gt; in the last post and I&amp;#8217;m about to do the same with &lt;span class="caps"&gt;GRASS&lt;/span&gt; &lt;span class="caps"&gt;GIS&lt;/span&gt; in this&amp;nbsp;one.&lt;/p&gt;
&lt;p&gt;&lt;span class="caps"&gt;GRASS&lt;/span&gt; &lt;span class="caps"&gt;GIS&lt;/span&gt; stores the topology for the native vector format by default, which makes it easy to use for the network analysis. All the commands associated …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michal Zimmermann</dc:creator><pubDate>Thu, 20 Apr 2017 17:30:00 +0200</pubDate><guid isPermaLink="false">tag:www.zimmi.cz,2017-04-20:/posts/2017/routing-with-grass-gis-catchment-area-calculation/</guid><category>grass</category></item><item><title>Routing with pgRouting: Catchment Area Calculation</title><link>https://www.zimmi.cz/posts/2017/routing-with-pgrouting-catchment-area-calculation/</link><description>&lt;p&gt;For a long time I&amp;#8217;ve wanted to play with &lt;a href="http://pgrouting.org/"&gt;pgRouting&lt;/a&gt; and that time has finally come. Among many other routing functions there is one that caught my eye, called &lt;code&gt;pgr_drivingdistance&lt;/code&gt;. As the documentation says, it &lt;em&gt;returns the driving distance from a start node&lt;/em&gt; using Dijkstra algorithm. The aforementioned distance …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michal Zimmermann</dc:creator><pubDate>Fri, 14 Apr 2017 17:30:00 +0200</pubDate><guid isPermaLink="false">tag:www.zimmi.cz,2017-04-14:/posts/2017/routing-with-pgrouting-catchment-area-calculation/</guid><category>postgis</category><category>pgrouting</category></item><item><title>Exploiting Prague Open Data without API</title><link>https://www.zimmi.cz/posts/2017/exploiting-prague-open-data-without-api/</link><description>&lt;p&gt;Speaking the Czech Republic, &lt;a href="http://www.geoportalpraha.cz"&gt;Prague is an undoubted leader in open data publishing&lt;/a&gt;. However, there is no public &lt;span class="caps"&gt;API&lt;/span&gt; to explore/search existing&amp;nbsp;datasets.&lt;/p&gt;
&lt;p&gt;I wanted to download the &lt;span class="caps"&gt;ESRI&lt;/span&gt; Shapefile of the city urban plan that &lt;a href="http://www.geoportalpraha.cz/cs/opendata/21733E1F-21B7-4ABC-B1C2-DC19C0237380#.WOKHMbmFvVM"&gt;is divided into more than a hundred files&lt;/a&gt; (a file representing a cadastral …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michal Zimmermann</dc:creator><pubDate>Mon, 03 Apr 2017 19:30:00 +0200</pubDate><guid isPermaLink="false">tag:www.zimmi.cz,2017-04-03:/posts/2017/exploiting-prague-open-data-without-api/</guid><category>bash</category></item><item><title>Upgrading PostgreSQL 9.5 to PostgreSQL 9.6 with PostGIS</title><link>https://www.zimmi.cz/posts/2017/upgrading-postgresql-95-to-postgresql-96-with-postgis/</link><description>&lt;p&gt;Thanks to &lt;code&gt;pg_upgrade&lt;/code&gt; tool the PostgreSQL upgrade on Ubuntu is pretty straightforward. Different PostGIS versions might cause troubles though. This post covers PostgreSQL 9.5, PostGIS 2.2 to PostgreSQL 9.6, PostGIS 2.3&amp;nbsp;migration.&lt;/p&gt;
&lt;p&gt;First of all, install the PostgreSQL 9.6 with PostGIS&amp;nbsp;2.3.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;apt install …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michal Zimmermann</dc:creator><pubDate>Wed, 01 Mar 2017 09:30:00 +0100</pubDate><guid isPermaLink="false">tag:www.zimmi.cz,2017-03-01:/posts/2017/upgrading-postgresql-95-to-postgresql-96-with-postgis/</guid><category>sql</category><category>postgresql</category></item><item><title>Executing dynamic SQL query right away</title><link>https://www.zimmi.cz/posts/2017/executing-dynamic-sql-query-right-away/</link><description>&lt;p&gt;PostgreSQL 9.6 comes with a handy &lt;code&gt;psql&lt;/code&gt; command called &lt;code&gt;\gexec&lt;/code&gt; that &lt;em&gt;sends the current query input buffer to the server and treats the result as a &lt;span class="caps"&gt;SQL&lt;/span&gt; statement to be executed&lt;/em&gt; (right, whatever). What that means is that instead of doing&amp;nbsp;this&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;psql -c &lt;span class="s2"&gt;&amp;quot;SELECT &amp;#39;DROP TABLE &amp;#39; || tablename FROM …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michal Zimmermann</dc:creator><pubDate>Tue, 28 Feb 2017 20:30:00 +0100</pubDate><guid isPermaLink="false">tag:www.zimmi.cz,2017-02-28:/posts/2017/executing-dynamic-sql-query-right-away/</guid><category>sql</category><category>postgresql</category></item><item><title>Subdivide and Conquer: Effective Spatial Indexes in PostGIS</title><link>https://www.zimmi.cz/posts/2017/subdivide-and-conquer-effective-spatial-indexes-in-postgis/</link><description>&lt;p&gt;Spatial indexes are absolutely crucial part of any spatial database and - as I tend to say quite often - only a fool would try to query spatial data without building spatial indexes&amp;nbsp;beforehand.&lt;/p&gt;
&lt;p&gt;Spatial indexes are based on bounding box comparisons, which are generally very fast. Yet, there are situations when …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michal Zimmermann</dc:creator><pubDate>Tue, 10 Jan 2017 21:45:00 +0100</pubDate><guid isPermaLink="false">tag:www.zimmi.cz,2017-01-10:/posts/2017/subdivide-and-conquer-effective-spatial-indexes-in-postgis/</guid><category>sql</category><category>postgresql</category><category>postgis</category></item><item><title>Counting substring occurrences in PostgreSQL</title><link>https://www.zimmi.cz/posts/2016/counting-substring-occurrences-in-postgresql/</link><description>&lt;p&gt;I got to count occurrences of &lt;em&gt;/&lt;/em&gt; character today and found out no built-in function exists in PostgreSQL, so here&amp;#8217;s my shot at it. Pretty simple, yet&amp;nbsp;useful.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;OR&lt;/span&gt; &lt;span class="k"&gt;REPLACE&lt;/span&gt; &lt;span class="k"&gt;FUNCTION&lt;/span&gt; &lt;span class="n"&gt;how_many&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;IN&lt;/span&gt; &lt;span class="nb"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;IN&lt;/span&gt; &lt;span class="nb"&gt;varchar&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;OUT&lt;/span&gt; &lt;span class="nb"&gt;integer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;RETURNS&lt;/span&gt; &lt;span class="nb"&gt;integer&lt;/span&gt;
&lt;span class="k"&gt;AS&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;how_many$&lt;/span&gt;
    &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="k"&gt;length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="k"&gt;length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="mi"&gt;2 …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michal Zimmermann</dc:creator><pubDate>Mon, 19 Dec 2016 17:50:00 +0100</pubDate><guid isPermaLink="false">tag:www.zimmi.cz,2016-12-19:/posts/2016/counting-substring-occurrences-in-postgresql/</guid><category>sql</category><category>postgresql</category></item><item><title>Plotting the Czech Cadastre Land Use with d3: Data Viz (part IV)</title><link>https://www.zimmi.cz/posts/2016/plotting-the-czech-cadastre-land-use-with-d3-data-viz-part-iv/</link><description>&lt;p&gt;This post is the fourth part of the series summarizing the process of visualizing land use data with bash, PostgreSQL and d3.js. Read other&amp;nbsp;parts:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://www.zimmi.cz/posts/2016/plotting-czech-cadastre-land-use-with-d3-data-extraction-part-i"&gt;Plotting the Czech Cadastre Land Use with d3: Data Extraction (part&amp;nbsp;I)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.zimmi.cz/posts/2016/plotting-czech-cadastre-land-use-with-d3-data-transformation-part-ii"&gt;Plotting the Czech Cadastre Land Use with d3: Data Transformation (part &lt;span class="caps"&gt;II …&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michal Zimmermann</dc:creator><pubDate>Sun, 20 Nov 2016 14:45:00 +0100</pubDate><guid isPermaLink="false">tag:www.zimmi.cz,2016-11-20:/posts/2016/plotting-the-czech-cadastre-land-use-with-d3-data-viz-part-iv/</guid><category>d3</category><category>javascript</category><category>svg</category></item><item><title>Plotting the Czech Cadastre Land Use with d3: Data Load (part III)</title><link>https://www.zimmi.cz/posts/2016/plotting-czech-cadastre-land-use-with-d3-data-load-part-iii/</link><description>&lt;p&gt;This post is the third part of the series summarizing the process of visualizing landuse data with bash, PostgreSQL and d3.js. Read other&amp;nbsp;parts:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://www.zimmi.cz/posts/2016/plotting-czech-cadastre-land-use-with-d3-data-extraction-part-i"&gt;Plotting the Czech Cadastre Land Use with d3: Data Extraction (part&amp;nbsp;I)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.zimmi.cz/posts/2016/plotting-czech-cadastre-land-use-with-d3-data-transformation-part-ii"&gt;Plotting the Czech Cadastre Land Use with d3: Data Transformation (part &lt;span class="caps"&gt;II&lt;/span&gt;)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;you …&lt;/li&gt;&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michal Zimmermann</dc:creator><pubDate>Tue, 15 Nov 2016 18:30:00 +0100</pubDate><guid isPermaLink="false">tag:www.zimmi.cz,2016-11-15:/posts/2016/plotting-czech-cadastre-land-use-with-d3-data-load-part-iii/</guid><category>postgresql</category><category>d3</category><category>javascript</category><category>svg</category></item><item><title>Plotting the Czech Cadastre Land Use with d3: Data Transformation (part II)</title><link>https://www.zimmi.cz/posts/2016/plotting-czech-cadastre-land-use-with-d3-data-transformation-part-ii</link><description>&lt;p&gt;This post is the second part of the series summarizing the process of visualizing landuse data with bash, PostgreSQL and d3.js. Read other&amp;nbsp;parts:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://www.zimmi.cz/posts/2016/plotting-czech-cadastre-land-use-with-d3-data-extraction-part-i"&gt;Plotting the Czech Cadastre Land Use with d3: Data Extraction (part&amp;nbsp;I)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;you&amp;#8217;re reading it&amp;nbsp;now&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.zimmi.cz/posts/2016/plotting-czech-cadastre-land-use-with-d3-data-load-part-iii/"&gt;Plotting the Czech Cadastre Land Use with d3 …&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michal Zimmermann</dc:creator><pubDate>Mon, 14 Nov 2016 18:30:00 +0100</pubDate><guid isPermaLink="false">tag:www.zimmi.cz,2016-11-14:/posts/2016/plotting-czech-cadastre-land-use-with-d3-data-transformation-part-ii</guid><category>javascript</category><category>d3</category><category>postgresql</category><category>svg</category></item><item><title>Plotting the Czech Cadastre Land Use with d3: Data Extraction (part I)</title><link>https://www.zimmi.cz/posts/2016/plotting-czech-cadastre-land-use-with-d3-data-extraction-part-i</link><description>&lt;p&gt;This post is the first part of the upcoming series summarizing the process of visualizing landuse data with bash, PostgreSQL and d3.js. Read other&amp;nbsp;parts:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;you&amp;#8217;re reading it&amp;nbsp;now&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.zimmi.cz/posts/2016/plotting-czech-cadastre-land-use-with-d3-data-transformation-part-ii"&gt;Plotting the Czech Cadastre Land Use with d3: Data Transformation (part &lt;span class="caps"&gt;II&lt;/span&gt;)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.zimmi.cz/posts/2016/plotting-czech-cadastre-land-use-with-d3-data-load-part-iii/"&gt;Plotting the Czech Cadastre Land Use with …&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michal Zimmermann</dc:creator><pubDate>Sun, 13 Nov 2016 18:30:00 +0100</pubDate><guid isPermaLink="false">tag:www.zimmi.cz,2016-11-13:/posts/2016/plotting-czech-cadastre-land-use-with-d3-data-extraction-part-i</guid><category>javascript</category><category>d3</category><category>postgresql</category><category>svg</category></item><item><title>Introducing Blind Maps Project</title><link>https://www.zimmi.cz/posts/2016/introducing-blind-maps-project/</link><description>&lt;p&gt;I&amp;#8217;d like to introduce you to my little pet project, which might just as well be awarded &lt;em&gt;the first pet project I&amp;#8217;ve ever completed&lt;/em&gt;, called &lt;a href="https://www.zimmi.cz/blind-maps"&gt;Blind maps&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s a very simple, yet useful web application built on top of the great &lt;a href="../../tag/leaflet.html"&gt;Leaflet&lt;/a&gt; library meant to help you …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michal Zimmermann</dc:creator><pubDate>Wed, 02 Nov 2016 18:30:00 +0100</pubDate><guid isPermaLink="false">tag:www.zimmi.cz,2016-11-02:/posts/2016/introducing-blind-maps-project/</guid><category>javascript</category><category>leaflet</category></item><item><title>Degrees To Decimal With Javascript Reworked</title><link>https://www.zimmi.cz/posts/2016/degrees-to-decimal-with-javascript-reworked/</link><description>&lt;p&gt;Two years ago I was pretty happy with &lt;a href="https://www.zimmi.cz/posts/2014/degrees-to-decimal-with-javascript/"&gt;this little piece of code to transform degrees to the decimal value&lt;/a&gt;. Yesterday, I found a neater way to do the&amp;nbsp;same:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;deg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;degToDec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prev&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;cur&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;curIndex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;prev&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;cur&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;curIndex&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;deg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;degToDec …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michal Zimmermann</dc:creator><pubDate>Fri, 28 Oct 2016 16:00:00 +0200</pubDate><guid isPermaLink="false">tag:www.zimmi.cz,2016-10-28:/posts/2016/degrees-to-decimal-with-javascript-reworked/</guid><category>javascript</category></item><item><title>Ogrinfo Output Formatting</title><link>https://www.zimmi.cz/posts/2016/ogrinfo-output-formatting/</link><description>&lt;p&gt;Today my workmate asked if there was a way to see an attribute table other than importing spatial data into a PostGIS database. I told him about &lt;span class="caps"&gt;QGIS&lt;/span&gt; and while talking about other &lt;span class="caps"&gt;GIS&lt;/span&gt; stuff, I started thinking about &lt;em&gt;pipes&lt;/em&gt; and how awesome it would be to actually format the …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michal Zimmermann</dc:creator><pubDate>Fri, 21 Oct 2016 23:00:00 +0200</pubDate><guid isPermaLink="false">tag:www.zimmi.cz,2016-10-21:/posts/2016/ogrinfo-output-formatting/</guid><category>gdal</category></item><item><title>PostGIS Custom Function to Create Wind Rose</title><link>https://www.zimmi.cz/posts/2016/postgis-custom-function-to-create-wind-rose/</link><description>&lt;p&gt;I&amp;#8217;ve come across the &lt;a href="http://gis.stackexchange.com/questions/208797/draw-wind-rose-with-qgis-from-postgis/"&gt;beautiful &lt;span class="caps"&gt;GIS&lt;/span&gt; StackExchange question&lt;/a&gt; recently, asking how to draw a &lt;a href="https://en.wikipedia.org/wiki/Wind_rose"&gt;wind rose&lt;/a&gt; within&amp;nbsp;PostGIS.&lt;/p&gt;
&lt;div class="text-center"&gt;
&lt;img data-echo="http://i.stack.imgur.com/0xAMU.png"&gt;
&lt;/div&gt;

&lt;p&gt;It&amp;#8217;s pretty easy to accomplish this with a custom &lt;span class="caps"&gt;PLPGSQL&lt;/span&gt; procedure below, that takes line geometry, number of sections and radius of the inner circle as&amp;nbsp;parameters.&lt;/p&gt;
&lt;!-- codeblock --&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;OR&lt;/span&gt; &lt;span class="k"&gt;REPLACE …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michal Zimmermann</dc:creator><pubDate>Thu, 01 Sep 2016 22:00:00 +0200</pubDate><guid isPermaLink="false">tag:www.zimmi.cz,2016-09-01:/posts/2016/postgis-custom-function-to-create-wind-rose/</guid><category>postgis</category><category>postgresql</category><category>sql</category></item><item><title>PostGIS Custom Function to Create Polygon from Centroid</title><link>https://www.zimmi.cz/posts/2016/postgis-custom-function-to-create-polygon-from-centroid/</link><description>&lt;p&gt;Needed to create a polygon from a point defining its size in both axes, here&amp;#8217;s a little syntax sugar to make life&amp;nbsp;easier.&lt;/p&gt;
&lt;!-- codeblock --&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;OR&lt;/span&gt; &lt;span class="k"&gt;REPLACE&lt;/span&gt; &lt;span class="k"&gt;FUNCTION&lt;/span&gt; &lt;span class="n"&gt;ST_PolygonFromCentroid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;centroid&lt;/span&gt; &lt;span class="n"&gt;geometry&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;xsize&lt;/span&gt; &lt;span class="nb"&gt;numeric&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ysize&lt;/span&gt; &lt;span class="nb"&gt;numeric&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;RETURNS&lt;/span&gt; &lt;span class="n"&gt;geometry&lt;/span&gt;
&lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;ST_PolygonFromCentroid$&lt;/span&gt;
&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;ST_MakeEnvelope&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;ST_X&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ST_Translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
    &lt;span class="n"&gt;ST_Y&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ST_Translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="mi"&gt;2 …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michal Zimmermann</dc:creator><pubDate>Sun, 28 Aug 2016 09:00:00 +0200</pubDate><guid isPermaLink="false">tag:www.zimmi.cz,2016-08-28:/posts/2016/postgis-custom-function-to-create-polygon-from-centroid/</guid><category>postgis</category><category>postgresql</category><category>sql</category></item><item><title>Finding Polygons Lying across Other Polygons with PostGIS</title><link>https://www.zimmi.cz/posts/2016/finding-polygons-lying-across-other-polygons-with-postgis/</link><description>&lt;p&gt;Doing overlays (&lt;code&gt;ST_Intersection()&lt;/code&gt;) in PostGIS based on spatial relationships (&lt;code&gt;ST_Intersects()&lt;/code&gt;, &lt;code&gt;ST_Contains()&lt;/code&gt;, &amp;hellip;) is so easy it is not something you get particularly excited&amp;nbsp;about.&lt;/p&gt;
&lt;p&gt;Today I faced a bit more interesting task: &lt;strong&gt;given two polygon layers, get me all the polygons from layer A such that they lie across the polygons …&lt;/strong&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michal Zimmermann</dc:creator><pubDate>Fri, 05 Aug 2016 19:39:00 +0200</pubDate><guid isPermaLink="false">tag:www.zimmi.cz,2016-08-05:/posts/2016/finding-polygons-lying-across-other-polygons-with-postgis/</guid><category>postgis</category><category>postgresql</category><category>sql</category></item><item><title>Dead Simple Random Points in Polygons with PostGIS</title><link>https://www.zimmi.cz/posts/2016/dead-simple-random-points-in-polygons-with-postgis/</link><description>&lt;p&gt;Since PostgreSQL 9.3 there has been a handy little keyword called &lt;code&gt;LATERAL&lt;/code&gt;, which - combined with &lt;code&gt;JOIN&lt;/code&gt; - might rock your &lt;span class="caps"&gt;GIS&lt;/span&gt; world in a second. To keep it simple, a &lt;code&gt;LATERAL JOIN&lt;/code&gt; enables a subquery in the &lt;code&gt;FROM&lt;/code&gt; part of a query to reference columns from preceding expressions in the …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michal Zimmermann</dc:creator><pubDate>Wed, 03 Aug 2016 20:10:00 +0200</pubDate><guid isPermaLink="false">tag:www.zimmi.cz,2016-08-03:/posts/2016/dead-simple-random-points-in-polygons-with-postgis/</guid><category>postgis</category><category>postgresql</category><category>sql</category></item><item><title>Syncing Two PostgreSQL Databases Faster</title><link>https://www.zimmi.cz/posts/2016/syncing-two-postgresql-databases-faster/</link><description>&lt;p&gt;Imagine you run two database machines hosting structurally the same databases on two separate servers and you need to transfer data from one to another. Not very often, let&amp;#8217;s say once a month. Your tables aren&amp;#8217;t small nor huge, let&amp;#8217;s say millions rows in&amp;nbsp;general.&lt;/p&gt;
&lt;p&gt;You&amp;#8217;re …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michal Zimmermann</dc:creator><pubDate>Sun, 17 Jul 2016 19:10:00 +0200</pubDate><guid isPermaLink="false">tag:www.zimmi.cz,2016-07-17:/posts/2016/syncing-two-postgresql-databases-faster/</guid><category>postgresql</category><category>bash</category></item><item><title>Testing PostgreSQL OGR FDW</title><link>https://www.zimmi.cz/posts/2016/testing-postgresql-ogr-fdw/</link><description>&lt;p&gt;&lt;a href="https://wiki.postgresql.org/wiki/Foreign_data_wrappers"&gt;PostgreSQL foreign data wrappers&lt;/a&gt; are used to connect PostgreSQL database to different datasources, e.g. other &lt;span class="caps"&gt;SQL&lt;/span&gt; databases, &lt;span class="caps"&gt;CSV&lt;/span&gt; files, &lt;span class="caps"&gt;XLS&lt;/span&gt;&amp;nbsp;spreadsheets&amp;times;&lt;/p&gt;
&lt;p&gt;The one I&amp;#8217;ve been interested in for several months is &lt;a href="https://github.com/pramsey/pgsql-ogr-fdw"&gt;Paul Ramsey&amp;#8217;s &lt;span class="caps"&gt;OGR&lt;/span&gt; &lt;span class="caps"&gt;FDW&lt;/span&gt;&lt;/a&gt; - it gives you access to &lt;span class="caps"&gt;OGR&lt;/span&gt; supported spatial formats directly from your …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michal Zimmermann</dc:creator><pubDate>Fri, 01 Jul 2016 11:10:00 +0200</pubDate><guid isPermaLink="false">tag:www.zimmi.cz,2016-07-01:/posts/2016/testing-postgresql-ogr-fdw/</guid><category>postgresql</category><category>gdal</category></item><item><title>A Month of Commuting on My Own</title><link>https://www.zimmi.cz/posts/2016/a-month-of-commuting-on-my-own/</link><description>&lt;p&gt;I&amp;#8217;ve been sort of living in Brno for the last 7 years (college included). It&amp;#8217;s quite a hilly city, with lots of cars, very good public transportation system and ever-improving cycling infrastructure. All these years I was using trams, buses and trolleybuses to get myself from one place …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michal Zimmermann</dc:creator><pubDate>Sat, 09 Apr 2016 09:10:00 +0200</pubDate><guid isPermaLink="false">tag:www.zimmi.cz,2016-04-09:/posts/2016/a-month-of-commuting-on-my-own/</guid><category>spatial</category><category>visualization</category></item><item><title>Do You Really Need Gulp? Or Grunt? Or Bower? Or What?</title><link>https://www.zimmi.cz/posts/2016/do-you-really-need-gulp-or-grunt-or-bower-or-what/</link><description>&lt;p&gt;&lt;strong&gt;Disclaimer:&lt;/strong&gt; I&amp;#8217;m an enthuastic developer, but I do not code for a living. I&amp;#8217;m just the ordinary guy who keeps editing a wrong file wondering why &lt;em&gt;the heck&lt;/em&gt; the changes are not being&amp;nbsp;applied.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span class="caps"&gt;TL&lt;/span&gt;;&lt;span class="caps"&gt;DR&lt;/span&gt;:&lt;/strong&gt; I do think &lt;code&gt;npm&lt;/code&gt; might be the&amp;nbsp;answer.&lt;/p&gt;
&lt;h2&gt;Wonderful world of JavaScript …&lt;/h2&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michal Zimmermann</dc:creator><pubDate>Sun, 20 Mar 2016 19:15:00 +0100</pubDate><guid isPermaLink="false">tag:www.zimmi.cz,2016-03-20:/posts/2016/do-you-really-need-gulp-or-grunt-or-bower-or-what/</guid><category>javascript</category></item><item><title>How to convert DGN to Tiff with GDAL</title><link>https://www.zimmi.cz/posts/2016/how-to-convert-dgn-to-tiff-with-gdal/</link><description>&lt;p&gt;We have to deal with &lt;span class="caps"&gt;DGN&lt;/span&gt; drawings quite often at &lt;a href="http://www.clevermaps.cz"&gt;CleverMaps&lt;/a&gt; - heavily used for infrastructure projects (highways, roads, pipelines), they are a pure nightmare to the &lt;span class="caps"&gt;GIS&lt;/span&gt; person inside me. Right now, I&amp;#8217;m only capable of converting it into a raster file and serve it with Geoserver. The transformation …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michal Zimmermann</dc:creator><pubDate>Sun, 21 Feb 2016 18:45:00 +0100</pubDate><guid isPermaLink="false">tag:www.zimmi.cz,2016-02-21:/posts/2016/how-to-convert-dgn-to-tiff-with-gdal/</guid><category>gdal</category></item><item><title>Looking for the Next Row with PostgreSQL</title><link>https://www.zimmi.cz/posts/2016/looking-for-the-next-row-with-postgresql/</link><description>&lt;h2&gt;Using &lt;span class="caps"&gt;JOIN&lt;/span&gt;&amp;nbsp;clause&lt;/h2&gt;
&lt;p&gt;All my &lt;span class="caps"&gt;GIS&lt;/span&gt; life I&amp;#8217;ve been using a simple &lt;code&gt;JOIN&lt;/code&gt; clause to find a row with an &lt;code&gt;id = previous_id + 1&lt;/code&gt;. In other words, imagine a simple table with no&amp;nbsp;indices:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="nb"&gt;integer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;INSERT&lt;/span&gt; &lt;span class="k"&gt;INTO&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt; &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;generate_series&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10000000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Let …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michal Zimmermann</dc:creator><pubDate>Sat, 23 Jan 2016 16:45:00 +0100</pubDate><guid isPermaLink="false">tag:www.zimmi.cz,2016-01-23:/posts/2016/looking-for-the-next-row-with-postgresql/</guid><category>postgresql</category><category>sql</category></item><item><title>Liftago Open Dataset Infographics</title><link>https://www.zimmi.cz/posts/2015/liftago-open-dataset-infographics/</link><description>&lt;p&gt;&lt;a href="https://www.liftago.com/cs"&gt;Liftago&lt;/a&gt; (the Czech analogy of Uber) has recently &lt;a href="http://try.liftago.com/info-wants-to-be-free/"&gt;released a sample of its data&lt;/a&gt; covering four weeks of driver/pasenger&amp;nbsp;interactions.&lt;/p&gt;
&lt;p&gt;Have a look at my infographics created with PostGIS, Inkscape, Python and&amp;nbsp;pygal.&lt;/p&gt;
&lt;p class="text-center"&gt;&lt;a href="https://www.zimmi.cz/posts/assets/liftago-open-dataset-infographics/liftago.pdf"&gt;&lt;img title="Liftago infographics" src="{filename}/assets/liftago-open-dataset-infographics/liftago.png" class="img-responsive centered"&gt;&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michal Zimmermann</dc:creator><pubDate>Mon, 21 Dec 2015 09:35:00 +0100</pubDate><guid isPermaLink="false">tag:www.zimmi.cz,2015-12-21:/posts/2015/liftago-open-dataset-infographics/</guid><category>python</category><category>postgis</category><category>svg</category><category>visualization</category></item><item><title>Twitter REST API Data Mining on OpenShift (Part II)</title><link>https://www.zimmi.cz/posts/2015/twitter-rest-api-data-mining-on-openshift-part-ii/</link><description>&lt;p&gt;Last time I described &lt;a href="https://www.zimmi.cz/posts/2015/twitter-rest-api-data-mining-on-openshift-part-i/"&gt;the setup of my OpenShift Twitter crawler&lt;/a&gt; and let it running and downloading data. It&amp;#8217;s been more than two months since I started and I got interesting amount of data. I also made a simple &lt;span class="caps"&gt;ETL&lt;/span&gt; process to load it into my local PostGIS database …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michal Zimmermann</dc:creator><pubDate>Sun, 06 Dec 2015 12:25:00 +0100</pubDate><guid isPermaLink="false">tag:www.zimmi.cz,2015-12-06:/posts/2015/twitter-rest-api-data-mining-on-openshift-part-ii/</guid><category>javascript</category><category>openshift</category><category>twitter</category></item><item><title>PostGIS Case Study: Vozejkmap Open Data (Part III)</title><link>https://www.zimmi.cz/posts/2015/postgis-case-study-vozejkmap-open-data-part-iii/</link><description>&lt;p&gt;After a while I got back to my &lt;a href="https://www.zimmi.cz/posts/2014/postgis-case-study-vozejkmap-open-data-part-i/"&gt;PostGIS open data&lt;/a&gt; &lt;a href="https://www.zimmi.cz/posts/2015/postgis-case-study-vozejkmap-open-data-part-ii/"&gt;case study&lt;/a&gt;. Last time I left it with clustering implemented, looking forward to incorporate &lt;a href="http://turfjs.org"&gt;Turf.js&lt;/a&gt; in the future. &lt;em&gt;And the future is now.&lt;/em&gt; &lt;a href="https://github.com/zimmicz/vozejkmap-to-postgis"&gt;The code is still available on&amp;nbsp;GitHub.&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Subgroup&amp;nbsp;clustering&lt;/h2&gt;
&lt;p&gt;Vozejkmap data is categorized based on …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michal Zimmermann</dc:creator><pubDate>Sat, 14 Nov 2015 20:39:00 +0100</pubDate><guid isPermaLink="false">tag:www.zimmi.cz,2015-11-14:/posts/2015/postgis-case-study-vozejkmap-open-data-part-iii/</guid><category>postgresql</category><category>postgis</category><category>leaflet</category><category>javascript</category></item><item><title>Twitter REST API Data Mining on OpenShift (Part I)</title><link>https://www.zimmi.cz/posts/2015/twitter-rest-api-data-mining-on-openshift-part-i/</link><description>&lt;p&gt;More than a year ago I wrote about &lt;a href="http://www.zimmi.cz/posts/2014/analyzing-twitter-languages-with-streaming-api/"&gt;analyzing Twitter languages with Streaming &lt;span class="caps"&gt;API&lt;/span&gt;&lt;/a&gt;. Back then I kept my laptop running for a week to download data. Not a comfortable way, especially if you decide to get more data. One year uptime doesn&amp;#8217;t sound like anything you want to …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michal Zimmermann</dc:creator><pubDate>Fri, 06 Nov 2015 22:00:00 +0100</pubDate><guid isPermaLink="false">tag:www.zimmi.cz,2015-11-06:/posts/2015/twitter-rest-api-data-mining-on-openshift-part-i/</guid><category>javascript</category><category>openshift</category><category>twitter</category></item><item><title>Installing PostGIS 2.2 with SFCGAL on Ubuntu-based OS</title><link>https://www.zimmi.cz/posts/2015/installing-postgis-22-with-sfcgal-on-ubuntu-based-os/</link><description>&lt;p&gt;I&amp;#8217;ve seen a bunch of questions on &lt;span class="caps"&gt;GIS&lt;/span&gt; StackExchange recently related to &lt;a href="http://sfcgal.org/"&gt;&lt;span class="caps"&gt;SFCGAL&lt;/span&gt;&lt;/a&gt; extension for &lt;a href="http://postgis.net"&gt;PostGIS 2.2&lt;/a&gt;. Great news are it can be installed with one simple query &lt;code&gt;CREATE EXTENSION postgis_sfcgal&lt;/code&gt;. Not so great news are you have to compile it from source for Ubuntu-based &lt;span class="caps"&gt;OS&lt;/span&gt; (14.04 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michal Zimmermann</dc:creator><pubDate>Thu, 29 Oct 2015 22:00:00 +0100</pubDate><guid isPermaLink="false">tag:www.zimmi.cz,2015-10-29:/posts/2015/installing-postgis-22-with-sfcgal-on-ubuntu-based-os/</guid><category>postgresql</category><category>postgis</category><category>linux</category></item><item><title>Color Relief Shaded Map Using Open Data with Open Source Software</title><link>https://www.zimmi.cz/posts/2015/color-relief-shaded-map-using-open-data-with-open-source-software/</link><description>&lt;p&gt;The Digital Elevation Model over Europe (&lt;span class="caps"&gt;EU&lt;/span&gt;-&lt;span class="caps"&gt;DEM&lt;/span&gt;) has been recently released for public usage at &lt;a href="http://land.copernicus.eu/in-situ/eu-dem"&gt;Copernicus Land Monitoring Services homepage&lt;/a&gt;. Strictly speaking, it is a &lt;strong&gt;digital surface model&lt;/strong&gt; coming from weighted average of &lt;span class="caps"&gt;SRTM&lt;/span&gt; and &lt;span class="caps"&gt;ASTER&lt;/span&gt; &lt;span class="caps"&gt;GDEM&lt;/span&gt; with geographic accuracy of 25 m. Data are provided as GeoTIFF files …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michal Zimmermann</dc:creator><pubDate>Sun, 25 Oct 2015 09:42:00 +0100</pubDate><guid isPermaLink="false">tag:www.zimmi.cz,2015-10-25:/posts/2015/color-relief-shaded-map-using-open-data-with-open-source-software/</guid><category>bash</category><category>gdal</category><category>linux</category><category>qgis</category></item><item><title>PostgreSQL IN vs EXISTS</title><link>https://www.zimmi.cz/posts/2015/postgresql-in-vs-exists/</link><description>&lt;p&gt;Until recently, &lt;span class="caps"&gt;SQL&lt;/span&gt; &lt;code&gt;IN&lt;/code&gt; and &lt;code&gt;EXISTS&lt;/code&gt; were almost exactly the same to me. There is a significant difference both in execution plans and time of execution though, as I found out after not being able to speed up my workmate&amp;#8217;s&amp;nbsp;query.&lt;/p&gt;
&lt;p&gt;Assume two not-as-small-as-they-might-be&amp;nbsp;tables:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;BEGIN&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="n"&gt;UNLOGGED&lt;/span&gt; &lt;span class="k"&gt;TABLE …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michal Zimmermann</dc:creator><pubDate>Fri, 09 Oct 2015 09:00:00 +0200</pubDate><guid isPermaLink="false">tag:www.zimmi.cz,2015-10-09:/posts/2015/postgresql-in-vs-exists/</guid><category>sql</category></item><item><title>How to Use Queue with Rsync</title><link>https://www.zimmi.cz/posts/2015/how-to-use-queue-with-rsync/</link><description>&lt;p&gt;Having more than 120K &lt;span class="caps"&gt;5MB&lt;/span&gt;+ images that should be moved to the server is a great oportunity for some automatic bash processing. It might be good idea to use &lt;a href="http://www.imagemagick.org/script/index.php"&gt;ImageMagick&lt;/a&gt; &lt;a href="http://www.imagemagick.org/script/convert.php"&gt;convert tool&lt;/a&gt; to make images smaller in a simple for loop. &lt;a href="http://www.gnu.org/software/parallel/"&gt;&lt;span class="caps"&gt;GNU&lt;/span&gt; Parallel&lt;/a&gt; can significantly increase the performance by running …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michal Zimmermann</dc:creator><pubDate>Thu, 01 Oct 2015 07:51:00 +0200</pubDate><guid isPermaLink="false">tag:www.zimmi.cz,2015-10-01:/posts/2015/how-to-use-queue-with-rsync/</guid><category>linux</category><category>bash</category></item><item><title>Automated Map Creation With QGIS, PostGIS, Python, SVG and ImageMagick</title><link>https://www.zimmi.cz/posts/2015/automated-map-creation-with-qgis-postgis-python-svg-and-imagemagick/</link><description>&lt;p&gt;As mentioned in &lt;a href="https://www.zimmi.cz/posts/2015/qgis-tips-for-collaborative-mapping/"&gt;&lt;span class="caps"&gt;QGIS&lt;/span&gt; Tips For Collaborative Mapping&lt;/a&gt; we&amp;#8217;re in the middle of crop evaluation project at &lt;a href="http://www.clevermaps.cz/"&gt;CleverMaps&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;With the &lt;span class="caps"&gt;QGIS&lt;/span&gt; workflow up and running, I&amp;#8217;ve been focused on different &lt;span class="caps"&gt;QGIS&lt;/span&gt; related task: &lt;strong&gt;automatic map generation&lt;/strong&gt; for land blocks that meet certain conditions. The logic behind identifying such …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michal Zimmermann</dc:creator><pubDate>Sun, 09 Aug 2015 07:51:00 +0200</pubDate><guid isPermaLink="false">tag:www.zimmi.cz,2015-08-09:/posts/2015/automated-map-creation-with-qgis-postgis-python-svg-and-imagemagick/</guid><category>qgis</category><category>postgis</category><category>python</category><category>svg</category><category>linux</category></item><item><title>Clip Raster With Vector Using GDAL</title><link>https://www.zimmi.cz/posts/2015/clip-raster-with-vector-using-gdal/</link><description>&lt;p&gt;Recently I needed to clip several raster files with polygonal layer of municipalities. A solution to this task is pretty straightforward using &lt;a href="http://gdal.org/"&gt;&lt;span class="caps"&gt;GDAL&lt;/span&gt;&lt;/a&gt; and a bit of Bash and &lt;span class="caps"&gt;QGIS&lt;/span&gt; thrown&amp;nbsp;in.&lt;/p&gt;
&lt;p&gt;The necessary steps&amp;nbsp;are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Put each polygon to a separate file. This can be done easily with &lt;code&gt;Vector …&lt;/code&gt;&lt;/li&gt;&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michal Zimmermann</dc:creator><pubDate>Tue, 21 Jul 2015 07:51:00 +0200</pubDate><guid isPermaLink="false">tag:www.zimmi.cz,2015-07-21:/posts/2015/clip-raster-with-vector-using-gdal/</guid><category>linux</category><category>gdal</category></item><item><title>Filtering points by distance in PostGIS</title><link>https://www.zimmi.cz/posts/2015/filtering-points-by-distance-in-postgis/</link><description>&lt;p&gt;Filtering really big (millions of rows) point datasets by distance might get catchy when solved with wrong PostGIS functions. Without spatial indexes PostGIS would take ages to finish such&amp;nbsp;task.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://gis.stackexchange.com/questions/148184/why-the-execution-of-a-query-is-very-slow-using-postgis"&gt;Someone over StackExchange asked&lt;/a&gt; why the next query had been running for 15 hours (!) with no&amp;nbsp;result:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gid …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michal Zimmermann</dc:creator><pubDate>Tue, 21 Jul 2015 07:51:00 +0200</pubDate><guid isPermaLink="false">tag:www.zimmi.cz,2015-07-21:/posts/2015/filtering-points-by-distance-in-postgis/</guid><category>postgis</category></item><item><title>QGIS Tips For Collaborative Mapping</title><link>https://www.zimmi.cz/posts/2015/qgis-tips-for-collaborative-mapping/</link><description>&lt;p&gt;Right now I&amp;#8217;m setting up a project aimed at crop evaluation over ortophotos, &lt;span class="caps"&gt;HR&lt;/span&gt; and &lt;span class="caps"&gt;VHR&lt;/span&gt; imagery. All the steps of evaluation will be done in &lt;span class="caps"&gt;QGIS&lt;/span&gt; with PostGIS used for data storage and&amp;nbsp;post-processing.&lt;/p&gt;
&lt;p&gt;In the initial phase, fifteen &lt;span class="caps"&gt;GIS&lt;/span&gt; operators will be using &lt;span class="caps"&gt;QGIS&lt;/span&gt; to reshape geometries …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michal Zimmermann</dc:creator><pubDate>Tue, 21 Jul 2015 07:51:00 +0200</pubDate><guid isPermaLink="false">tag:www.zimmi.cz,2015-07-21:/posts/2015/qgis-tips-for-collaborative-mapping/</guid><category>qgis</category></item><item><title>SSH GRASS Processing Status Check</title><link>https://www.zimmi.cz/posts/2015/ssh-grass-processing-status-check/</link><description>&lt;p&gt;I&amp;#8217;ve been running some &lt;span class="caps"&gt;GRASS&lt;/span&gt;/PostGIS computations on a remote server that were taking hours to finish. Once in a while I checked for their state by issuing &lt;code&gt;tail log_XX.log&lt;/code&gt; from my laptop to see if they were ready yet. It suddenly became pretty annoying to check five …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michal Zimmermann</dc:creator><pubDate>Tue, 21 Jul 2015 07:51:00 +0200</pubDate><guid isPermaLink="false">tag:www.zimmi.cz,2015-07-21:/posts/2015/ssh-grass-processing-status-check/</guid><category>bash</category><category>linux</category></item><item><title>Animating SVG Maps With SMIL</title><link>https://www.zimmi.cz/posts/2015/animating-svg-maps-with-smil/</link><description>&lt;p&gt;Using &lt;span class="caps"&gt;SVG&lt;/span&gt; to build web maps have both pros and cons and to be honest I don&amp;#8217;t know any &lt;em&gt;serious&lt;/em&gt; map/&lt;span class="caps"&gt;GIS&lt;/span&gt; project built on top of &lt;span class="caps"&gt;SVG&lt;/span&gt;. However, as a part of my job at university, I was forced to use both &lt;span class="caps"&gt;SVG&lt;/span&gt; and &lt;span class="caps"&gt;SMIL&lt;/span&gt; to produce animated …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michal Zimmermann</dc:creator><pubDate>Wed, 29 Apr 2015 18:24:00 +0200</pubDate><guid isPermaLink="false">tag:www.zimmi.cz,2015-04-29:/posts/2015/animating-svg-maps-with-smil/</guid><category>svg</category><category>smil</category></item><item><title>GRASS: Big Buffers Made Easy</title><link>https://www.zimmi.cz/posts/2015/grass-big-buffers-made-easy/</link><description>&lt;p&gt;Recently I&amp;#8217;ve written about &lt;a href="/2015/postgis-buffers-intersections-differences-and-collections/"&gt;struggling with fairly complex geometries in PostGIS&lt;/a&gt;. Lesson learned from the last time was to use more smaller geometries instead of several really huge. You can obtain the small ones from the big by &lt;a href="/2015/postgis-rectangular-grid-creation/"&gt;cutting it with a grid&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A supervisor of a project I …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michal Zimmermann</dc:creator><pubDate>Mon, 20 Apr 2015 21:06:00 +0200</pubDate><guid isPermaLink="false">tag:www.zimmi.cz,2015-04-20:/posts/2015/grass-big-buffers-made-easy/</guid><category>grass</category></item><item><title>PostGIS: Finding Biggest Land Users Nearby</title><link>https://www.zimmi.cz/posts/2015/postgis-finding-biggest-land-users-nearby/</link><description>&lt;p&gt;At &lt;a href="http://clevermaps.cz"&gt;CleverMaps&lt;/a&gt; we heavily rely on the cadastre of real estate, which is probably the biggest data source in my country. Using their excellent knowledge of this data set, my teammates often supply me with all kinds of weird&amp;nbsp;challenges.&lt;/p&gt;
&lt;h2&gt;Give me the biggest land users&amp;nbsp;nearby&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Find the biggest …&lt;/em&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michal Zimmermann</dc:creator><pubDate>Fri, 03 Apr 2015 10:29:00 +0200</pubDate><guid isPermaLink="false">tag:www.zimmi.cz,2015-04-03:/posts/2015/postgis-finding-biggest-land-users-nearby/</guid><category>postgresql</category><category>postgis</category></item><item><title>PostGIS: Count Line Self-Intersections</title><link>https://www.zimmi.cz/posts/2015/postgis-count-line-self-intersections/</link><description>&lt;p&gt;&lt;a href="https://gis.stackexchange.com/questions/107927/counting-self-intersections-of-linestring-using-postgis/140674#140674"&gt;Is there a way of using PostgreSQL + PostGIS for finding the number of self intersections in a linestring?&lt;/a&gt; was a question that made me think of this problem. I came up with a solution that takes just a few lines of&amp;nbsp;code.&lt;/p&gt;
&lt;p&gt;Assume the following&amp;nbsp;geometries:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;CREATE TABLE test2 (
    id …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michal Zimmermann</dc:creator><pubDate>Mon, 30 Mar 2015 09:12:00 +0200</pubDate><guid isPermaLink="false">tag:www.zimmi.cz,2015-03-30:/posts/2015/postgis-count-line-self-intersections/</guid><category>postgresql</category><category>postgis</category></item><item><title>PostGIS: Rectangular Grid Creation</title><link>https://www.zimmi.cz/posts/2015/postgis-rectangular-grid-creation/</link><description>&lt;p&gt;Creating a rectangular grid to cover a given extent with same sized cells is one of the basic &lt;span class="caps"&gt;GIS&lt;/span&gt; tasks I&amp;#8217;ve had to solve several times so far. I used &lt;span class="caps"&gt;QGIS&lt;/span&gt; or some Python to give me a bunch of &lt;code&gt;INSERT&lt;/code&gt; statements to run in PostGIS database, now I …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michal Zimmermann</dc:creator><pubDate>Tue, 24 Mar 2015 17:47:00 +0100</pubDate><guid isPermaLink="false">tag:www.zimmi.cz,2015-03-24:/posts/2015/postgis-rectangular-grid-creation/</guid><category>postgresql</category><category>postgis</category></item><item><title>PostGIS: Buffers, Intersections, Differences And Collections</title><link>https://www.zimmi.cz/posts/2015/postgis-buffers-intersections-differences-and-collections/</link><description>&lt;p&gt;Being part of &lt;a href="http://clevermaps.cz"&gt;CleverMaps&lt;/a&gt; means doing lot of nasty work with PostGIS. Recently, I&amp;#8217;ve been given a following task that needed to be done for a really big project dealing with agricultural&amp;nbsp;parcels:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;given a polygonal shapefile of agricultural parcels, create 20m wide buffers around all of&amp;nbsp;them,&lt;/li&gt;
&lt;li&gt;extract …&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michal Zimmermann</dc:creator><pubDate>Thu, 19 Mar 2015 19:27:00 +0100</pubDate><guid isPermaLink="false">tag:www.zimmi.cz,2015-03-19:/posts/2015/postgis-buffers-intersections-differences-and-collections/</guid><category>postgis</category><category>postgresql</category></item><item><title>WMS Download For Future Offline Use</title><link>https://www.zimmi.cz/posts/2015/wms-download-for-future-offline-use/</link><description>&lt;p&gt;Using &lt;span class="caps"&gt;WMS&lt;/span&gt; in real time might easily become pain in the ass due to low connection speed or slow server response. Downloading images beforehand seems to be a reasonable choice both to avoid any slowdowns and to improve user experience when working with &lt;span class="caps"&gt;WMS&lt;/span&gt;&amp;nbsp;layers.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://geopython.github.io/OWSLib/"&gt;OWSLib&lt;/a&gt; is a great tool …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michal Zimmermann</dc:creator><pubDate>Sun, 15 Mar 2015 18:10:00 +0100</pubDate><guid isPermaLink="false">tag:www.zimmi.cz,2015-03-15:/posts/2015/wms-download-for-future-offline-use/</guid><category>ogc</category><category>python</category><category>wms</category></item><item><title>Hosting Website On Openshift</title><link>https://www.zimmi.cz/posts/2015/hosting-website-on-openshift/</link><description>&lt;p&gt;I decided to migrate &lt;a href="http://www.zimmi.cz"&gt;my web&lt;/a&gt; to &lt;a href="http://openshift.com"&gt;OpenShift&lt;/a&gt;. It was a bit frustrating but I got it working&amp;nbsp;eventually.&lt;/p&gt;
&lt;h2&gt;Things to know before taking the&amp;nbsp;leap&lt;/h2&gt;
&lt;p&gt;Some domain providers don&amp;#8217;t support &lt;span class="caps"&gt;CNAME&lt;/span&gt; changes for root domains (zimmi.cz in my case). This means you can&amp;#8217;t simply tell your …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michal Zimmermann</dc:creator><pubDate>Mon, 23 Feb 2015 14:25:00 +0100</pubDate><guid isPermaLink="false">tag:www.zimmi.cz,2015-02-23:/posts/2015/hosting-website-on-openshift/</guid><category>openshift</category></item><item><title>PostGIS Case Study: Vozejkmap Open Data (Part II)</title><link>https://www.zimmi.cz/posts/2015/postgis-case-study-vozejkmap-open-data-part-ii/</link><description>&lt;p&gt;&lt;a href="{{ pcposturl(2014, 12, 02, 'postgis-case-study-vozejkmap-open-data-part-i') }}"&gt;In the first part of my little case study&lt;/a&gt; I downloaded &lt;a href="http://vozejkmap.cz"&gt;vozejkmap.cz&lt;/a&gt; dataset and imported it into the PostGIS database. Having spatial data safely stored the time comes to get it onto the map. Libraries used&amp;nbsp;are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://leafletjs.com"&gt;Leaflet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/lvoogdt/Leaflet.awesome-markers"&gt;Leaflet.awesome-markers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Leaflet/Leaflet.markercluster"&gt;Leaflet.markercluster&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I teach cartography visualization classes this semester …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michal Zimmermann</dc:creator><pubDate>Sat, 21 Feb 2015 20:54:00 +0100</pubDate><guid isPermaLink="false">tag:www.zimmi.cz,2015-02-21:/posts/2015/postgis-case-study-vozejkmap-open-data-part-ii/</guid><category>postgresql</category><category>postgis</category></item><item><title>Using PostgreSQL To Update Outdated Map Links</title><link>https://www.zimmi.cz/posts/2015/using-postgresql-to-update-outdated-map-links/</link><description>&lt;p&gt;&lt;a href="http://www.edpp.cz/pdb_mapa-povodnoveho-planu-mesta/"&gt;We&amp;#8217;ve rolled out&lt;/a&gt; completely new map &lt;span class="caps"&gt;GUI&lt;/span&gt; at &lt;a href="http://edpp.cz"&gt;edpp.cz&lt;/a&gt; built on top of &lt;a href="http://ol3js.org"&gt;OpenLayers 3&lt;/a&gt;. It looks great and has lots of functions both for &lt;span class="caps"&gt;BFU&lt;/span&gt; and power users. The only pitfall that came with moving away from OpenLayers 2 were remarkable differences in zoom levels between the …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michal Zimmermann</dc:creator><pubDate>Mon, 16 Feb 2015 18:38:00 +0100</pubDate><guid isPermaLink="false">tag:www.zimmi.cz,2015-02-16:/posts/2015/using-postgresql-to-update-outdated-map-links/</guid><category>postgresql</category><category>regex</category></item><item><title>Leaflet With Custom CRS (EPSG:5514)</title><link>https://www.zimmi.cz/posts/2015/leaflet-with-custom-crs-epsg5514/</link><description>&lt;p&gt;If you ever find yourself in need to use custom projection with Leaflet, feel free to start with this example of &lt;a href="https://github.com/zimmicz/leaflet-custom-crs-jtsk"&gt;Czech national coordinate system&lt;/a&gt;. All you need is &lt;a href="http://leafletjs.com"&gt;Leaflet&lt;/a&gt;, &lt;a href="http://proj4js.org/"&gt;proj4.js&lt;/a&gt; and &lt;a href="https://github.com/kartena/Proj4Leaflet"&gt;proj4 for Leaflet plugin&lt;/a&gt;. I&amp;#8217;m still not sure how &lt;code&gt;origin&lt;/code&gt; coordinates work&amp;nbsp;though.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michal Zimmermann</dc:creator><pubDate>Thu, 15 Jan 2015 19:46:00 +0100</pubDate><guid isPermaLink="false">tag:www.zimmi.cz,2015-01-15:/posts/2015/leaflet-with-custom-crs-epsg5514/</guid><category>javascript</category><category>leaflet</category></item><item><title>PostGIS Case Study: VozejkMap Open Data (Part I)</title><link>https://www.zimmi.cz/posts/2014/postgis-case-study-vozejkmap-open-data-part-i/</link><description>&lt;p&gt;&lt;a href="http://www.vozejkmap.cz"&gt;VozejkMap.cz&lt;/a&gt; is a Czech &lt;strong&gt;open data&lt;/strong&gt; iniatitive that collects data about wheelchair accessible places, e.g. pubs, toilets, cafes etc. As part of being open, they offer a &lt;a href="http://www.vozejkmap.cz/opendata/"&gt;&lt;span class="caps"&gt;JSON&lt;/span&gt; data download&lt;/a&gt;. &lt;span class="caps"&gt;JSON&lt;/span&gt; is a great text format, not so great spatial format (leaving GeoJSON aside) though. Anyway, nothing that …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michal Zimmermann</dc:creator><pubDate>Tue, 02 Dec 2014 17:59:00 +0100</pubDate><guid isPermaLink="false">tag:www.zimmi.cz,2014-12-02:/posts/2014/postgis-case-study-vozejkmap-open-data-part-i/</guid><category>postgresql</category><category>postgis</category></item><item><title>PostGIS Spatial Indexing With ST_Intersects</title><link>https://www.zimmi.cz/posts/2014/postgis-spatial-indexing-with-st_intersects/</link><description>&lt;p&gt;&lt;a href="http://postgis.net/docs/ST_Intersects.html"&gt;PostGIS docs&lt;/a&gt; clearly states that:
    &amp;gt; This function call will automatically include a bounding box comparison that will make use of any indexes that are available on the&amp;nbsp;geometries.&lt;/p&gt;
&lt;p&gt;That means (or at least I think so) that you shouldn&amp;#8217;t bother with using &lt;a href="http://postgis.net/docs/reference.html#Operators"&gt;operators&lt;/a&gt; before calling this&amp;nbsp;function.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://slides.com/michalzimmermann"&gt;I was …&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michal Zimmermann</dc:creator><pubDate>Sun, 23 Nov 2014 10:05:00 +0100</pubDate><guid isPermaLink="false">tag:www.zimmi.cz,2014-11-23:/posts/2014/postgis-spatial-indexing-with-st_intersects/</guid><category>postgis</category></item><item><title>Bash: Prepend To Filename</title><link>https://www.zimmi.cz/posts/2014/bash-prepend-to-filename/</link><description>&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;for f in *; do mv &amp;quot;$f&amp;quot; &amp;quot;prepend_$f&amp;quot;; done
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Whenever you need to prepend anything to your&amp;nbsp;files.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michal Zimmermann</dc:creator><pubDate>Sat, 01 Nov 2014 13:11:00 +0100</pubDate><guid isPermaLink="false">tag:www.zimmi.cz,2014-11-01:/posts/2014/bash-prepend-to-filename/</guid><category>linux</category><category>bash</category></item><item><title>Migrating Geoserver And Checking For Missing Data</title><link>https://www.zimmi.cz/posts/2014/migrating-geoserver-and-checking-for-missing-data/</link><description>&lt;p&gt;I&amp;#8217;ve upgraded a handful of Geoserver installations and it has never been flawless. If you&amp;#8217;re lucky you end up with just &lt;em&gt;some&lt;/em&gt; layers missing, if you&amp;#8217;re not, you&amp;#8217;ll miss a bunch of them (together with layergroups, some stores, workspaces might screw up&amp;nbsp;etc.).&lt;/p&gt;
&lt;p&gt;But how do …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michal Zimmermann</dc:creator><pubDate>Wed, 29 Oct 2014 16:25:00 +0100</pubDate><guid isPermaLink="false">tag:www.zimmi.cz,2014-10-29:/posts/2014/migrating-geoserver-and-checking-for-missing-data/</guid><category>geoserver</category><category>python</category></item><item><title>ogr2ogr UNIX x Windows</title><link>https://www.zimmi.cz/posts/2014/ogr2ogr-unix-x-windows/</link><description>&lt;p&gt;&lt;span class="caps"&gt;GDAL&lt;/span&gt; with its ogr2ogr, ogrinfo and many more is one of the best open source tools to do anything to your spatial data. It is a&amp;nbsp;command line tool, which sort of determines it to be used with &lt;span class="caps"&gt;UNIX&lt;/span&gt; systems, but you might bump into a Windows guy trying to …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michal Zimmermann</dc:creator><pubDate>Tue, 23 Sep 2014 20:03:00 +0200</pubDate><guid isPermaLink="false">tag:www.zimmi.cz,2014-09-23:/posts/2014/ogr2ogr-unix-x-windows/</guid><category>spatial</category><category>linux</category></item><item><title>Notify When Average of 10 Subsequent Numbers Is Bigger Than Given Value</title><link>https://www.zimmi.cz/posts/2014/notify-when-average-of-10-subsequent-numbers-is-bigger-than-given-value/</link><description>&lt;p&gt;I found an &lt;a href="http://stackoverflow.com/questions/25952380/php-find-a-maximum-average-for-10-subsequent-numbers-in-a-list-of-50-random-numb"&gt;interesting question&lt;/a&gt; at StackOverflow asking for help finding solution to what I have already mentioned in the title, with &lt;span class="caps"&gt;PHP&lt;/span&gt;. I gave it a try before reading answers and came up with the following&amp;nbsp;code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$avg  = // value we are looking for
$size = count($numbers);

for ($i = 0 …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michal Zimmermann</dc:creator><pubDate>Sun, 21 Sep 2014 17:38:00 +0200</pubDate><guid isPermaLink="false">tag:www.zimmi.cz,2014-09-21:/posts/2014/notify-when-average-of-10-subsequent-numbers-is-bigger-than-given-value/</guid><category>php</category></item><item><title>PostgreSQL Remote Access</title><link>https://www.zimmi.cz/posts/2014/postgresql-remote-access/</link><description>&lt;p&gt;PostgreSQL is set to listen only to connections coming from localhost by default. I guess that&amp;#8217;s fine as far as you don&amp;#8217;t need access to the database from anywhere else (like your work network). If you do, you need to log via &lt;span class="caps"&gt;SSH&lt;/span&gt; or use some online database …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michal Zimmermann</dc:creator><pubDate>Wed, 17 Sep 2014 17:04:00 +0200</pubDate><guid isPermaLink="false">tag:www.zimmi.cz,2014-09-17:/posts/2014/postgresql-remote-access/</guid><category>postgresql</category><category>linux</category></item><item><title>Switch Latitude And Longitude With Regular Expression</title><link>https://www.zimmi.cz/posts/2014/switch-latitude-and-longitude-with-regular-expression/</link><description>&lt;p&gt;It happens that you receive a file with longitude and latitude just in the opposite order that you would like to have. It&amp;#8217;s fairly easy to switch those without loading it into Excel or Calc and doing &lt;code&gt;Ctrl + C&lt;/code&gt; and &lt;code&gt;Ctrl + V&lt;/code&gt; on&amp;nbsp;columns.&lt;/p&gt;
&lt;p&gt;If you have a file …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michal Zimmermann</dc:creator><pubDate>Sun, 14 Sep 2014 17:21:00 +0200</pubDate><guid isPermaLink="false">tag:www.zimmi.cz,2014-09-14:/posts/2014/switch-latitude-and-longitude-with-regular-expression/</guid><category>sublime</category><category>regex</category></item><item><title>Connecting To Secured ArcGIS Server Layer With OpenLayers 3</title><link>https://www.zimmi.cz/posts/2014/connecting-to-secured-arcgis-server-layer-with-openlayers-3/</link><description>&lt;p&gt;I was made to use ArcGIS Server with &lt;a href="http://openlayers.org"&gt;Openlayers 3&lt;/a&gt; just recently as one of the projects I&amp;#8217;ve been working on demands such different tools to work&amp;nbsp;together.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;tl;dr: I hate&amp;nbsp;Esri.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I found myself in need to access secured layers published via &lt;span class="caps"&gt;WMS&lt;/span&gt; on ArcGIS Server using …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michal Zimmermann</dc:creator><pubDate>Fri, 12 Sep 2014 18:03:00 +0200</pubDate><guid isPermaLink="false">tag:www.zimmi.cz,2014-09-12:/posts/2014/connecting-to-secured-arcgis-server-layer-with-openlayers-3/</guid><category>javascript</category><category>openlayers</category><category>ogc</category></item><item><title>Blogging On Docker: Piecrust To The Rescue</title><link>https://www.zimmi.cz/posts/2014/blogging-on-docker-piecrust-to-the-rescue/</link><description>&lt;p&gt;I love blogging. I hate blogging systems. I hate content management systems. I just want to blog. That&amp;#8217;s what &lt;a href="http://bolt80.com/piecrust/"&gt;PieCrust&lt;/a&gt; is all about - it lets you&amp;nbsp;blog.&lt;/p&gt;
&lt;p&gt;It is powerful static website generator perfect for my needs (and for yours as well?). Blogging with PieCrust is really a piece …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michal Zimmermann</dc:creator><pubDate>Thu, 11 Sep 2014 20:16:00 +0200</pubDate><guid isPermaLink="false">tag:www.zimmi.cz,2014-09-11:/posts/2014/blogging-on-docker-piecrust-to-the-rescue/</guid><category>docker</category><category>linux</category></item><item><title>WMTS: Few Things I Want To Remember</title><link>https://www.zimmi.cz/posts/2014/wmts-few-things-i-want-to-remember/</link><description>&lt;ul&gt;
&lt;li&gt;Used to serve prepared rectangular tiles; this means you are limited by web server speed rather than map server&amp;nbsp;speed&lt;/li&gt;
&lt;li&gt;Several ways to retrieve tiles are defined: &lt;span class="caps"&gt;KVP&lt;/span&gt; and &lt;span class="caps"&gt;REST&lt;/span&gt; are mandatory, &lt;span class="caps"&gt;SOAP&lt;/span&gt; is&amp;nbsp;optional&lt;/li&gt;
&lt;li&gt;Does not allow layer combination; additional tile matrix would have to be&amp;nbsp;created&lt;/li&gt;
&lt;li&gt;GetCapabilities, GetTile …&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michal Zimmermann</dc:creator><pubDate>Wed, 10 Sep 2014 20:36:00 +0200</pubDate><guid isPermaLink="false">tag:www.zimmi.cz,2014-09-10:/posts/2014/wmts-few-things-i-want-to-remember/</guid><category>ogc</category><category>wmts</category></item><item><title>Degrees To Decimal With Javascript</title><link>https://www.zimmi.cz/posts/2014/degrees-to-decimal-with-javascript/</link><description>&lt;p&gt;I have found a nice way to get decimal value from degrees of longitude and latitude&amp;nbsp;recently:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;coords&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;decimal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;output&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
        &lt;span class="nx"&gt;coords&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;coords&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;  &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// it might be &amp;lt;br&amp;gt; as well&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;coords&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;coords&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;j …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michal Zimmermann</dc:creator><pubDate>Tue, 09 Sep 2014 20:28:00 +0200</pubDate><guid isPermaLink="false">tag:www.zimmi.cz,2014-09-09:/posts/2014/degrees-to-decimal-with-javascript/</guid><category>javascript</category></item><item><title>Geoserver Printing With Mapfish</title><link>https://www.zimmi.cz/posts/2014/geoserver-printing-with-mapfish/</link><description>&lt;p&gt;Printing a web map requires a lot more than doing &lt;code&gt;Ctrl + P&lt;/code&gt;. &lt;a href="http://mapfish.org/"&gt;MapFish&lt;/a&gt; seems to be the best option to use with Geoserver, and it comes &lt;a href="http://docs.geoserver.org/stable/en/user/community/printing/"&gt;ready as an extension&lt;/a&gt;. If you installed the module properly, you should be seeing general info at &lt;a href="http://localhost:8080/geoserver/pdf/info.json"&gt;http://localhost:8080/geoserver/pdf/info.json …&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michal Zimmermann</dc:creator><pubDate>Tue, 02 Sep 2014 17:41:00 +0200</pubDate><guid isPermaLink="false">tag:www.zimmi.cz,2014-09-02:/posts/2014/geoserver-printing-with-mapfish/</guid><category>geoserver</category></item><item><title>Analyzing Twitter Languages With Streaming API</title><link>https://www.zimmi.cz/posts/2014/analyzing-twitter-languages-with-streaming-api/</link><description>&lt;p&gt;I am writing a diploma thesis focused on extracting spatial data from social networks. I have been working mainly with Twitter &lt;span class="caps"&gt;API&lt;/span&gt; and results I have got so far look really promising. This post was written as a reaction to many retweets I got when I shared one of my …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michal Zimmermann</dc:creator><pubDate>Tue, 02 Sep 2014 17:37:00 +0200</pubDate><guid isPermaLink="false">tag:www.zimmi.cz,2014-09-02:/posts/2014/analyzing-twitter-languages-with-streaming-api/</guid><category>javascript</category><category>leaflet</category><category>twitter</category></item><item><title>Going 3D With Space Time Cube</title><link>https://www.zimmi.cz/posts/2014/going-3d-with-space-time-cube/</link><description>&lt;p&gt;Seeing &lt;a href="http://anitagraser.com/2012/08/05/space-time-cubes-exploring-twitter-streams-3/"&gt;Anita&amp;#8217;s space-time cube&lt;/a&gt; back in 2013 was a moment of &lt;em&gt;woooow&lt;/em&gt; for me. I&amp;#8217;ve been interested in unusual ways of displaying data ever since I started studying &lt;span class="caps"&gt;GIS&lt;/span&gt; and this one was just great. &lt;em&gt;How the hell did she make it?!&lt;/em&gt;, I thought back&amp;nbsp;then.&lt;/p&gt;

&lt;p&gt;And I …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michal Zimmermann</dc:creator><pubDate>Tue, 02 Sep 2014 17:35:00 +0200</pubDate><guid isPermaLink="false">tag:www.zimmi.cz,2014-09-02:/posts/2014/going-3d-with-space-time-cube/</guid><category>python</category><category>twitter</category></item><item><title>Leaflet Coordinates Control</title><link>https://www.zimmi.cz/posts/2014/leaflet-coordinates-control/</link><description>&lt;p&gt;I&amp;#8217;ve made a &lt;a href="https://github.com/zimmicz/Leaflet-Coordinates-Control"&gt;simple Leaflet control&lt;/a&gt; that displays coordinates when user clicks the map. It is possible to copy them out by clicking the&amp;nbsp;control.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://zimmicz.github.io/Leaflet-Coordinates-Control/"&gt;See GitHub for&amp;nbsp;demo.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can find it in a &lt;a href="http://leafletjs.com/plugins"&gt;list of Leaflet plugins&lt;/a&gt; as well (Controls and Interaction section). My first contribution to …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michal Zimmermann</dc:creator><pubDate>Tue, 02 Sep 2014 17:33:00 +0200</pubDate><guid isPermaLink="false">tag:www.zimmi.cz,2014-09-02:/posts/2014/leaflet-coordinates-control/</guid><category>leaflet</category><category>javascript</category></item><item><title>Leaflet CHMI Radar Control</title><link>https://www.zimmi.cz/posts/2014/leaflet-chmi-radar-control/</link><description>&lt;p&gt;I&amp;#8217;ve been in love with Leaflet ever since v0.4 was released. Well-documented, clean &lt;span class="caps"&gt;API&lt;/span&gt; included, beautiful controls and tons of plugins makes it my number one choice to create a web map. I wrote a Google Maps &lt;span class="caps"&gt;API&lt;/span&gt; app used at edpp.cz a year and a half …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michal Zimmermann</dc:creator><pubDate>Mon, 01 Sep 2014 18:09:00 +0200</pubDate><guid isPermaLink="false">tag:www.zimmi.cz,2014-09-01:/posts/2014/leaflet-chmi-radar-control/</guid><category>leaflet</category><category>javascript</category></item></channel></rss>